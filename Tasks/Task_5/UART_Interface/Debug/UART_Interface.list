
UART_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08003f20  08003f20  00013f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041e8  080041e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080041e8  080041e8  000141e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041f0  080041f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f4  080041f4  000141f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000cc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b592  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a7d  00000000  00000000  0002b632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0002d0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000770  00000000  00000000  0002d8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022333  00000000  00000000  0002e028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ae8  00000000  00000000  0005035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d06ea  00000000  00000000  00059e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012a52d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027d4  00000000  00000000  0012a580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f08 	.word	0x08003f08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003f08 	.word	0x08003f08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fd4d 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f945 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 fa1d 	bl	80009b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800057a:	f000 f99f 	bl	80008bc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800057e:	f000 f9ef 	bl	8000960 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t adcValue = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
  volatile HAL_StatusTypeDef adcPoolResult;

  HAL_ADC_Start(&hadc1);
 8000586:	4888      	ldr	r0, [pc, #544]	; (80007a8 <main+0x240>)
 8000588:	f000 fe1a 	bl	80011c0 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(get_BlueLed() == 1)
 800058c:	f000 fb6e 	bl	8000c6c <get_BlueLed>
 8000590:	4603      	mov	r3, r0
 8000592:	2b01      	cmp	r3, #1
 8000594:	d103      	bne.n	800059e <main+0x36>
	  {
	      printf("\r\nBlueLed ON, with button, number SWT4!\r\n");
 8000596:	4885      	ldr	r0, [pc, #532]	; (80007ac <main+0x244>)
 8000598:	f002 fd70 	bl	800307c <puts>
 800059c:	e007      	b.n	80005ae <main+0x46>
	  }else if (get_BlueLed() == 0)
 800059e:	f000 fb65 	bl	8000c6c <get_BlueLed>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <main+0x46>
	  {
	      printf("\r\nBlueLed OFF, with button, number SWT4!\r\n");
 80005a8:	4881      	ldr	r0, [pc, #516]	; (80007b0 <main+0x248>)
 80005aa:	f002 fd67 	bl	800307c <puts>
	  }

	  if(get_RedLed() == 1)
 80005ae:	f000 fb69 	bl	8000c84 <get_RedLed>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d103      	bne.n	80005c0 <main+0x58>
	  {
		  printf("\r\nRedLed ON, with button, number SWT5!\r\n");
 80005b8:	487e      	ldr	r0, [pc, #504]	; (80007b4 <main+0x24c>)
 80005ba:	f002 fd5f 	bl	800307c <puts>
 80005be:	e007      	b.n	80005d0 <main+0x68>
	  } else if (get_BlueLed() == 0)
 80005c0:	f000 fb54 	bl	8000c6c <get_BlueLed>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d102      	bne.n	80005d0 <main+0x68>
	  {
		  printf("\r\nRedLed OFF, with button, number SWT5!\r\n");
 80005ca:	487b      	ldr	r0, [pc, #492]	; (80007b8 <main+0x250>)
 80005cc:	f002 fd56 	bl	800307c <puts>
	  }

	  if(get_OrangeLed() == 1)
 80005d0:	f000 fb64 	bl	8000c9c <get_OrangeLed>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d103      	bne.n	80005e2 <main+0x7a>
	  {
		  printf("\r\nOrangeLed ON, with button, number SWT3!\r\n");
 80005da:	4878      	ldr	r0, [pc, #480]	; (80007bc <main+0x254>)
 80005dc:	f002 fd4e 	bl	800307c <puts>
 80005e0:	e007      	b.n	80005f2 <main+0x8a>
	  }else if (get_BlueLed() == 0)
 80005e2:	f000 fb43 	bl	8000c6c <get_BlueLed>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <main+0x8a>
	  {
		  printf("\r\nOrangeLed OFF, with button, number SWT3!\r\n");
 80005ec:	4874      	ldr	r0, [pc, #464]	; (80007c0 <main+0x258>)
 80005ee:	f002 fd45 	bl	800307c <puts>
	  }

	  if(get_GreenLed() == 1)
 80005f2:	f000 fb5f 	bl	8000cb4 <get_GreenLed>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d103      	bne.n	8000604 <main+0x9c>
	  {
		  printf("\r\nGreenLed ON, with button, number SWT1!\r\n");
 80005fc:	4871      	ldr	r0, [pc, #452]	; (80007c4 <main+0x25c>)
 80005fe:	f002 fd3d 	bl	800307c <puts>
 8000602:	e007      	b.n	8000614 <main+0xac>
	  }
	  else if (get_GreenLed() == 0)
 8000604:	f000 fb56 	bl	8000cb4 <get_GreenLed>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d102      	bne.n	8000614 <main+0xac>
	  {
		  printf("\r\nGreenLed OFF, with button, number SWT1!\r\n");
 800060e:	486e      	ldr	r0, [pc, #440]	; (80007c8 <main+0x260>)
 8000610:	f002 fd34 	bl	800307c <puts>
	  }

	  uint8_t rcvBuf[1];
	  HAL_StatusTypeDef result;

	  result = HAL_UART_Receive(&huart3, rcvBuf, 1, 10);
 8000614:	4639      	mov	r1, r7
 8000616:	230a      	movs	r3, #10
 8000618:	2201      	movs	r2, #1
 800061a:	486c      	ldr	r0, [pc, #432]	; (80007cc <main+0x264>)
 800061c:	f002 f99d 	bl	800295a <HAL_UART_Receive>
 8000620:	4603      	mov	r3, r0
 8000622:	70fb      	strb	r3, [r7, #3]

	  if (result == HAL_OK)
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	2b00      	cmp	r3, #0
 8000628:	f040 8087 	bne.w	800073a <main+0x1d2>
	  {
		  switch (rcvBuf[0])
 800062c:	783b      	ldrb	r3, [r7, #0]
 800062e:	3b30      	subs	r3, #48	; 0x30
 8000630:	2b07      	cmp	r3, #7
 8000632:	d87b      	bhi.n	800072c <main+0x1c4>
 8000634:	a201      	add	r2, pc, #4	; (adr r2, 800063c <main+0xd4>)
 8000636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063a:	bf00      	nop
 800063c:	08000677 	.word	0x08000677
 8000640:	0800065d 	.word	0x0800065d
 8000644:	080006ab 	.word	0x080006ab
 8000648:	08000691 	.word	0x08000691
 800064c:	080006df 	.word	0x080006df
 8000650:	080006c5 	.word	0x080006c5
 8000654:	08000713 	.word	0x08000713
 8000658:	080006f9 	.word	0x080006f9
		  {
		  	  case '1':
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000662:	485b      	ldr	r0, [pc, #364]	; (80007d0 <main+0x268>)
 8000664:	f001 fbfa 	bl	8001e5c <HAL_GPIO_WritePin>
		  		  HAL_UART_Transmit(&huart3, (uint8_t *)"Blue LED ON!", 12, 10);
 8000668:	230a      	movs	r3, #10
 800066a:	220c      	movs	r2, #12
 800066c:	4959      	ldr	r1, [pc, #356]	; (80007d4 <main+0x26c>)
 800066e:	4857      	ldr	r0, [pc, #348]	; (80007cc <main+0x264>)
 8000670:	f002 f8e1 	bl	8002836 <HAL_UART_Transmit>
		  		  break;
 8000674:	e062      	b.n	800073c <main+0x1d4>

		  	  case '0':
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067c:	4854      	ldr	r0, [pc, #336]	; (80007d0 <main+0x268>)
 800067e:	f001 fbed 	bl	8001e5c <HAL_GPIO_WritePin>
		  		  HAL_UART_Transmit(&huart3, (uint8_t *)"Blue LED OFF!", 13, 10);
 8000682:	230a      	movs	r3, #10
 8000684:	220d      	movs	r2, #13
 8000686:	4954      	ldr	r1, [pc, #336]	; (80007d8 <main+0x270>)
 8000688:	4850      	ldr	r0, [pc, #320]	; (80007cc <main+0x264>)
 800068a:	f002 f8d4 	bl	8002836 <HAL_UART_Transmit>
		  		  break;
 800068e:	e055      	b.n	800073c <main+0x1d4>

		  	  case '3':
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000696:	484e      	ldr	r0, [pc, #312]	; (80007d0 <main+0x268>)
 8000698:	f001 fbe0 	bl	8001e5c <HAL_GPIO_WritePin>
		  		  HAL_UART_Transmit(&huart3, (uint8_t *)"Red LED ON!", 11, 10);
 800069c:	230a      	movs	r3, #10
 800069e:	220b      	movs	r2, #11
 80006a0:	494e      	ldr	r1, [pc, #312]	; (80007dc <main+0x274>)
 80006a2:	484a      	ldr	r0, [pc, #296]	; (80007cc <main+0x264>)
 80006a4:	f002 f8c7 	bl	8002836 <HAL_UART_Transmit>
		  		  break;
 80006a8:	e048      	b.n	800073c <main+0x1d4>

		  	  case '2':
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b0:	4847      	ldr	r0, [pc, #284]	; (80007d0 <main+0x268>)
 80006b2:	f001 fbd3 	bl	8001e5c <HAL_GPIO_WritePin>
		  		  HAL_UART_Transmit(&huart3, (uint8_t *)"Red LED OFF!", 12, 10);
 80006b6:	230a      	movs	r3, #10
 80006b8:	220c      	movs	r2, #12
 80006ba:	4949      	ldr	r1, [pc, #292]	; (80007e0 <main+0x278>)
 80006bc:	4843      	ldr	r0, [pc, #268]	; (80007cc <main+0x264>)
 80006be:	f002 f8ba 	bl	8002836 <HAL_UART_Transmit>
		  		  break;
 80006c2:	e03b      	b.n	800073c <main+0x1d4>

		  	  case '5':
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	4841      	ldr	r0, [pc, #260]	; (80007d0 <main+0x268>)
 80006cc:	f001 fbc6 	bl	8001e5c <HAL_GPIO_WritePin>
		  		  HAL_UART_Transmit(&huart3, (uint8_t *)"Green LED ON!", 13, 10);
 80006d0:	230a      	movs	r3, #10
 80006d2:	220d      	movs	r2, #13
 80006d4:	4943      	ldr	r1, [pc, #268]	; (80007e4 <main+0x27c>)
 80006d6:	483d      	ldr	r0, [pc, #244]	; (80007cc <main+0x264>)
 80006d8:	f002 f8ad 	bl	8002836 <HAL_UART_Transmit>
		  		  break;
 80006dc:	e02e      	b.n	800073c <main+0x1d4>

		  	  case '4':
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e4:	483a      	ldr	r0, [pc, #232]	; (80007d0 <main+0x268>)
 80006e6:	f001 fbb9 	bl	8001e5c <HAL_GPIO_WritePin>
		  		  HAL_UART_Transmit(&huart3, (uint8_t *)"Green LED OFF!", 14, 10);
 80006ea:	230a      	movs	r3, #10
 80006ec:	220e      	movs	r2, #14
 80006ee:	493e      	ldr	r1, [pc, #248]	; (80007e8 <main+0x280>)
 80006f0:	4836      	ldr	r0, [pc, #216]	; (80007cc <main+0x264>)
 80006f2:	f002 f8a0 	bl	8002836 <HAL_UART_Transmit>
		  		  break;
 80006f6:	e021      	b.n	800073c <main+0x1d4>

		  	  case '7':
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fe:	4834      	ldr	r0, [pc, #208]	; (80007d0 <main+0x268>)
 8000700:	f001 fbac 	bl	8001e5c <HAL_GPIO_WritePin>
		  		  HAL_UART_Transmit(&huart3, (uint8_t *)"Orange LED ON!", 14, 10);
 8000704:	230a      	movs	r3, #10
 8000706:	220e      	movs	r2, #14
 8000708:	4938      	ldr	r1, [pc, #224]	; (80007ec <main+0x284>)
 800070a:	4830      	ldr	r0, [pc, #192]	; (80007cc <main+0x264>)
 800070c:	f002 f893 	bl	8002836 <HAL_UART_Transmit>
		  		  break;
 8000710:	e014      	b.n	800073c <main+0x1d4>

		  	  case '6':
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000718:	482d      	ldr	r0, [pc, #180]	; (80007d0 <main+0x268>)
 800071a:	f001 fb9f 	bl	8001e5c <HAL_GPIO_WritePin>
		  		  HAL_UART_Transmit(&huart3, (uint8_t *)"Orange LED OFF!", 15, 10);
 800071e:	230a      	movs	r3, #10
 8000720:	220f      	movs	r2, #15
 8000722:	4933      	ldr	r1, [pc, #204]	; (80007f0 <main+0x288>)
 8000724:	4829      	ldr	r0, [pc, #164]	; (80007cc <main+0x264>)
 8000726:	f002 f886 	bl	8002836 <HAL_UART_Transmit>
		  		  break;
 800072a:	e007      	b.n	800073c <main+0x1d4>

		  	  default:
		  		  HAL_UART_Transmit(&huart3, (uint8_t *)"Error, Sorry(", 13+2, 10);
 800072c:	230a      	movs	r3, #10
 800072e:	220f      	movs	r2, #15
 8000730:	4930      	ldr	r1, [pc, #192]	; (80007f4 <main+0x28c>)
 8000732:	4826      	ldr	r0, [pc, #152]	; (80007cc <main+0x264>)
 8000734:	f002 f87f 	bl	8002836 <HAL_UART_Transmit>
		  		  break;
 8000738:	e000      	b.n	800073c <main+0x1d4>
		  }
	  }
 800073a:	bf00      	nop

	  adcPoolResult = HAL_ADC_PollForConversion(&hadc1, 1);
 800073c:	2101      	movs	r1, #1
 800073e:	481a      	ldr	r0, [pc, #104]	; (80007a8 <main+0x240>)
 8000740:	f000 fe10 	bl	8001364 <HAL_ADC_PollForConversion>
 8000744:	4603      	mov	r3, r0
 8000746:	70bb      	strb	r3, [r7, #2]

	  if (adcPoolResult == HAL_OK) // Ext. TempSensor
 8000748:	78bb      	ldrb	r3, [r7, #2]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d103      	bne.n	8000758 <main+0x1f0>
	  	  adcValue = HAL_ADC_GetValue(&hadc1); // -24C = 2.5 V; 100C  = 0.02V;
 8000750:	4815      	ldr	r0, [pc, #84]	; (80007a8 <main+0x240>)
 8000752:	f000 fe92 	bl	800147a <HAL_ADC_GetValue>
 8000756:	6078      	str	r0, [r7, #4]

	  if(adcValue >= 2000)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800075e:	d30e      	bcc.n	800077e <main+0x216>
	  {
		  printf("\r\nTemperature from ext. TempSensor: ~%lu C\r\n", (adcValue / 100) - 5);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <main+0x290>)
 8000764:	fba2 2303 	umull	r2, r3, r2, r3
 8000768:	095b      	lsrs	r3, r3, #5
 800076a:	3b05      	subs	r3, #5
 800076c:	4619      	mov	r1, r3
 800076e:	4823      	ldr	r0, [pc, #140]	; (80007fc <main+0x294>)
 8000770:	f002 fbfe 	bl	8002f70 <iprintf>
		  HAL_Delay(5000);
 8000774:	f241 3088 	movw	r0, #5000	; 0x1388
 8000778:	f000 fcba 	bl	80010f0 <HAL_Delay>
 800077c:	e706      	b.n	800058c <main+0x24>
	  } else if (adcValue < 2000)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000784:	f4bf af02 	bcs.w	800058c <main+0x24>
	  {
		  printf("\r\nTemperature from ext. TempSensor: ~%lu C\r\n", (adcValue / 100) + 5);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <main+0x290>)
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
 8000790:	095b      	lsrs	r3, r3, #5
 8000792:	3305      	adds	r3, #5
 8000794:	4619      	mov	r1, r3
 8000796:	4819      	ldr	r0, [pc, #100]	; (80007fc <main+0x294>)
 8000798:	f002 fbea 	bl	8002f70 <iprintf>
		  HAL_Delay(5000);
 800079c:	f241 3088 	movw	r0, #5000	; 0x1388
 80007a0:	f000 fca6 	bl	80010f0 <HAL_Delay>
  {
 80007a4:	e6f2      	b.n	800058c <main+0x24>
 80007a6:	bf00      	nop
 80007a8:	200000e0 	.word	0x200000e0
 80007ac:	08003f20 	.word	0x08003f20
 80007b0:	08003f4c 	.word	0x08003f4c
 80007b4:	08003f78 	.word	0x08003f78
 80007b8:	08003fa0 	.word	0x08003fa0
 80007bc:	08003fcc 	.word	0x08003fcc
 80007c0:	08003ff8 	.word	0x08003ff8
 80007c4:	08004024 	.word	0x08004024
 80007c8:	08004050 	.word	0x08004050
 80007cc:	2000009c 	.word	0x2000009c
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	0800407c 	.word	0x0800407c
 80007d8:	0800408c 	.word	0x0800408c
 80007dc:	0800409c 	.word	0x0800409c
 80007e0:	080040a8 	.word	0x080040a8
 80007e4:	080040b8 	.word	0x080040b8
 80007e8:	080040c8 	.word	0x080040c8
 80007ec:	080040d8 	.word	0x080040d8
 80007f0:	080040e8 	.word	0x080040e8
 80007f4:	080040f8 	.word	0x080040f8
 80007f8:	51eb851f 	.word	0x51eb851f
 80007fc:	08004108 	.word	0x08004108

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f002 fba6 	bl	8002f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <SystemClock_Config+0xb4>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <SystemClock_Config+0xb4>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <SystemClock_Config+0xb4>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <SystemClock_Config+0xb8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <SystemClock_Config+0xb8>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <SystemClock_Config+0xb8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fb4b 	bl	8001f0c <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800087c:	f000 f93c 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
 8000882:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fdae 	bl	80023fc <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008a6:	f000 f927 	bl	8000af8 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	; 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008ce:	4b21      	ldr	r3, [pc, #132]	; (8000954 <MX_ADC1_Init+0x98>)
 80008d0:	4a21      	ldr	r2, [pc, #132]	; (8000958 <MX_ADC1_Init+0x9c>)
 80008d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <MX_ADC1_Init+0x98>)
 80008d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_ADC1_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_ADC1_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_ADC1_Init+0x98>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_ADC1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_ADC1_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_ADC1_Init+0x98>)
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <MX_ADC1_Init+0xa0>)
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_ADC1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_ADC1_Init+0x98>)
 800090a:	2201      	movs	r2, #1
 800090c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_ADC1_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_ADC1_Init+0x98>)
 8000918:	2201      	movs	r2, #1
 800091a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <MX_ADC1_Init+0x98>)
 800091e:	f000 fc0b 	bl	8001138 <HAL_ADC_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000928:	f000 f8e6 	bl	8000af8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800092c:	2309      	movs	r3, #9
 800092e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000934:	2307      	movs	r3, #7
 8000936:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_ADC1_Init+0x98>)
 800093e:	f000 fda9 	bl	8001494 <HAL_ADC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000948:	f000 f8d6 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000e0 	.word	0x200000e0
 8000958:	40012000 	.word	0x40012000
 800095c:	0f000001 	.word	0x0f000001

08000960 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_USART3_UART_Init+0x4c>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <MX_USART3_UART_Init+0x50>)
 8000968:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_USART3_UART_Init+0x4c>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_USART3_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_USART3_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_USART3_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_USART3_UART_Init+0x4c>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_USART3_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USART3_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_USART3_UART_Init+0x4c>)
 8000998:	f001 ff00 	bl	800279c <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009a2:	f000 f8a9 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000009c 	.word	0x2000009c
 80009b0:	40004800 	.word	0x40004800

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a3c      	ldr	r2, [pc, #240]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a35      	ldr	r2, [pc, #212]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <MX_GPIO_Init+0x110>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <MX_GPIO_Init+0x110>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <MX_GPIO_Init+0x110>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <MX_GPIO_Init+0x110>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <MX_GPIO_Init+0x110>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <MX_GPIO_Init+0x110>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a40:	4821      	ldr	r0, [pc, #132]	; (8000ac8 <MX_GPIO_Init+0x114>)
 8000a42:	f001 fa0b 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a46:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481a      	ldr	r0, [pc, #104]	; (8000ac8 <MX_GPIO_Init+0x114>)
 8000a60:	f001 f848 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8000a64:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4814      	ldr	r0, [pc, #80]	; (8000acc <MX_GPIO_Init+0x118>)
 8000a7c:	f001 f83a 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <MX_GPIO_Init+0x11c>)
 8000a98:	f001 f82c 	bl	8001af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2017      	movs	r0, #23
 8000aa2:	f000 fff0 	bl	8001a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000aa6:	2017      	movs	r0, #23
 8000aa8:	f001 f809 	bl	8001abe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2028      	movs	r0, #40	; 0x28
 8000ab2:	f000 ffe8 	bl	8001a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ab6:	2028      	movs	r0, #40	; 0x28
 8000ab8:	f001 f801 	bl	8001abe <HAL_NVIC_EnableIRQ>

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020c00 	.word	0x40020c00
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000adc:	1d39      	adds	r1, r7, #4
 8000ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4803      	ldr	r0, [pc, #12]	; (8000af4 <__io_putchar+0x20>)
 8000ae6:	f001 fea6 	bl	8002836 <HAL_UART_Transmit>

  return ch;
 8000aea:	687b      	ldr	r3, [r7, #4]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000009c 	.word	0x2000009c

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_ADC_MspInit+0x7c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d127      	bne.n	8000bc6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_ADC_MspInit+0x80>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a15      	ldr	r2, [pc, #84]	; (8000bd4 <HAL_ADC_MspInit+0x80>)
 8000b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <HAL_ADC_MspInit+0x80>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_ADC_MspInit+0x80>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <HAL_ADC_MspInit+0x80>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_ADC_MspInit+0x80>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_ADC_MspInit+0x84>)
 8000bc2:	f000 ff97 	bl	8001af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	; 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40012000 	.word	0x40012000
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <HAL_UART_MspInit+0x84>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12c      	bne.n	8000c58 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_UART_MspInit+0x8c>)
 8000c54:	f000 ff4e 	bl	8001af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40004800 	.word	0x40004800
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <get_BlueLed>:

/******************************************************************************/
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
	uint8_t get_BlueLed(void)
		{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
			return BlueLed;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <get_BlueLed+0x14>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
		}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	2000008c 	.word	0x2000008c

08000c84 <get_RedLed>:

	uint8_t get_RedLed(void)
		{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
			return RedLed;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <get_RedLed+0x14>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
		}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	2000008d 	.word	0x2000008d

08000c9c <get_OrangeLed>:

	uint8_t get_OrangeLed(void)
		{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
			return OrangeLed;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <get_OrangeLed+0x14>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
		}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	2000008e 	.word	0x2000008e

08000cb4 <get_GreenLed>:

	uint8_t get_GreenLed(void)
		{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
			return GreenLed;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <get_GreenLed+0x14>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
		}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	2000008f 	.word	0x2000008f

08000ccc <NMI_Handler>:
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f000 f9ca 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t get_pin6 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	482c      	ldr	r0, [pc, #176]	; (8000ddc <EXTI9_5_IRQHandler+0xbc>)
 8000d2a:	f001 f87f 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
    uint8_t get_pin8 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8000d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d36:	4829      	ldr	r0, [pc, #164]	; (8000ddc <EXTI9_5_IRQHandler+0xbc>)
 8000d38:	f001 f878 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	71bb      	strb	r3, [r7, #6]
    uint8_t get_pin9 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8000d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d44:	4825      	ldr	r0, [pc, #148]	; (8000ddc <EXTI9_5_IRQHandler+0xbc>)
 8000d46:	f001 f871 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	717b      	strb	r3, [r7, #5]

    if(get_pin6 == 0)
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10f      	bne.n	8000d74 <EXTI9_5_IRQHandler+0x54>
    {
    	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_15);
 8000d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d58:	4821      	ldr	r0, [pc, #132]	; (8000de0 <EXTI9_5_IRQHandler+0xc0>)
 8000d5a:	f001 f898 	bl	8001e8e <HAL_GPIO_TogglePin>
    	BlueLed = !BlueLed;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <EXTI9_5_IRQHandler+0xc4>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf0c      	ite	eq
 8000d66:	2301      	moveq	r3, #1
 8000d68:	2300      	movne	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <EXTI9_5_IRQHandler+0xc4>)
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e024      	b.n	8000dbe <EXTI9_5_IRQHandler+0x9e>
    } else if (get_pin8 == 0)
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10f      	bne.n	8000d9a <EXTI9_5_IRQHandler+0x7a>
    {
    	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_14);
 8000d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7e:	4818      	ldr	r0, [pc, #96]	; (8000de0 <EXTI9_5_IRQHandler+0xc0>)
 8000d80:	f001 f885 	bl	8001e8e <HAL_GPIO_TogglePin>
    	RedLed = !RedLed;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <EXTI9_5_IRQHandler+0xc8>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf0c      	ite	eq
 8000d8c:	2301      	moveq	r3, #1
 8000d8e:	2300      	movne	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <EXTI9_5_IRQHandler+0xc8>)
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e011      	b.n	8000dbe <EXTI9_5_IRQHandler+0x9e>
    } else if (get_pin9 == 0)
 8000d9a:	797b      	ldrb	r3, [r7, #5]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10e      	bne.n	8000dbe <EXTI9_5_IRQHandler+0x9e>
    {
    	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_13);
 8000da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da4:	480e      	ldr	r0, [pc, #56]	; (8000de0 <EXTI9_5_IRQHandler+0xc0>)
 8000da6:	f001 f872 	bl	8001e8e <HAL_GPIO_TogglePin>
    	OrangeLed = !OrangeLed;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <EXTI9_5_IRQHandler+0xcc>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf0c      	ite	eq
 8000db2:	2301      	moveq	r3, #1
 8000db4:	2300      	movne	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <EXTI9_5_IRQHandler+0xcc>)
 8000dbc:	701a      	strb	r2, [r3, #0]
    }

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000dbe:	2040      	movs	r0, #64	; 0x40
 8000dc0:	f001 f880 	bl	8001ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000dc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000dc8:	f001 f87c 	bl	8001ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000dcc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dd0:	f001 f878 	bl	8001ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40020c00 	.word	0x40020c00
 8000de4:	2000008c 	.word	0x2000008c
 8000de8:	2000008d 	.word	0x2000008d
 8000dec:	2000008e 	.word	0x2000008e

08000df0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	uint8_t get_pin11 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8000df6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dfa:	4811      	ldr	r0, [pc, #68]	; (8000e40 <EXTI15_10_IRQHandler+0x50>)
 8000dfc:	f001 f816 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]

	if(get_pin11 == 0)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10e      	bne.n	8000e28 <EXTI15_10_IRQHandler+0x38>
	{
	     HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_12);
 8000e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <EXTI15_10_IRQHandler+0x54>)
 8000e10:	f001 f83d 	bl	8001e8e <HAL_GPIO_TogglePin>
	     GreenLed = !GreenLed;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <EXTI15_10_IRQHandler+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf0c      	ite	eq
 8000e1c:	2301      	moveq	r3, #1
 8000e1e:	2300      	movne	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <EXTI15_10_IRQHandler+0x58>)
 8000e26:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000e28:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e2c:	f001 f84a 	bl	8001ec4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000e30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e34:	f001 f846 	bl	8001ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020c00 	.word	0x40020c00
 8000e48:	2000008f 	.word	0x2000008f

08000e4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00a      	b.n	8000e74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e5e:	f3af 8000 	nop.w
 8000e62:	4601      	mov	r1, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf0      	blt.n	8000e5e <_read+0x12>
	}

return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e009      	b.n	8000eac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fe17 	bl	8000ad4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf1      	blt.n	8000e98 <_write+0x12>
	}
	return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_close>:

int _close(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_isatty>:

int _isatty(int file)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	return 1;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f001 ffd8 	bl	8002f0c <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20020000 	.word	0x20020000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	20000090 	.word	0x20000090
 8000f90:	20000140 	.word	0x20000140

08000f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fbe:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd4:	4c0b      	ldr	r4, [pc, #44]	; (8001004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fe2:	f7ff ffd7 	bl	8000f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f001 ff97 	bl	8002f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fabd 	bl	8000568 <main>
  bx  lr    
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ffc:	080041f8 	.word	0x080041f8
  ldr r2, =_sbss
 8001000:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001004:	2000013c 	.word	0x2000013c

08001008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <HAL_Init+0x40>)
 8001016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_Init+0x40>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x40>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 fd1b 	bl	8001a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	200f      	movs	r0, #15
 800103c:	f000 f808 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fd60 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fd33 	bl	8001ada <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800108c:	f000 fcfb 	bl	8001a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000128 	.word	0x20000128

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000128 	.word	0x20000128

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008

08001138 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e033      	b.n	80011b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fcfc 	bl	8000b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	d118      	bne.n	80011a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800117e:	f023 0302 	bic.w	r3, r3, #2
 8001182:	f043 0202 	orr.w	r2, r3, #2
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 faa4 	bl	80016d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f023 0303 	bic.w	r3, r3, #3
 800119e:	f043 0201 	orr.w	r2, r3, #1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
 80011a6:	e001      	b.n	80011ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Start+0x1a>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e0b2      	b.n	8001340 <HAL_ADC_Start+0x180>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d018      	beq.n	8001222 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001200:	4b52      	ldr	r3, [pc, #328]	; (800134c <HAL_ADC_Start+0x18c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a52      	ldr	r2, [pc, #328]	; (8001350 <HAL_ADC_Start+0x190>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	0c9a      	lsrs	r2, r3, #18
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001214:	e002      	b.n	800121c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3b01      	subs	r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f9      	bne.n	8001216 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b01      	cmp	r3, #1
 800122e:	d17a      	bne.n	8001326 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001238:	f023 0301 	bic.w	r3, r3, #1
 800123c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800125a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800126e:	d106      	bne.n	800127e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	f023 0206 	bic.w	r2, r3, #6
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	645a      	str	r2, [r3, #68]	; 0x44
 800127c:	e002      	b.n	8001284 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800128c:	4b31      	ldr	r3, [pc, #196]	; (8001354 <HAL_ADC_Start+0x194>)
 800128e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001298:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d12a      	bne.n	80012fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a2b      	ldr	r2, [pc, #172]	; (8001358 <HAL_ADC_Start+0x198>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d015      	beq.n	80012dc <HAL_ADC_Start+0x11c>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a29      	ldr	r2, [pc, #164]	; (800135c <HAL_ADC_Start+0x19c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d105      	bne.n	80012c6 <HAL_ADC_Start+0x106>
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <HAL_ADC_Start+0x194>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 031f 	and.w	r3, r3, #31
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00a      	beq.n	80012dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a25      	ldr	r2, [pc, #148]	; (8001360 <HAL_ADC_Start+0x1a0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d136      	bne.n	800133e <HAL_ADC_Start+0x17e>
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_ADC_Start+0x194>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d130      	bne.n	800133e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d129      	bne.n	800133e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	e020      	b.n	800133e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a15      	ldr	r2, [pc, #84]	; (8001358 <HAL_ADC_Start+0x198>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d11b      	bne.n	800133e <HAL_ADC_Start+0x17e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d114      	bne.n	800133e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	e00b      	b.n	800133e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f043 0210 	orr.w	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f043 0201 	orr.w	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	20000000 	.word	0x20000000
 8001350:	431bde83 	.word	0x431bde83
 8001354:	40012300 	.word	0x40012300
 8001358:	40012000 	.word	0x40012000
 800135c:	40012100 	.word	0x40012100
 8001360:	40012200 	.word	0x40012200

08001364 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001380:	d113      	bne.n	80013aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800138c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001390:	d10b      	bne.n	80013aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f043 0220 	orr.w	r2, r3, #32
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e063      	b.n	8001472 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80013aa:	f7ff fe95 	bl	80010d8 <HAL_GetTick>
 80013ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013b0:	e021      	b.n	80013f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013b8:	d01d      	beq.n	80013f6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d007      	beq.n	80013d0 <HAL_ADC_PollForConversion+0x6c>
 80013c0:	f7ff fe8a 	bl	80010d8 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d212      	bcs.n	80013f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d00b      	beq.n	80013f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f043 0204 	orr.w	r2, r3, #4
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e03d      	b.n	8001472 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b02      	cmp	r3, #2
 8001402:	d1d6      	bne.n	80013b2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f06f 0212 	mvn.w	r2, #18
 800140c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d123      	bne.n	8001470 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800142c:	2b00      	cmp	r3, #0
 800142e:	d11f      	bne.n	8001470 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001448:	2b00      	cmp	r3, #0
 800144a:	d111      	bne.n	8001470 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d105      	bne.n	8001470 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f043 0201 	orr.w	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x1c>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e105      	b.n	80016bc <HAL_ADC_ConfigChannel+0x228>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b09      	cmp	r3, #9
 80014be:	d925      	bls.n	800150c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68d9      	ldr	r1, [r3, #12]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	3b1e      	subs	r3, #30
 80014d6:	2207      	movs	r2, #7
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43da      	mvns	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	400a      	ands	r2, r1
 80014e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68d9      	ldr	r1, [r3, #12]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4403      	add	r3, r0
 80014fe:	3b1e      	subs	r3, #30
 8001500:	409a      	lsls	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	e022      	b.n	8001552 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6919      	ldr	r1, [r3, #16]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	2207      	movs	r2, #7
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	400a      	ands	r2, r1
 800152e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6919      	ldr	r1, [r3, #16]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	4603      	mov	r3, r0
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4403      	add	r3, r0
 8001548:	409a      	lsls	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b06      	cmp	r3, #6
 8001558:	d824      	bhi.n	80015a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b05      	subs	r3, #5
 800156c:	221f      	movs	r2, #31
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b05      	subs	r3, #5
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
 80015a2:	e04c      	b.n	800163e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	d824      	bhi.n	80015f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3b23      	subs	r3, #35	; 0x23
 80015be:	221f      	movs	r2, #31
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43da      	mvns	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	400a      	ands	r2, r1
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	3b23      	subs	r3, #35	; 0x23
 80015e8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
 80015f4:	e023      	b.n	800163e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3b41      	subs	r3, #65	; 0x41
 8001608:	221f      	movs	r2, #31
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	400a      	ands	r2, r1
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	4618      	mov	r0, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	3b41      	subs	r3, #65	; 0x41
 8001632:	fa00 f203 	lsl.w	r2, r0, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_ADC_ConfigChannel+0x234>)
 8001640:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a21      	ldr	r2, [pc, #132]	; (80016cc <HAL_ADC_ConfigChannel+0x238>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d109      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1cc>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b12      	cmp	r3, #18
 8001652:	d105      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_ADC_ConfigChannel+0x238>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d123      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b10      	cmp	r3, #16
 8001670:	d003      	beq.n	800167a <HAL_ADC_ConfigChannel+0x1e6>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b11      	cmp	r3, #17
 8001678:	d11b      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b10      	cmp	r3, #16
 800168c:	d111      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_ADC_ConfigChannel+0x23c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_ADC_ConfigChannel+0x240>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9a      	lsrs	r2, r3, #18
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016a4:	e002      	b.n	80016ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f9      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40012300 	.word	0x40012300
 80016cc:	40012000 	.word	0x40012000
 80016d0:	20000000 	.word	0x20000000
 80016d4:	431bde83 	.word	0x431bde83

080016d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e0:	4b79      	ldr	r3, [pc, #484]	; (80018c8 <ADC_Init+0x1f0>)
 80016e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800170c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	021a      	lsls	r2, r3, #8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6899      	ldr	r1, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	4a58      	ldr	r2, [pc, #352]	; (80018cc <ADC_Init+0x1f4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d022      	beq.n	80017b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800177e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6899      	ldr	r1, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	e00f      	b.n	80017d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0202 	bic.w	r2, r2, #2
 80017e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7e1b      	ldrb	r3, [r3, #24]
 80017f0:	005a      	lsls	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01b      	beq.n	800183c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001812:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001822:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6859      	ldr	r1, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	3b01      	subs	r3, #1
 8001830:	035a      	lsls	r2, r3, #13
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	e007      	b.n	800184c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	3b01      	subs	r3, #1
 8001868:	051a      	lsls	r2, r3, #20
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001880:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6899      	ldr	r1, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800188e:	025a      	lsls	r2, r3, #9
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6899      	ldr	r1, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	029a      	lsls	r2, r3, #10
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	40012300 	.word	0x40012300
 80018cc:	0f000001 	.word	0x0f000001

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4907      	ldr	r1, [pc, #28]	; (800196c <__NVIC_EnableIRQ+0x38>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	; (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a3c:	d301      	bcc.n	8001a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00f      	b.n	8001a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <SysTick_Config+0x40>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a50:	f7ff ff8e 	bl	8001970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <SysTick_Config+0x40>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SysTick_Config+0x40>)
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	e000e010 	.word	0xe000e010

08001a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff29 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a98:	f7ff ff3e 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	6978      	ldr	r0, [r7, #20]
 8001aa4:	f7ff ff8e 	bl	80019c4 <NVIC_EncodePriority>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff5d 	bl	8001970 <__NVIC_SetPriority>
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff31 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ffa2 	bl	8001a2c <SysTick_Config>
 8001ae8:	4603      	mov	r3, r0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	e16b      	b.n	8001de8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	f040 815a 	bne.w	8001de2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d005      	beq.n	8001b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d130      	bne.n	8001ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 0201 	and.w	r2, r3, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d017      	beq.n	8001be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d123      	bne.n	8001c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	08da      	lsrs	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3208      	adds	r2, #8
 8001c32:	69b9      	ldr	r1, [r7, #24]
 8001c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0203 	and.w	r2, r3, #3
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80b4 	beq.w	8001de2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b60      	ldr	r3, [pc, #384]	; (8001e00 <HAL_GPIO_Init+0x30c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a5f      	ldr	r2, [pc, #380]	; (8001e00 <HAL_GPIO_Init+0x30c>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b5d      	ldr	r3, [pc, #372]	; (8001e00 <HAL_GPIO_Init+0x30c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c96:	4a5b      	ldr	r2, [pc, #364]	; (8001e04 <HAL_GPIO_Init+0x310>)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a52      	ldr	r2, [pc, #328]	; (8001e08 <HAL_GPIO_Init+0x314>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d02b      	beq.n	8001d1a <HAL_GPIO_Init+0x226>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a51      	ldr	r2, [pc, #324]	; (8001e0c <HAL_GPIO_Init+0x318>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d025      	beq.n	8001d16 <HAL_GPIO_Init+0x222>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a50      	ldr	r2, [pc, #320]	; (8001e10 <HAL_GPIO_Init+0x31c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d01f      	beq.n	8001d12 <HAL_GPIO_Init+0x21e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4f      	ldr	r2, [pc, #316]	; (8001e14 <HAL_GPIO_Init+0x320>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d019      	beq.n	8001d0e <HAL_GPIO_Init+0x21a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4e      	ldr	r2, [pc, #312]	; (8001e18 <HAL_GPIO_Init+0x324>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0x216>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4d      	ldr	r2, [pc, #308]	; (8001e1c <HAL_GPIO_Init+0x328>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00d      	beq.n	8001d06 <HAL_GPIO_Init+0x212>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4c      	ldr	r2, [pc, #304]	; (8001e20 <HAL_GPIO_Init+0x32c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <HAL_GPIO_Init+0x20e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4b      	ldr	r2, [pc, #300]	; (8001e24 <HAL_GPIO_Init+0x330>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_GPIO_Init+0x20a>
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	e00e      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001cfe:	2308      	movs	r3, #8
 8001d00:	e00c      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d02:	2306      	movs	r3, #6
 8001d04:	e00a      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d06:	2305      	movs	r3, #5
 8001d08:	e008      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e004      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e002      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x228>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	f002 0203 	and.w	r2, r2, #3
 8001d22:	0092      	lsls	r2, r2, #2
 8001d24:	4093      	lsls	r3, r2
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d2c:	4935      	ldr	r1, [pc, #212]	; (8001e04 <HAL_GPIO_Init+0x310>)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d3a:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d5e:	4a32      	ldr	r2, [pc, #200]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d88:	4a27      	ldr	r2, [pc, #156]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db2:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ddc:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3301      	adds	r3, #1
 8001de6:	61fb      	str	r3, [r7, #28]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2b0f      	cmp	r3, #15
 8001dec:	f67f ae90 	bls.w	8001b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40013800 	.word	0x40013800
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40020800 	.word	0x40020800
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40021400 	.word	0x40021400
 8001e20:	40021800 	.word	0x40021800
 8001e24:	40021c00 	.word	0x40021c00
 8001e28:	40013c00 	.word	0x40013c00

08001e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e6c:	787b      	ldrb	r3, [r7, #1]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e78:	e003      	b.n	8001e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	041a      	lsls	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	619a      	str	r2, [r3, #24]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea0:	887a      	ldrh	r2, [r7, #2]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	041a      	lsls	r2, r3, #16
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	887b      	ldrh	r3, [r7, #2]
 8001eae:	400b      	ands	r3, r1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	619a      	str	r2, [r3, #24]
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d006      	beq.n	8001ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f806 	bl	8001ef4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40013c00 	.word	0x40013c00

08001ef4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e264      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d075      	beq.n	8002016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2a:	4ba3      	ldr	r3, [pc, #652]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d00c      	beq.n	8001f50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	4ba0      	ldr	r3, [pc, #640]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d112      	bne.n	8001f68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f42:	4b9d      	ldr	r3, [pc, #628]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	4b99      	ldr	r3, [pc, #612]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d05b      	beq.n	8002014 <HAL_RCC_OscConfig+0x108>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d157      	bne.n	8002014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e23f      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d106      	bne.n	8001f80 <HAL_RCC_OscConfig+0x74>
 8001f72:	4b91      	ldr	r3, [pc, #580]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a90      	ldr	r2, [pc, #576]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e01d      	b.n	8001fbc <HAL_RCC_OscConfig+0xb0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x98>
 8001f8a:	4b8b      	ldr	r3, [pc, #556]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a8a      	ldr	r2, [pc, #552]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a87      	ldr	r2, [pc, #540]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0xb0>
 8001fa4:	4b84      	ldr	r3, [pc, #528]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a83      	ldr	r2, [pc, #524]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b81      	ldr	r3, [pc, #516]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a80      	ldr	r2, [pc, #512]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f888 	bl	80010d8 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff f884 	bl	80010d8 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e204      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0xc0>
 8001fea:	e014      	b.n	8002016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff f874 	bl	80010d8 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff f870 	bl	80010d8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e1f0      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002006:	4b6c      	ldr	r3, [pc, #432]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0xe8>
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d063      	beq.n	80020ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002022:	4b65      	ldr	r3, [pc, #404]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00b      	beq.n	8002046 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202e:	4b62      	ldr	r3, [pc, #392]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002036:	2b08      	cmp	r3, #8
 8002038:	d11c      	bne.n	8002074 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203a:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d116      	bne.n	8002074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002046:	4b5c      	ldr	r3, [pc, #368]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x152>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e1c4      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4952      	ldr	r1, [pc, #328]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	e03a      	b.n	80020ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800207c:	4b4f      	ldr	r3, [pc, #316]	; (80021bc <HAL_RCC_OscConfig+0x2b0>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7ff f829 	bl	80010d8 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208a:	f7ff f825 	bl	80010d8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e1a5      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209c:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a8:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4940      	ldr	r1, [pc, #256]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
 80020bc:	e015      	b.n	80020ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020be:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCC_OscConfig+0x2b0>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff f808 	bl	80010d8 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020cc:	f7ff f804 	bl	80010d8 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e184      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d030      	beq.n	8002158 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d016      	beq.n	800212c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fe:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <HAL_RCC_OscConfig+0x2b4>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7fe ffe8 	bl	80010d8 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210c:	f7fe ffe4 	bl	80010d8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e164      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x200>
 800212a:	e015      	b.n	8002158 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCC_OscConfig+0x2b4>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002132:	f7fe ffd1 	bl	80010d8 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213a:	f7fe ffcd 	bl	80010d8 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e14d      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 800214e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f0      	bne.n	800213a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a0 	beq.w	80022a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10f      	bne.n	8002196 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_OscConfig+0x2b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d121      	bne.n	80021e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_RCC_OscConfig+0x2b8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <HAL_RCC_OscConfig+0x2b8>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7fe ff93 	bl	80010d8 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e011      	b.n	80021da <HAL_RCC_OscConfig+0x2ce>
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	42470000 	.word	0x42470000
 80021c0:	42470e80 	.word	0x42470e80
 80021c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c8:	f7fe ff86 	bl	80010d8 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e106      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	4b85      	ldr	r3, [pc, #532]	; (80023f0 <HAL_RCC_OscConfig+0x4e4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d106      	bne.n	80021fc <HAL_RCC_OscConfig+0x2f0>
 80021ee:	4b81      	ldr	r3, [pc, #516]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a80      	ldr	r2, [pc, #512]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70
 80021fa:	e01c      	b.n	8002236 <HAL_RCC_OscConfig+0x32a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d10c      	bne.n	800221e <HAL_RCC_OscConfig+0x312>
 8002204:	4b7b      	ldr	r3, [pc, #492]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	4a7a      	ldr	r2, [pc, #488]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	6713      	str	r3, [r2, #112]	; 0x70
 8002210:	4b78      	ldr	r3, [pc, #480]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002214:	4a77      	ldr	r2, [pc, #476]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6713      	str	r3, [r2, #112]	; 0x70
 800221c:	e00b      	b.n	8002236 <HAL_RCC_OscConfig+0x32a>
 800221e:	4b75      	ldr	r3, [pc, #468]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a74      	ldr	r2, [pc, #464]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
 800222a:	4b72      	ldr	r3, [pc, #456]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	4a71      	ldr	r2, [pc, #452]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d015      	beq.n	800226a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223e:	f7fe ff4b 	bl	80010d8 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe ff47 	bl	80010d8 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0c5      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	4b65      	ldr	r3, [pc, #404]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ee      	beq.n	8002246 <HAL_RCC_OscConfig+0x33a>
 8002268:	e014      	b.n	8002294 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7fe ff35 	bl	80010d8 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe ff31 	bl	80010d8 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0af      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ee      	bne.n	8002272 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a55      	ldr	r2, [pc, #340]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 809b 	beq.w	80023e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022b0:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d05c      	beq.n	8002376 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d141      	bne.n	8002348 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c4:	4b4c      	ldr	r3, [pc, #304]	; (80023f8 <HAL_RCC_OscConfig+0x4ec>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe ff05 	bl	80010d8 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe ff01 	bl	80010d8 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e081      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69da      	ldr	r2, [r3, #28]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	019b      	lsls	r3, r3, #6
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	3b01      	subs	r3, #1
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	061b      	lsls	r3, r3, #24
 8002314:	4937      	ldr	r1, [pc, #220]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231a:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <HAL_RCC_OscConfig+0x4ec>)
 800231c:	2201      	movs	r2, #1
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe feda 	bl	80010d8 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fed6 	bl	80010d8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e056      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	4b2e      	ldr	r3, [pc, #184]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x41c>
 8002346:	e04e      	b.n	80023e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_RCC_OscConfig+0x4ec>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe fec3 	bl	80010d8 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002356:	f7fe febf 	bl	80010d8 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e03f      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002368:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f0      	bne.n	8002356 <HAL_RCC_OscConfig+0x44a>
 8002374:	e037      	b.n	80023e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e032      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCC_OscConfig+0x4e8>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d028      	beq.n	80023e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d121      	bne.n	80023e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d11a      	bne.n	80023e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023b2:	4013      	ands	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d111      	bne.n	80023e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	3b01      	subs	r3, #1
 80023cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40007000 	.word	0x40007000
 80023f4:	40023800 	.word	0x40023800
 80023f8:	42470060 	.word	0x42470060

080023fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0cc      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002410:	4b68      	ldr	r3, [pc, #416]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d90c      	bls.n	8002438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0b8      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800245a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002468:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a52      	ldr	r2, [pc, #328]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	494d      	ldr	r1, [pc, #308]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d044      	beq.n	800251c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d119      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e07f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d003      	beq.n	80024ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ba:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e06f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e067      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024da:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f023 0203 	bic.w	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4934      	ldr	r1, [pc, #208]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ec:	f7fe fdf4 	bl	80010d8 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	e00a      	b.n	800250a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f4:	f7fe fdf0 	bl	80010d8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e04f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 020c 	and.w	r2, r3, #12
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	429a      	cmp	r2, r3
 800251a:	d1eb      	bne.n	80024f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d20c      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e032      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4916      	ldr	r1, [pc, #88]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	490e      	ldr	r1, [pc, #56]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002582:	f000 f821 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8002586:	4602      	mov	r2, r0
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	490a      	ldr	r1, [pc, #40]	; (80025bc <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	5ccb      	ldrb	r3, [r1, r3]
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fd54 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023c00 	.word	0x40023c00
 80025b8:	40023800 	.word	0x40023800
 80025bc:	08004138 	.word	0x08004138
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000004 	.word	0x20000004

080025c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c8:	b5b0      	push	{r4, r5, r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025ce:	2100      	movs	r1, #0
 80025d0:	6079      	str	r1, [r7, #4]
 80025d2:	2100      	movs	r1, #0
 80025d4:	60f9      	str	r1, [r7, #12]
 80025d6:	2100      	movs	r1, #0
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025da:	2100      	movs	r1, #0
 80025dc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025de:	4952      	ldr	r1, [pc, #328]	; (8002728 <HAL_RCC_GetSysClockFreq+0x160>)
 80025e0:	6889      	ldr	r1, [r1, #8]
 80025e2:	f001 010c 	and.w	r1, r1, #12
 80025e6:	2908      	cmp	r1, #8
 80025e8:	d00d      	beq.n	8002606 <HAL_RCC_GetSysClockFreq+0x3e>
 80025ea:	2908      	cmp	r1, #8
 80025ec:	f200 8094 	bhi.w	8002718 <HAL_RCC_GetSysClockFreq+0x150>
 80025f0:	2900      	cmp	r1, #0
 80025f2:	d002      	beq.n	80025fa <HAL_RCC_GetSysClockFreq+0x32>
 80025f4:	2904      	cmp	r1, #4
 80025f6:	d003      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x38>
 80025f8:	e08e      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025fa:	4b4c      	ldr	r3, [pc, #304]	; (800272c <HAL_RCC_GetSysClockFreq+0x164>)
 80025fc:	60bb      	str	r3, [r7, #8]
       break;
 80025fe:	e08e      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002600:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <HAL_RCC_GetSysClockFreq+0x168>)
 8002602:	60bb      	str	r3, [r7, #8]
      break;
 8002604:	e08b      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002606:	4948      	ldr	r1, [pc, #288]	; (8002728 <HAL_RCC_GetSysClockFreq+0x160>)
 8002608:	6849      	ldr	r1, [r1, #4]
 800260a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800260e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002610:	4945      	ldr	r1, [pc, #276]	; (8002728 <HAL_RCC_GetSysClockFreq+0x160>)
 8002612:	6849      	ldr	r1, [r1, #4]
 8002614:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002618:	2900      	cmp	r1, #0
 800261a:	d024      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261c:	4942      	ldr	r1, [pc, #264]	; (8002728 <HAL_RCC_GetSysClockFreq+0x160>)
 800261e:	6849      	ldr	r1, [r1, #4]
 8002620:	0989      	lsrs	r1, r1, #6
 8002622:	4608      	mov	r0, r1
 8002624:	f04f 0100 	mov.w	r1, #0
 8002628:	f240 14ff 	movw	r4, #511	; 0x1ff
 800262c:	f04f 0500 	mov.w	r5, #0
 8002630:	ea00 0204 	and.w	r2, r0, r4
 8002634:	ea01 0305 	and.w	r3, r1, r5
 8002638:	493d      	ldr	r1, [pc, #244]	; (8002730 <HAL_RCC_GetSysClockFreq+0x168>)
 800263a:	fb01 f003 	mul.w	r0, r1, r3
 800263e:	2100      	movs	r1, #0
 8002640:	fb01 f102 	mul.w	r1, r1, r2
 8002644:	1844      	adds	r4, r0, r1
 8002646:	493a      	ldr	r1, [pc, #232]	; (8002730 <HAL_RCC_GetSysClockFreq+0x168>)
 8002648:	fba2 0101 	umull	r0, r1, r2, r1
 800264c:	1863      	adds	r3, r4, r1
 800264e:	4619      	mov	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	461a      	mov	r2, r3
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	f7fd fe0a 	bl	8000270 <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4613      	mov	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e04a      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002666:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_RCC_GetSysClockFreq+0x160>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	461a      	mov	r2, r3
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	ea02 0400 	and.w	r4, r2, r0
 800267e:	ea03 0501 	and.w	r5, r3, r1
 8002682:	4620      	mov	r0, r4
 8002684:	4629      	mov	r1, r5
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	014b      	lsls	r3, r1, #5
 8002690:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002694:	0142      	lsls	r2, r0, #5
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	1b00      	subs	r0, r0, r4
 800269c:	eb61 0105 	sbc.w	r1, r1, r5
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	018b      	lsls	r3, r1, #6
 80026aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026ae:	0182      	lsls	r2, r0, #6
 80026b0:	1a12      	subs	r2, r2, r0
 80026b2:	eb63 0301 	sbc.w	r3, r3, r1
 80026b6:	f04f 0000 	mov.w	r0, #0
 80026ba:	f04f 0100 	mov.w	r1, #0
 80026be:	00d9      	lsls	r1, r3, #3
 80026c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026c4:	00d0      	lsls	r0, r2, #3
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	1912      	adds	r2, r2, r4
 80026cc:	eb45 0303 	adc.w	r3, r5, r3
 80026d0:	f04f 0000 	mov.w	r0, #0
 80026d4:	f04f 0100 	mov.w	r1, #0
 80026d8:	0299      	lsls	r1, r3, #10
 80026da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026de:	0290      	lsls	r0, r2, #10
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	f7fd fdbe 	bl	8000270 <__aeabi_uldivmod>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4613      	mov	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_RCC_GetSysClockFreq+0x160>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	3301      	adds	r3, #1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	60bb      	str	r3, [r7, #8]
      break;
 8002716:	e002      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <HAL_RCC_GetSysClockFreq+0x164>)
 800271a:	60bb      	str	r3, [r7, #8]
      break;
 800271c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800271e:	68bb      	ldr	r3, [r7, #8]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bdb0      	pop	{r4, r5, r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	00f42400 	.word	0x00f42400
 8002730:	017d7840 	.word	0x017d7840

08002734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_RCC_GetHCLKFreq+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000000 	.word	0x20000000

0800274c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002750:	f7ff fff0 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 8002754:	4602      	mov	r2, r0
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	0a9b      	lsrs	r3, r3, #10
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	4903      	ldr	r1, [pc, #12]	; (8002770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40023800 	.word	0x40023800
 8002770:	08004148 	.word	0x08004148

08002774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002778:	f7ff ffdc 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0b5b      	lsrs	r3, r3, #13
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	4903      	ldr	r1, [pc, #12]	; (8002798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	08004148 	.word	0x08004148

0800279c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e03f      	b.n	800282e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe fa0a 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2224      	movs	r2, #36	; 0x24
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f9cb 	bl	8002b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002804:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002814:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b08a      	sub	sp, #40	; 0x28
 800283a:	af02      	add	r7, sp, #8
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b20      	cmp	r3, #32
 8002854:	d17c      	bne.n	8002950 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_UART_Transmit+0x2c>
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e075      	b.n	8002952 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_UART_Transmit+0x3e>
 8002870:	2302      	movs	r3, #2
 8002872:	e06e      	b.n	8002952 <HAL_UART_Transmit+0x11c>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2221      	movs	r2, #33	; 0x21
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800288a:	f7fe fc25 	bl	80010d8 <HAL_GetTick>
 800288e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	88fa      	ldrh	r2, [r7, #6]
 800289a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a4:	d108      	bne.n	80028b8 <HAL_UART_Transmit+0x82>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d104      	bne.n	80028b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	e003      	b.n	80028c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028c8:	e02a      	b.n	8002920 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2180      	movs	r1, #128	; 0x80
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f8e2 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e036      	b.n	8002952 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10b      	bne.n	8002902 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	3302      	adds	r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	e007      	b.n	8002912 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	3301      	adds	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1cf      	bne.n	80028ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	2140      	movs	r1, #64	; 0x40
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f8b2 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e006      	b.n	8002952 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	e000      	b.n	8002952 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
  }
}
 8002952:	4618      	mov	r0, r3
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b08a      	sub	sp, #40	; 0x28
 800295e:	af02      	add	r7, sp, #8
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b20      	cmp	r3, #32
 8002978:	f040 808c 	bne.w	8002a94 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_UART_Receive+0x2e>
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e084      	b.n	8002a96 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_UART_Receive+0x40>
 8002996:	2302      	movs	r3, #2
 8002998:	e07d      	b.n	8002a96 <HAL_UART_Receive+0x13c>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2222      	movs	r2, #34	; 0x22
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029b6:	f7fe fb8f 	bl	80010d8 <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	88fa      	ldrh	r2, [r7, #6]
 80029c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	88fa      	ldrh	r2, [r7, #6]
 80029c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d0:	d108      	bne.n	80029e4 <HAL_UART_Receive+0x8a>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d104      	bne.n	80029e4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	e003      	b.n	80029ec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80029f4:	e043      	b.n	8002a7e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2200      	movs	r2, #0
 80029fe:	2120      	movs	r1, #32
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f84c 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e042      	b.n	8002a96 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	e01f      	b.n	8002a70 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a38:	d007      	beq.n	8002a4a <HAL_UART_Receive+0xf0>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <HAL_UART_Receive+0xfe>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e008      	b.n	8002a6a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1b6      	bne.n	80029f6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b090      	sub	sp, #64	; 0x40
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aae:	e050      	b.n	8002b52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab6:	d04c      	beq.n	8002b52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <UART_WaitOnFlagUntilTimeout+0x30>
 8002abe:	f7fe fb0b 	bl	80010d8 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d241      	bcs.n	8002b52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aee:	637a      	str	r2, [r7, #52]	; 0x34
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e5      	bne.n	8002ace <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3314      	adds	r3, #20
 8002b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	e853 3f00 	ldrex	r3, [r3]
 8002b10:	613b      	str	r3, [r7, #16]
   return(result);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3314      	adds	r3, #20
 8002b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b22:	623a      	str	r2, [r7, #32]
 8002b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b26:	69f9      	ldr	r1, [r7, #28]
 8002b28:	6a3a      	ldr	r2, [r7, #32]
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1e5      	bne.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e00f      	b.n	8002b72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	bf0c      	ite	eq
 8002b62:	2301      	moveq	r3, #1
 8002b64:	2300      	movne	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d09f      	beq.n	8002ab0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3740      	adds	r7, #64	; 0x40
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b80:	b09f      	sub	sp, #124	; 0x7c
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b92:	68d9      	ldr	r1, [r3, #12]
 8002b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	ea40 0301 	orr.w	r3, r0, r1
 8002b9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bc0:	f021 010c 	bic.w	r1, r1, #12
 8002bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bda:	6999      	ldr	r1, [r3, #24]
 8002bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	ea40 0301 	orr.w	r3, r0, r1
 8002be4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4bc5      	ldr	r3, [pc, #788]	; (8002f00 <UART_SetConfig+0x384>)
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d004      	beq.n	8002bfa <UART_SetConfig+0x7e>
 8002bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4bc3      	ldr	r3, [pc, #780]	; (8002f04 <UART_SetConfig+0x388>)
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d103      	bne.n	8002c02 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bfa:	f7ff fdbb 	bl	8002774 <HAL_RCC_GetPCLK2Freq>
 8002bfe:	6778      	str	r0, [r7, #116]	; 0x74
 8002c00:	e002      	b.n	8002c08 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c02:	f7ff fda3 	bl	800274c <HAL_RCC_GetPCLK1Freq>
 8002c06:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c10:	f040 80b6 	bne.w	8002d80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c16:	461c      	mov	r4, r3
 8002c18:	f04f 0500 	mov.w	r5, #0
 8002c1c:	4622      	mov	r2, r4
 8002c1e:	462b      	mov	r3, r5
 8002c20:	1891      	adds	r1, r2, r2
 8002c22:	6439      	str	r1, [r7, #64]	; 0x40
 8002c24:	415b      	adcs	r3, r3
 8002c26:	647b      	str	r3, [r7, #68]	; 0x44
 8002c28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c2c:	1912      	adds	r2, r2, r4
 8002c2e:	eb45 0303 	adc.w	r3, r5, r3
 8002c32:	f04f 0000 	mov.w	r0, #0
 8002c36:	f04f 0100 	mov.w	r1, #0
 8002c3a:	00d9      	lsls	r1, r3, #3
 8002c3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c40:	00d0      	lsls	r0, r2, #3
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	1911      	adds	r1, r2, r4
 8002c48:	6639      	str	r1, [r7, #96]	; 0x60
 8002c4a:	416b      	adcs	r3, r5
 8002c4c:	667b      	str	r3, [r7, #100]	; 0x64
 8002c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	461a      	mov	r2, r3
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	1891      	adds	r1, r2, r2
 8002c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c5c:	415b      	adcs	r3, r3
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c68:	f7fd fb02 	bl	8000270 <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4ba5      	ldr	r3, [pc, #660]	; (8002f08 <UART_SetConfig+0x38c>)
 8002c72:	fba3 2302 	umull	r2, r3, r3, r2
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	011e      	lsls	r6, r3, #4
 8002c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c7c:	461c      	mov	r4, r3
 8002c7e:	f04f 0500 	mov.w	r5, #0
 8002c82:	4622      	mov	r2, r4
 8002c84:	462b      	mov	r3, r5
 8002c86:	1891      	adds	r1, r2, r2
 8002c88:	6339      	str	r1, [r7, #48]	; 0x30
 8002c8a:	415b      	adcs	r3, r3
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c92:	1912      	adds	r2, r2, r4
 8002c94:	eb45 0303 	adc.w	r3, r5, r3
 8002c98:	f04f 0000 	mov.w	r0, #0
 8002c9c:	f04f 0100 	mov.w	r1, #0
 8002ca0:	00d9      	lsls	r1, r3, #3
 8002ca2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ca6:	00d0      	lsls	r0, r2, #3
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	1911      	adds	r1, r2, r4
 8002cae:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cb0:	416b      	adcs	r3, r5
 8002cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	1891      	adds	r1, r2, r2
 8002cc0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cc2:	415b      	adcs	r3, r3
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002cce:	f7fd facf 	bl	8000270 <__aeabi_uldivmod>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4b8c      	ldr	r3, [pc, #560]	; (8002f08 <UART_SetConfig+0x38c>)
 8002cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	2164      	movs	r1, #100	; 0x64
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	3332      	adds	r3, #50	; 0x32
 8002cea:	4a87      	ldr	r2, [pc, #540]	; (8002f08 <UART_SetConfig+0x38c>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cf8:	441e      	add	r6, r3
 8002cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	1894      	adds	r4, r2, r2
 8002d08:	623c      	str	r4, [r7, #32]
 8002d0a:	415b      	adcs	r3, r3
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d12:	1812      	adds	r2, r2, r0
 8002d14:	eb41 0303 	adc.w	r3, r1, r3
 8002d18:	f04f 0400 	mov.w	r4, #0
 8002d1c:	f04f 0500 	mov.w	r5, #0
 8002d20:	00dd      	lsls	r5, r3, #3
 8002d22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d26:	00d4      	lsls	r4, r2, #3
 8002d28:	4622      	mov	r2, r4
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	1814      	adds	r4, r2, r0
 8002d2e:	653c      	str	r4, [r7, #80]	; 0x50
 8002d30:	414b      	adcs	r3, r1
 8002d32:	657b      	str	r3, [r7, #84]	; 0x54
 8002d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	1891      	adds	r1, r2, r2
 8002d40:	61b9      	str	r1, [r7, #24]
 8002d42:	415b      	adcs	r3, r3
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d4e:	f7fd fa8f 	bl	8000270 <__aeabi_uldivmod>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4b6c      	ldr	r3, [pc, #432]	; (8002f08 <UART_SetConfig+0x38c>)
 8002d58:	fba3 1302 	umull	r1, r3, r3, r2
 8002d5c:	095b      	lsrs	r3, r3, #5
 8002d5e:	2164      	movs	r1, #100	; 0x64
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	3332      	adds	r3, #50	; 0x32
 8002d6a:	4a67      	ldr	r2, [pc, #412]	; (8002f08 <UART_SetConfig+0x38c>)
 8002d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	f003 0207 	and.w	r2, r3, #7
 8002d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4432      	add	r2, r6
 8002d7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d7e:	e0b9      	b.n	8002ef4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d82:	461c      	mov	r4, r3
 8002d84:	f04f 0500 	mov.w	r5, #0
 8002d88:	4622      	mov	r2, r4
 8002d8a:	462b      	mov	r3, r5
 8002d8c:	1891      	adds	r1, r2, r2
 8002d8e:	6139      	str	r1, [r7, #16]
 8002d90:	415b      	adcs	r3, r3
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d98:	1912      	adds	r2, r2, r4
 8002d9a:	eb45 0303 	adc.w	r3, r5, r3
 8002d9e:	f04f 0000 	mov.w	r0, #0
 8002da2:	f04f 0100 	mov.w	r1, #0
 8002da6:	00d9      	lsls	r1, r3, #3
 8002da8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dac:	00d0      	lsls	r0, r2, #3
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	eb12 0804 	adds.w	r8, r2, r4
 8002db6:	eb43 0905 	adc.w	r9, r3, r5
 8002dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	008b      	lsls	r3, r1, #2
 8002dce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002dd2:	0082      	lsls	r2, r0, #2
 8002dd4:	4640      	mov	r0, r8
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	f7fd fa4a 	bl	8000270 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <UART_SetConfig+0x38c>)
 8002de2:	fba3 2302 	umull	r2, r3, r3, r2
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	011e      	lsls	r6, r3, #4
 8002dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dec:	4618      	mov	r0, r3
 8002dee:	f04f 0100 	mov.w	r1, #0
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	1894      	adds	r4, r2, r2
 8002df8:	60bc      	str	r4, [r7, #8]
 8002dfa:	415b      	adcs	r3, r3
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e02:	1812      	adds	r2, r2, r0
 8002e04:	eb41 0303 	adc.w	r3, r1, r3
 8002e08:	f04f 0400 	mov.w	r4, #0
 8002e0c:	f04f 0500 	mov.w	r5, #0
 8002e10:	00dd      	lsls	r5, r3, #3
 8002e12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e16:	00d4      	lsls	r4, r2, #3
 8002e18:	4622      	mov	r2, r4
 8002e1a:	462b      	mov	r3, r5
 8002e1c:	1814      	adds	r4, r2, r0
 8002e1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002e20:	414b      	adcs	r3, r1
 8002e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f04f 0100 	mov.w	r1, #0
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	008b      	lsls	r3, r1, #2
 8002e38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e3c:	0082      	lsls	r2, r0, #2
 8002e3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e42:	f7fd fa15 	bl	8000270 <__aeabi_uldivmod>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <UART_SetConfig+0x38c>)
 8002e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	2164      	movs	r1, #100	; 0x64
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	3332      	adds	r3, #50	; 0x32
 8002e5e:	4a2a      	ldr	r2, [pc, #168]	; (8002f08 <UART_SetConfig+0x38c>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e6a:	441e      	add	r6, r3
 8002e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f04f 0100 	mov.w	r1, #0
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	1894      	adds	r4, r2, r2
 8002e7a:	603c      	str	r4, [r7, #0]
 8002e7c:	415b      	adcs	r3, r3
 8002e7e:	607b      	str	r3, [r7, #4]
 8002e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e84:	1812      	adds	r2, r2, r0
 8002e86:	eb41 0303 	adc.w	r3, r1, r3
 8002e8a:	f04f 0400 	mov.w	r4, #0
 8002e8e:	f04f 0500 	mov.w	r5, #0
 8002e92:	00dd      	lsls	r5, r3, #3
 8002e94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e98:	00d4      	lsls	r4, r2, #3
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	eb12 0a00 	adds.w	sl, r2, r0
 8002ea2:	eb43 0b01 	adc.w	fp, r3, r1
 8002ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f04f 0100 	mov.w	r1, #0
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	008b      	lsls	r3, r1, #2
 8002eba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ebe:	0082      	lsls	r2, r0, #2
 8002ec0:	4650      	mov	r0, sl
 8002ec2:	4659      	mov	r1, fp
 8002ec4:	f7fd f9d4 	bl	8000270 <__aeabi_uldivmod>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <UART_SetConfig+0x38c>)
 8002ece:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2164      	movs	r1, #100	; 0x64
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	3332      	adds	r3, #50	; 0x32
 8002ee0:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <UART_SetConfig+0x38c>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	f003 020f 	and.w	r2, r3, #15
 8002eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4432      	add	r2, r6
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	377c      	adds	r7, #124	; 0x7c
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002efe:	bf00      	nop
 8002f00:	40011000 	.word	0x40011000
 8002f04:	40011400 	.word	0x40011400
 8002f08:	51eb851f 	.word	0x51eb851f

08002f0c <__errno>:
 8002f0c:	4b01      	ldr	r3, [pc, #4]	; (8002f14 <__errno+0x8>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	2000000c 	.word	0x2000000c

08002f18 <__libc_init_array>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	4d0d      	ldr	r5, [pc, #52]	; (8002f50 <__libc_init_array+0x38>)
 8002f1c:	4c0d      	ldr	r4, [pc, #52]	; (8002f54 <__libc_init_array+0x3c>)
 8002f1e:	1b64      	subs	r4, r4, r5
 8002f20:	10a4      	asrs	r4, r4, #2
 8002f22:	2600      	movs	r6, #0
 8002f24:	42a6      	cmp	r6, r4
 8002f26:	d109      	bne.n	8002f3c <__libc_init_array+0x24>
 8002f28:	4d0b      	ldr	r5, [pc, #44]	; (8002f58 <__libc_init_array+0x40>)
 8002f2a:	4c0c      	ldr	r4, [pc, #48]	; (8002f5c <__libc_init_array+0x44>)
 8002f2c:	f000 ffec 	bl	8003f08 <_init>
 8002f30:	1b64      	subs	r4, r4, r5
 8002f32:	10a4      	asrs	r4, r4, #2
 8002f34:	2600      	movs	r6, #0
 8002f36:	42a6      	cmp	r6, r4
 8002f38:	d105      	bne.n	8002f46 <__libc_init_array+0x2e>
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}
 8002f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f40:	4798      	blx	r3
 8002f42:	3601      	adds	r6, #1
 8002f44:	e7ee      	b.n	8002f24 <__libc_init_array+0xc>
 8002f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4a:	4798      	blx	r3
 8002f4c:	3601      	adds	r6, #1
 8002f4e:	e7f2      	b.n	8002f36 <__libc_init_array+0x1e>
 8002f50:	080041f0 	.word	0x080041f0
 8002f54:	080041f0 	.word	0x080041f0
 8002f58:	080041f0 	.word	0x080041f0
 8002f5c:	080041f4 	.word	0x080041f4

08002f60 <memset>:
 8002f60:	4402      	add	r2, r0
 8002f62:	4603      	mov	r3, r0
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d100      	bne.n	8002f6a <memset+0xa>
 8002f68:	4770      	bx	lr
 8002f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f6e:	e7f9      	b.n	8002f64 <memset+0x4>

08002f70 <iprintf>:
 8002f70:	b40f      	push	{r0, r1, r2, r3}
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <iprintf+0x2c>)
 8002f74:	b513      	push	{r0, r1, r4, lr}
 8002f76:	681c      	ldr	r4, [r3, #0]
 8002f78:	b124      	cbz	r4, 8002f84 <iprintf+0x14>
 8002f7a:	69a3      	ldr	r3, [r4, #24]
 8002f7c:	b913      	cbnz	r3, 8002f84 <iprintf+0x14>
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f000 fa5e 	bl	8003440 <__sinit>
 8002f84:	ab05      	add	r3, sp, #20
 8002f86:	9a04      	ldr	r2, [sp, #16]
 8002f88:	68a1      	ldr	r1, [r4, #8]
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f000 fc2f 	bl	80037f0 <_vfiprintf_r>
 8002f92:	b002      	add	sp, #8
 8002f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f98:	b004      	add	sp, #16
 8002f9a:	4770      	bx	lr
 8002f9c:	2000000c 	.word	0x2000000c

08002fa0 <_puts_r>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	460e      	mov	r6, r1
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	b118      	cbz	r0, 8002fb0 <_puts_r+0x10>
 8002fa8:	6983      	ldr	r3, [r0, #24]
 8002faa:	b90b      	cbnz	r3, 8002fb0 <_puts_r+0x10>
 8002fac:	f000 fa48 	bl	8003440 <__sinit>
 8002fb0:	69ab      	ldr	r3, [r5, #24]
 8002fb2:	68ac      	ldr	r4, [r5, #8]
 8002fb4:	b913      	cbnz	r3, 8002fbc <_puts_r+0x1c>
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f000 fa42 	bl	8003440 <__sinit>
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <_puts_r+0xd0>)
 8002fbe:	429c      	cmp	r4, r3
 8002fc0:	d120      	bne.n	8003004 <_puts_r+0x64>
 8002fc2:	686c      	ldr	r4, [r5, #4]
 8002fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fc6:	07db      	lsls	r3, r3, #31
 8002fc8:	d405      	bmi.n	8002fd6 <_puts_r+0x36>
 8002fca:	89a3      	ldrh	r3, [r4, #12]
 8002fcc:	0598      	lsls	r0, r3, #22
 8002fce:	d402      	bmi.n	8002fd6 <_puts_r+0x36>
 8002fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fd2:	f000 fad3 	bl	800357c <__retarget_lock_acquire_recursive>
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	0719      	lsls	r1, r3, #28
 8002fda:	d51d      	bpl.n	8003018 <_puts_r+0x78>
 8002fdc:	6923      	ldr	r3, [r4, #16]
 8002fde:	b1db      	cbz	r3, 8003018 <_puts_r+0x78>
 8002fe0:	3e01      	subs	r6, #1
 8002fe2:	68a3      	ldr	r3, [r4, #8]
 8002fe4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	60a3      	str	r3, [r4, #8]
 8002fec:	bb39      	cbnz	r1, 800303e <_puts_r+0x9e>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	da38      	bge.n	8003064 <_puts_r+0xc4>
 8002ff2:	4622      	mov	r2, r4
 8002ff4:	210a      	movs	r1, #10
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	f000 f848 	bl	800308c <__swbuf_r>
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d011      	beq.n	8003024 <_puts_r+0x84>
 8003000:	250a      	movs	r5, #10
 8003002:	e011      	b.n	8003028 <_puts_r+0x88>
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <_puts_r+0xd4>)
 8003006:	429c      	cmp	r4, r3
 8003008:	d101      	bne.n	800300e <_puts_r+0x6e>
 800300a:	68ac      	ldr	r4, [r5, #8]
 800300c:	e7da      	b.n	8002fc4 <_puts_r+0x24>
 800300e:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <_puts_r+0xd8>)
 8003010:	429c      	cmp	r4, r3
 8003012:	bf08      	it	eq
 8003014:	68ec      	ldreq	r4, [r5, #12]
 8003016:	e7d5      	b.n	8002fc4 <_puts_r+0x24>
 8003018:	4621      	mov	r1, r4
 800301a:	4628      	mov	r0, r5
 800301c:	f000 f888 	bl	8003130 <__swsetup_r>
 8003020:	2800      	cmp	r0, #0
 8003022:	d0dd      	beq.n	8002fe0 <_puts_r+0x40>
 8003024:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003028:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800302a:	07da      	lsls	r2, r3, #31
 800302c:	d405      	bmi.n	800303a <_puts_r+0x9a>
 800302e:	89a3      	ldrh	r3, [r4, #12]
 8003030:	059b      	lsls	r3, r3, #22
 8003032:	d402      	bmi.n	800303a <_puts_r+0x9a>
 8003034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003036:	f000 faa2 	bl	800357e <__retarget_lock_release_recursive>
 800303a:	4628      	mov	r0, r5
 800303c:	bd70      	pop	{r4, r5, r6, pc}
 800303e:	2b00      	cmp	r3, #0
 8003040:	da04      	bge.n	800304c <_puts_r+0xac>
 8003042:	69a2      	ldr	r2, [r4, #24]
 8003044:	429a      	cmp	r2, r3
 8003046:	dc06      	bgt.n	8003056 <_puts_r+0xb6>
 8003048:	290a      	cmp	r1, #10
 800304a:	d004      	beq.n	8003056 <_puts_r+0xb6>
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	6022      	str	r2, [r4, #0]
 8003052:	7019      	strb	r1, [r3, #0]
 8003054:	e7c5      	b.n	8002fe2 <_puts_r+0x42>
 8003056:	4622      	mov	r2, r4
 8003058:	4628      	mov	r0, r5
 800305a:	f000 f817 	bl	800308c <__swbuf_r>
 800305e:	3001      	adds	r0, #1
 8003060:	d1bf      	bne.n	8002fe2 <_puts_r+0x42>
 8003062:	e7df      	b.n	8003024 <_puts_r+0x84>
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	250a      	movs	r5, #10
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	6022      	str	r2, [r4, #0]
 800306c:	701d      	strb	r5, [r3, #0]
 800306e:	e7db      	b.n	8003028 <_puts_r+0x88>
 8003070:	08004174 	.word	0x08004174
 8003074:	08004194 	.word	0x08004194
 8003078:	08004154 	.word	0x08004154

0800307c <puts>:
 800307c:	4b02      	ldr	r3, [pc, #8]	; (8003088 <puts+0xc>)
 800307e:	4601      	mov	r1, r0
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	f7ff bf8d 	b.w	8002fa0 <_puts_r>
 8003086:	bf00      	nop
 8003088:	2000000c 	.word	0x2000000c

0800308c <__swbuf_r>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	460e      	mov	r6, r1
 8003090:	4614      	mov	r4, r2
 8003092:	4605      	mov	r5, r0
 8003094:	b118      	cbz	r0, 800309e <__swbuf_r+0x12>
 8003096:	6983      	ldr	r3, [r0, #24]
 8003098:	b90b      	cbnz	r3, 800309e <__swbuf_r+0x12>
 800309a:	f000 f9d1 	bl	8003440 <__sinit>
 800309e:	4b21      	ldr	r3, [pc, #132]	; (8003124 <__swbuf_r+0x98>)
 80030a0:	429c      	cmp	r4, r3
 80030a2:	d12b      	bne.n	80030fc <__swbuf_r+0x70>
 80030a4:	686c      	ldr	r4, [r5, #4]
 80030a6:	69a3      	ldr	r3, [r4, #24]
 80030a8:	60a3      	str	r3, [r4, #8]
 80030aa:	89a3      	ldrh	r3, [r4, #12]
 80030ac:	071a      	lsls	r2, r3, #28
 80030ae:	d52f      	bpl.n	8003110 <__swbuf_r+0x84>
 80030b0:	6923      	ldr	r3, [r4, #16]
 80030b2:	b36b      	cbz	r3, 8003110 <__swbuf_r+0x84>
 80030b4:	6923      	ldr	r3, [r4, #16]
 80030b6:	6820      	ldr	r0, [r4, #0]
 80030b8:	1ac0      	subs	r0, r0, r3
 80030ba:	6963      	ldr	r3, [r4, #20]
 80030bc:	b2f6      	uxtb	r6, r6
 80030be:	4283      	cmp	r3, r0
 80030c0:	4637      	mov	r7, r6
 80030c2:	dc04      	bgt.n	80030ce <__swbuf_r+0x42>
 80030c4:	4621      	mov	r1, r4
 80030c6:	4628      	mov	r0, r5
 80030c8:	f000 f926 	bl	8003318 <_fflush_r>
 80030cc:	bb30      	cbnz	r0, 800311c <__swbuf_r+0x90>
 80030ce:	68a3      	ldr	r3, [r4, #8]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	60a3      	str	r3, [r4, #8]
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	6022      	str	r2, [r4, #0]
 80030da:	701e      	strb	r6, [r3, #0]
 80030dc:	6963      	ldr	r3, [r4, #20]
 80030de:	3001      	adds	r0, #1
 80030e0:	4283      	cmp	r3, r0
 80030e2:	d004      	beq.n	80030ee <__swbuf_r+0x62>
 80030e4:	89a3      	ldrh	r3, [r4, #12]
 80030e6:	07db      	lsls	r3, r3, #31
 80030e8:	d506      	bpl.n	80030f8 <__swbuf_r+0x6c>
 80030ea:	2e0a      	cmp	r6, #10
 80030ec:	d104      	bne.n	80030f8 <__swbuf_r+0x6c>
 80030ee:	4621      	mov	r1, r4
 80030f0:	4628      	mov	r0, r5
 80030f2:	f000 f911 	bl	8003318 <_fflush_r>
 80030f6:	b988      	cbnz	r0, 800311c <__swbuf_r+0x90>
 80030f8:	4638      	mov	r0, r7
 80030fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <__swbuf_r+0x9c>)
 80030fe:	429c      	cmp	r4, r3
 8003100:	d101      	bne.n	8003106 <__swbuf_r+0x7a>
 8003102:	68ac      	ldr	r4, [r5, #8]
 8003104:	e7cf      	b.n	80030a6 <__swbuf_r+0x1a>
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <__swbuf_r+0xa0>)
 8003108:	429c      	cmp	r4, r3
 800310a:	bf08      	it	eq
 800310c:	68ec      	ldreq	r4, [r5, #12]
 800310e:	e7ca      	b.n	80030a6 <__swbuf_r+0x1a>
 8003110:	4621      	mov	r1, r4
 8003112:	4628      	mov	r0, r5
 8003114:	f000 f80c 	bl	8003130 <__swsetup_r>
 8003118:	2800      	cmp	r0, #0
 800311a:	d0cb      	beq.n	80030b4 <__swbuf_r+0x28>
 800311c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003120:	e7ea      	b.n	80030f8 <__swbuf_r+0x6c>
 8003122:	bf00      	nop
 8003124:	08004174 	.word	0x08004174
 8003128:	08004194 	.word	0x08004194
 800312c:	08004154 	.word	0x08004154

08003130 <__swsetup_r>:
 8003130:	4b32      	ldr	r3, [pc, #200]	; (80031fc <__swsetup_r+0xcc>)
 8003132:	b570      	push	{r4, r5, r6, lr}
 8003134:	681d      	ldr	r5, [r3, #0]
 8003136:	4606      	mov	r6, r0
 8003138:	460c      	mov	r4, r1
 800313a:	b125      	cbz	r5, 8003146 <__swsetup_r+0x16>
 800313c:	69ab      	ldr	r3, [r5, #24]
 800313e:	b913      	cbnz	r3, 8003146 <__swsetup_r+0x16>
 8003140:	4628      	mov	r0, r5
 8003142:	f000 f97d 	bl	8003440 <__sinit>
 8003146:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <__swsetup_r+0xd0>)
 8003148:	429c      	cmp	r4, r3
 800314a:	d10f      	bne.n	800316c <__swsetup_r+0x3c>
 800314c:	686c      	ldr	r4, [r5, #4]
 800314e:	89a3      	ldrh	r3, [r4, #12]
 8003150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003154:	0719      	lsls	r1, r3, #28
 8003156:	d42c      	bmi.n	80031b2 <__swsetup_r+0x82>
 8003158:	06dd      	lsls	r5, r3, #27
 800315a:	d411      	bmi.n	8003180 <__swsetup_r+0x50>
 800315c:	2309      	movs	r3, #9
 800315e:	6033      	str	r3, [r6, #0]
 8003160:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003164:	81a3      	strh	r3, [r4, #12]
 8003166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800316a:	e03e      	b.n	80031ea <__swsetup_r+0xba>
 800316c:	4b25      	ldr	r3, [pc, #148]	; (8003204 <__swsetup_r+0xd4>)
 800316e:	429c      	cmp	r4, r3
 8003170:	d101      	bne.n	8003176 <__swsetup_r+0x46>
 8003172:	68ac      	ldr	r4, [r5, #8]
 8003174:	e7eb      	b.n	800314e <__swsetup_r+0x1e>
 8003176:	4b24      	ldr	r3, [pc, #144]	; (8003208 <__swsetup_r+0xd8>)
 8003178:	429c      	cmp	r4, r3
 800317a:	bf08      	it	eq
 800317c:	68ec      	ldreq	r4, [r5, #12]
 800317e:	e7e6      	b.n	800314e <__swsetup_r+0x1e>
 8003180:	0758      	lsls	r0, r3, #29
 8003182:	d512      	bpl.n	80031aa <__swsetup_r+0x7a>
 8003184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003186:	b141      	cbz	r1, 800319a <__swsetup_r+0x6a>
 8003188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800318c:	4299      	cmp	r1, r3
 800318e:	d002      	beq.n	8003196 <__swsetup_r+0x66>
 8003190:	4630      	mov	r0, r6
 8003192:	f000 fa59 	bl	8003648 <_free_r>
 8003196:	2300      	movs	r3, #0
 8003198:	6363      	str	r3, [r4, #52]	; 0x34
 800319a:	89a3      	ldrh	r3, [r4, #12]
 800319c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031a0:	81a3      	strh	r3, [r4, #12]
 80031a2:	2300      	movs	r3, #0
 80031a4:	6063      	str	r3, [r4, #4]
 80031a6:	6923      	ldr	r3, [r4, #16]
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	f043 0308 	orr.w	r3, r3, #8
 80031b0:	81a3      	strh	r3, [r4, #12]
 80031b2:	6923      	ldr	r3, [r4, #16]
 80031b4:	b94b      	cbnz	r3, 80031ca <__swsetup_r+0x9a>
 80031b6:	89a3      	ldrh	r3, [r4, #12]
 80031b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c0:	d003      	beq.n	80031ca <__swsetup_r+0x9a>
 80031c2:	4621      	mov	r1, r4
 80031c4:	4630      	mov	r0, r6
 80031c6:	f000 f9ff 	bl	80035c8 <__smakebuf_r>
 80031ca:	89a0      	ldrh	r0, [r4, #12]
 80031cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031d0:	f010 0301 	ands.w	r3, r0, #1
 80031d4:	d00a      	beq.n	80031ec <__swsetup_r+0xbc>
 80031d6:	2300      	movs	r3, #0
 80031d8:	60a3      	str	r3, [r4, #8]
 80031da:	6963      	ldr	r3, [r4, #20]
 80031dc:	425b      	negs	r3, r3
 80031de:	61a3      	str	r3, [r4, #24]
 80031e0:	6923      	ldr	r3, [r4, #16]
 80031e2:	b943      	cbnz	r3, 80031f6 <__swsetup_r+0xc6>
 80031e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031e8:	d1ba      	bne.n	8003160 <__swsetup_r+0x30>
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
 80031ec:	0781      	lsls	r1, r0, #30
 80031ee:	bf58      	it	pl
 80031f0:	6963      	ldrpl	r3, [r4, #20]
 80031f2:	60a3      	str	r3, [r4, #8]
 80031f4:	e7f4      	b.n	80031e0 <__swsetup_r+0xb0>
 80031f6:	2000      	movs	r0, #0
 80031f8:	e7f7      	b.n	80031ea <__swsetup_r+0xba>
 80031fa:	bf00      	nop
 80031fc:	2000000c 	.word	0x2000000c
 8003200:	08004174 	.word	0x08004174
 8003204:	08004194 	.word	0x08004194
 8003208:	08004154 	.word	0x08004154

0800320c <__sflush_r>:
 800320c:	898a      	ldrh	r2, [r1, #12]
 800320e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003212:	4605      	mov	r5, r0
 8003214:	0710      	lsls	r0, r2, #28
 8003216:	460c      	mov	r4, r1
 8003218:	d458      	bmi.n	80032cc <__sflush_r+0xc0>
 800321a:	684b      	ldr	r3, [r1, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	dc05      	bgt.n	800322c <__sflush_r+0x20>
 8003220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	dc02      	bgt.n	800322c <__sflush_r+0x20>
 8003226:	2000      	movs	r0, #0
 8003228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800322c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800322e:	2e00      	cmp	r6, #0
 8003230:	d0f9      	beq.n	8003226 <__sflush_r+0x1a>
 8003232:	2300      	movs	r3, #0
 8003234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003238:	682f      	ldr	r7, [r5, #0]
 800323a:	602b      	str	r3, [r5, #0]
 800323c:	d032      	beq.n	80032a4 <__sflush_r+0x98>
 800323e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003240:	89a3      	ldrh	r3, [r4, #12]
 8003242:	075a      	lsls	r2, r3, #29
 8003244:	d505      	bpl.n	8003252 <__sflush_r+0x46>
 8003246:	6863      	ldr	r3, [r4, #4]
 8003248:	1ac0      	subs	r0, r0, r3
 800324a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800324c:	b10b      	cbz	r3, 8003252 <__sflush_r+0x46>
 800324e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003250:	1ac0      	subs	r0, r0, r3
 8003252:	2300      	movs	r3, #0
 8003254:	4602      	mov	r2, r0
 8003256:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003258:	6a21      	ldr	r1, [r4, #32]
 800325a:	4628      	mov	r0, r5
 800325c:	47b0      	blx	r6
 800325e:	1c43      	adds	r3, r0, #1
 8003260:	89a3      	ldrh	r3, [r4, #12]
 8003262:	d106      	bne.n	8003272 <__sflush_r+0x66>
 8003264:	6829      	ldr	r1, [r5, #0]
 8003266:	291d      	cmp	r1, #29
 8003268:	d82c      	bhi.n	80032c4 <__sflush_r+0xb8>
 800326a:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <__sflush_r+0x108>)
 800326c:	40ca      	lsrs	r2, r1
 800326e:	07d6      	lsls	r6, r2, #31
 8003270:	d528      	bpl.n	80032c4 <__sflush_r+0xb8>
 8003272:	2200      	movs	r2, #0
 8003274:	6062      	str	r2, [r4, #4]
 8003276:	04d9      	lsls	r1, r3, #19
 8003278:	6922      	ldr	r2, [r4, #16]
 800327a:	6022      	str	r2, [r4, #0]
 800327c:	d504      	bpl.n	8003288 <__sflush_r+0x7c>
 800327e:	1c42      	adds	r2, r0, #1
 8003280:	d101      	bne.n	8003286 <__sflush_r+0x7a>
 8003282:	682b      	ldr	r3, [r5, #0]
 8003284:	b903      	cbnz	r3, 8003288 <__sflush_r+0x7c>
 8003286:	6560      	str	r0, [r4, #84]	; 0x54
 8003288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800328a:	602f      	str	r7, [r5, #0]
 800328c:	2900      	cmp	r1, #0
 800328e:	d0ca      	beq.n	8003226 <__sflush_r+0x1a>
 8003290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003294:	4299      	cmp	r1, r3
 8003296:	d002      	beq.n	800329e <__sflush_r+0x92>
 8003298:	4628      	mov	r0, r5
 800329a:	f000 f9d5 	bl	8003648 <_free_r>
 800329e:	2000      	movs	r0, #0
 80032a0:	6360      	str	r0, [r4, #52]	; 0x34
 80032a2:	e7c1      	b.n	8003228 <__sflush_r+0x1c>
 80032a4:	6a21      	ldr	r1, [r4, #32]
 80032a6:	2301      	movs	r3, #1
 80032a8:	4628      	mov	r0, r5
 80032aa:	47b0      	blx	r6
 80032ac:	1c41      	adds	r1, r0, #1
 80032ae:	d1c7      	bne.n	8003240 <__sflush_r+0x34>
 80032b0:	682b      	ldr	r3, [r5, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0c4      	beq.n	8003240 <__sflush_r+0x34>
 80032b6:	2b1d      	cmp	r3, #29
 80032b8:	d001      	beq.n	80032be <__sflush_r+0xb2>
 80032ba:	2b16      	cmp	r3, #22
 80032bc:	d101      	bne.n	80032c2 <__sflush_r+0xb6>
 80032be:	602f      	str	r7, [r5, #0]
 80032c0:	e7b1      	b.n	8003226 <__sflush_r+0x1a>
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032c8:	81a3      	strh	r3, [r4, #12]
 80032ca:	e7ad      	b.n	8003228 <__sflush_r+0x1c>
 80032cc:	690f      	ldr	r7, [r1, #16]
 80032ce:	2f00      	cmp	r7, #0
 80032d0:	d0a9      	beq.n	8003226 <__sflush_r+0x1a>
 80032d2:	0793      	lsls	r3, r2, #30
 80032d4:	680e      	ldr	r6, [r1, #0]
 80032d6:	bf08      	it	eq
 80032d8:	694b      	ldreq	r3, [r1, #20]
 80032da:	600f      	str	r7, [r1, #0]
 80032dc:	bf18      	it	ne
 80032de:	2300      	movne	r3, #0
 80032e0:	eba6 0807 	sub.w	r8, r6, r7
 80032e4:	608b      	str	r3, [r1, #8]
 80032e6:	f1b8 0f00 	cmp.w	r8, #0
 80032ea:	dd9c      	ble.n	8003226 <__sflush_r+0x1a>
 80032ec:	6a21      	ldr	r1, [r4, #32]
 80032ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032f0:	4643      	mov	r3, r8
 80032f2:	463a      	mov	r2, r7
 80032f4:	4628      	mov	r0, r5
 80032f6:	47b0      	blx	r6
 80032f8:	2800      	cmp	r0, #0
 80032fa:	dc06      	bgt.n	800330a <__sflush_r+0xfe>
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003302:	81a3      	strh	r3, [r4, #12]
 8003304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003308:	e78e      	b.n	8003228 <__sflush_r+0x1c>
 800330a:	4407      	add	r7, r0
 800330c:	eba8 0800 	sub.w	r8, r8, r0
 8003310:	e7e9      	b.n	80032e6 <__sflush_r+0xda>
 8003312:	bf00      	nop
 8003314:	20400001 	.word	0x20400001

08003318 <_fflush_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	690b      	ldr	r3, [r1, #16]
 800331c:	4605      	mov	r5, r0
 800331e:	460c      	mov	r4, r1
 8003320:	b913      	cbnz	r3, 8003328 <_fflush_r+0x10>
 8003322:	2500      	movs	r5, #0
 8003324:	4628      	mov	r0, r5
 8003326:	bd38      	pop	{r3, r4, r5, pc}
 8003328:	b118      	cbz	r0, 8003332 <_fflush_r+0x1a>
 800332a:	6983      	ldr	r3, [r0, #24]
 800332c:	b90b      	cbnz	r3, 8003332 <_fflush_r+0x1a>
 800332e:	f000 f887 	bl	8003440 <__sinit>
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <_fflush_r+0x6c>)
 8003334:	429c      	cmp	r4, r3
 8003336:	d11b      	bne.n	8003370 <_fflush_r+0x58>
 8003338:	686c      	ldr	r4, [r5, #4]
 800333a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0ef      	beq.n	8003322 <_fflush_r+0xa>
 8003342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003344:	07d0      	lsls	r0, r2, #31
 8003346:	d404      	bmi.n	8003352 <_fflush_r+0x3a>
 8003348:	0599      	lsls	r1, r3, #22
 800334a:	d402      	bmi.n	8003352 <_fflush_r+0x3a>
 800334c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800334e:	f000 f915 	bl	800357c <__retarget_lock_acquire_recursive>
 8003352:	4628      	mov	r0, r5
 8003354:	4621      	mov	r1, r4
 8003356:	f7ff ff59 	bl	800320c <__sflush_r>
 800335a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800335c:	07da      	lsls	r2, r3, #31
 800335e:	4605      	mov	r5, r0
 8003360:	d4e0      	bmi.n	8003324 <_fflush_r+0xc>
 8003362:	89a3      	ldrh	r3, [r4, #12]
 8003364:	059b      	lsls	r3, r3, #22
 8003366:	d4dd      	bmi.n	8003324 <_fflush_r+0xc>
 8003368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800336a:	f000 f908 	bl	800357e <__retarget_lock_release_recursive>
 800336e:	e7d9      	b.n	8003324 <_fflush_r+0xc>
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <_fflush_r+0x70>)
 8003372:	429c      	cmp	r4, r3
 8003374:	d101      	bne.n	800337a <_fflush_r+0x62>
 8003376:	68ac      	ldr	r4, [r5, #8]
 8003378:	e7df      	b.n	800333a <_fflush_r+0x22>
 800337a:	4b04      	ldr	r3, [pc, #16]	; (800338c <_fflush_r+0x74>)
 800337c:	429c      	cmp	r4, r3
 800337e:	bf08      	it	eq
 8003380:	68ec      	ldreq	r4, [r5, #12]
 8003382:	e7da      	b.n	800333a <_fflush_r+0x22>
 8003384:	08004174 	.word	0x08004174
 8003388:	08004194 	.word	0x08004194
 800338c:	08004154 	.word	0x08004154

08003390 <std>:
 8003390:	2300      	movs	r3, #0
 8003392:	b510      	push	{r4, lr}
 8003394:	4604      	mov	r4, r0
 8003396:	e9c0 3300 	strd	r3, r3, [r0]
 800339a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800339e:	6083      	str	r3, [r0, #8]
 80033a0:	8181      	strh	r1, [r0, #12]
 80033a2:	6643      	str	r3, [r0, #100]	; 0x64
 80033a4:	81c2      	strh	r2, [r0, #14]
 80033a6:	6183      	str	r3, [r0, #24]
 80033a8:	4619      	mov	r1, r3
 80033aa:	2208      	movs	r2, #8
 80033ac:	305c      	adds	r0, #92	; 0x5c
 80033ae:	f7ff fdd7 	bl	8002f60 <memset>
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <std+0x38>)
 80033b4:	6263      	str	r3, [r4, #36]	; 0x24
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <std+0x3c>)
 80033b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <std+0x40>)
 80033bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <std+0x44>)
 80033c0:	6224      	str	r4, [r4, #32]
 80033c2:	6323      	str	r3, [r4, #48]	; 0x30
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	bf00      	nop
 80033c8:	08003d99 	.word	0x08003d99
 80033cc:	08003dbb 	.word	0x08003dbb
 80033d0:	08003df3 	.word	0x08003df3
 80033d4:	08003e17 	.word	0x08003e17

080033d8 <_cleanup_r>:
 80033d8:	4901      	ldr	r1, [pc, #4]	; (80033e0 <_cleanup_r+0x8>)
 80033da:	f000 b8af 	b.w	800353c <_fwalk_reent>
 80033de:	bf00      	nop
 80033e0:	08003319 	.word	0x08003319

080033e4 <__sfmoreglue>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	1e4a      	subs	r2, r1, #1
 80033e8:	2568      	movs	r5, #104	; 0x68
 80033ea:	4355      	muls	r5, r2
 80033ec:	460e      	mov	r6, r1
 80033ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033f2:	f000 f979 	bl	80036e8 <_malloc_r>
 80033f6:	4604      	mov	r4, r0
 80033f8:	b140      	cbz	r0, 800340c <__sfmoreglue+0x28>
 80033fa:	2100      	movs	r1, #0
 80033fc:	e9c0 1600 	strd	r1, r6, [r0]
 8003400:	300c      	adds	r0, #12
 8003402:	60a0      	str	r0, [r4, #8]
 8003404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003408:	f7ff fdaa 	bl	8002f60 <memset>
 800340c:	4620      	mov	r0, r4
 800340e:	bd70      	pop	{r4, r5, r6, pc}

08003410 <__sfp_lock_acquire>:
 8003410:	4801      	ldr	r0, [pc, #4]	; (8003418 <__sfp_lock_acquire+0x8>)
 8003412:	f000 b8b3 	b.w	800357c <__retarget_lock_acquire_recursive>
 8003416:	bf00      	nop
 8003418:	20000134 	.word	0x20000134

0800341c <__sfp_lock_release>:
 800341c:	4801      	ldr	r0, [pc, #4]	; (8003424 <__sfp_lock_release+0x8>)
 800341e:	f000 b8ae 	b.w	800357e <__retarget_lock_release_recursive>
 8003422:	bf00      	nop
 8003424:	20000134 	.word	0x20000134

08003428 <__sinit_lock_acquire>:
 8003428:	4801      	ldr	r0, [pc, #4]	; (8003430 <__sinit_lock_acquire+0x8>)
 800342a:	f000 b8a7 	b.w	800357c <__retarget_lock_acquire_recursive>
 800342e:	bf00      	nop
 8003430:	2000012f 	.word	0x2000012f

08003434 <__sinit_lock_release>:
 8003434:	4801      	ldr	r0, [pc, #4]	; (800343c <__sinit_lock_release+0x8>)
 8003436:	f000 b8a2 	b.w	800357e <__retarget_lock_release_recursive>
 800343a:	bf00      	nop
 800343c:	2000012f 	.word	0x2000012f

08003440 <__sinit>:
 8003440:	b510      	push	{r4, lr}
 8003442:	4604      	mov	r4, r0
 8003444:	f7ff fff0 	bl	8003428 <__sinit_lock_acquire>
 8003448:	69a3      	ldr	r3, [r4, #24]
 800344a:	b11b      	cbz	r3, 8003454 <__sinit+0x14>
 800344c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003450:	f7ff bff0 	b.w	8003434 <__sinit_lock_release>
 8003454:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003458:	6523      	str	r3, [r4, #80]	; 0x50
 800345a:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <__sinit+0x68>)
 800345c:	4a13      	ldr	r2, [pc, #76]	; (80034ac <__sinit+0x6c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	62a2      	str	r2, [r4, #40]	; 0x28
 8003462:	42a3      	cmp	r3, r4
 8003464:	bf04      	itt	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	61a3      	streq	r3, [r4, #24]
 800346a:	4620      	mov	r0, r4
 800346c:	f000 f820 	bl	80034b0 <__sfp>
 8003470:	6060      	str	r0, [r4, #4]
 8003472:	4620      	mov	r0, r4
 8003474:	f000 f81c 	bl	80034b0 <__sfp>
 8003478:	60a0      	str	r0, [r4, #8]
 800347a:	4620      	mov	r0, r4
 800347c:	f000 f818 	bl	80034b0 <__sfp>
 8003480:	2200      	movs	r2, #0
 8003482:	60e0      	str	r0, [r4, #12]
 8003484:	2104      	movs	r1, #4
 8003486:	6860      	ldr	r0, [r4, #4]
 8003488:	f7ff ff82 	bl	8003390 <std>
 800348c:	68a0      	ldr	r0, [r4, #8]
 800348e:	2201      	movs	r2, #1
 8003490:	2109      	movs	r1, #9
 8003492:	f7ff ff7d 	bl	8003390 <std>
 8003496:	68e0      	ldr	r0, [r4, #12]
 8003498:	2202      	movs	r2, #2
 800349a:	2112      	movs	r1, #18
 800349c:	f7ff ff78 	bl	8003390 <std>
 80034a0:	2301      	movs	r3, #1
 80034a2:	61a3      	str	r3, [r4, #24]
 80034a4:	e7d2      	b.n	800344c <__sinit+0xc>
 80034a6:	bf00      	nop
 80034a8:	08004150 	.word	0x08004150
 80034ac:	080033d9 	.word	0x080033d9

080034b0 <__sfp>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	4607      	mov	r7, r0
 80034b4:	f7ff ffac 	bl	8003410 <__sfp_lock_acquire>
 80034b8:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <__sfp+0x84>)
 80034ba:	681e      	ldr	r6, [r3, #0]
 80034bc:	69b3      	ldr	r3, [r6, #24]
 80034be:	b913      	cbnz	r3, 80034c6 <__sfp+0x16>
 80034c0:	4630      	mov	r0, r6
 80034c2:	f7ff ffbd 	bl	8003440 <__sinit>
 80034c6:	3648      	adds	r6, #72	; 0x48
 80034c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	d503      	bpl.n	80034d8 <__sfp+0x28>
 80034d0:	6833      	ldr	r3, [r6, #0]
 80034d2:	b30b      	cbz	r3, 8003518 <__sfp+0x68>
 80034d4:	6836      	ldr	r6, [r6, #0]
 80034d6:	e7f7      	b.n	80034c8 <__sfp+0x18>
 80034d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034dc:	b9d5      	cbnz	r5, 8003514 <__sfp+0x64>
 80034de:	4b16      	ldr	r3, [pc, #88]	; (8003538 <__sfp+0x88>)
 80034e0:	60e3      	str	r3, [r4, #12]
 80034e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034e6:	6665      	str	r5, [r4, #100]	; 0x64
 80034e8:	f000 f847 	bl	800357a <__retarget_lock_init_recursive>
 80034ec:	f7ff ff96 	bl	800341c <__sfp_lock_release>
 80034f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80034f8:	6025      	str	r5, [r4, #0]
 80034fa:	61a5      	str	r5, [r4, #24]
 80034fc:	2208      	movs	r2, #8
 80034fe:	4629      	mov	r1, r5
 8003500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003504:	f7ff fd2c 	bl	8002f60 <memset>
 8003508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800350c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003510:	4620      	mov	r0, r4
 8003512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003514:	3468      	adds	r4, #104	; 0x68
 8003516:	e7d9      	b.n	80034cc <__sfp+0x1c>
 8003518:	2104      	movs	r1, #4
 800351a:	4638      	mov	r0, r7
 800351c:	f7ff ff62 	bl	80033e4 <__sfmoreglue>
 8003520:	4604      	mov	r4, r0
 8003522:	6030      	str	r0, [r6, #0]
 8003524:	2800      	cmp	r0, #0
 8003526:	d1d5      	bne.n	80034d4 <__sfp+0x24>
 8003528:	f7ff ff78 	bl	800341c <__sfp_lock_release>
 800352c:	230c      	movs	r3, #12
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	e7ee      	b.n	8003510 <__sfp+0x60>
 8003532:	bf00      	nop
 8003534:	08004150 	.word	0x08004150
 8003538:	ffff0001 	.word	0xffff0001

0800353c <_fwalk_reent>:
 800353c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003540:	4606      	mov	r6, r0
 8003542:	4688      	mov	r8, r1
 8003544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003548:	2700      	movs	r7, #0
 800354a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800354e:	f1b9 0901 	subs.w	r9, r9, #1
 8003552:	d505      	bpl.n	8003560 <_fwalk_reent+0x24>
 8003554:	6824      	ldr	r4, [r4, #0]
 8003556:	2c00      	cmp	r4, #0
 8003558:	d1f7      	bne.n	800354a <_fwalk_reent+0xe>
 800355a:	4638      	mov	r0, r7
 800355c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003560:	89ab      	ldrh	r3, [r5, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d907      	bls.n	8003576 <_fwalk_reent+0x3a>
 8003566:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800356a:	3301      	adds	r3, #1
 800356c:	d003      	beq.n	8003576 <_fwalk_reent+0x3a>
 800356e:	4629      	mov	r1, r5
 8003570:	4630      	mov	r0, r6
 8003572:	47c0      	blx	r8
 8003574:	4307      	orrs	r7, r0
 8003576:	3568      	adds	r5, #104	; 0x68
 8003578:	e7e9      	b.n	800354e <_fwalk_reent+0x12>

0800357a <__retarget_lock_init_recursive>:
 800357a:	4770      	bx	lr

0800357c <__retarget_lock_acquire_recursive>:
 800357c:	4770      	bx	lr

0800357e <__retarget_lock_release_recursive>:
 800357e:	4770      	bx	lr

08003580 <__swhatbuf_r>:
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	460e      	mov	r6, r1
 8003584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003588:	2900      	cmp	r1, #0
 800358a:	b096      	sub	sp, #88	; 0x58
 800358c:	4614      	mov	r4, r2
 800358e:	461d      	mov	r5, r3
 8003590:	da07      	bge.n	80035a2 <__swhatbuf_r+0x22>
 8003592:	2300      	movs	r3, #0
 8003594:	602b      	str	r3, [r5, #0]
 8003596:	89b3      	ldrh	r3, [r6, #12]
 8003598:	061a      	lsls	r2, r3, #24
 800359a:	d410      	bmi.n	80035be <__swhatbuf_r+0x3e>
 800359c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a0:	e00e      	b.n	80035c0 <__swhatbuf_r+0x40>
 80035a2:	466a      	mov	r2, sp
 80035a4:	f000 fc5e 	bl	8003e64 <_fstat_r>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	dbf2      	blt.n	8003592 <__swhatbuf_r+0x12>
 80035ac:	9a01      	ldr	r2, [sp, #4]
 80035ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035b6:	425a      	negs	r2, r3
 80035b8:	415a      	adcs	r2, r3
 80035ba:	602a      	str	r2, [r5, #0]
 80035bc:	e7ee      	b.n	800359c <__swhatbuf_r+0x1c>
 80035be:	2340      	movs	r3, #64	; 0x40
 80035c0:	2000      	movs	r0, #0
 80035c2:	6023      	str	r3, [r4, #0]
 80035c4:	b016      	add	sp, #88	; 0x58
 80035c6:	bd70      	pop	{r4, r5, r6, pc}

080035c8 <__smakebuf_r>:
 80035c8:	898b      	ldrh	r3, [r1, #12]
 80035ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035cc:	079d      	lsls	r5, r3, #30
 80035ce:	4606      	mov	r6, r0
 80035d0:	460c      	mov	r4, r1
 80035d2:	d507      	bpl.n	80035e4 <__smakebuf_r+0x1c>
 80035d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	6123      	str	r3, [r4, #16]
 80035dc:	2301      	movs	r3, #1
 80035de:	6163      	str	r3, [r4, #20]
 80035e0:	b002      	add	sp, #8
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	ab01      	add	r3, sp, #4
 80035e6:	466a      	mov	r2, sp
 80035e8:	f7ff ffca 	bl	8003580 <__swhatbuf_r>
 80035ec:	9900      	ldr	r1, [sp, #0]
 80035ee:	4605      	mov	r5, r0
 80035f0:	4630      	mov	r0, r6
 80035f2:	f000 f879 	bl	80036e8 <_malloc_r>
 80035f6:	b948      	cbnz	r0, 800360c <__smakebuf_r+0x44>
 80035f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035fc:	059a      	lsls	r2, r3, #22
 80035fe:	d4ef      	bmi.n	80035e0 <__smakebuf_r+0x18>
 8003600:	f023 0303 	bic.w	r3, r3, #3
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	81a3      	strh	r3, [r4, #12]
 800360a:	e7e3      	b.n	80035d4 <__smakebuf_r+0xc>
 800360c:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <__smakebuf_r+0x7c>)
 800360e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	6020      	str	r0, [r4, #0]
 8003614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003618:	81a3      	strh	r3, [r4, #12]
 800361a:	9b00      	ldr	r3, [sp, #0]
 800361c:	6163      	str	r3, [r4, #20]
 800361e:	9b01      	ldr	r3, [sp, #4]
 8003620:	6120      	str	r0, [r4, #16]
 8003622:	b15b      	cbz	r3, 800363c <__smakebuf_r+0x74>
 8003624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003628:	4630      	mov	r0, r6
 800362a:	f000 fc2d 	bl	8003e88 <_isatty_r>
 800362e:	b128      	cbz	r0, 800363c <__smakebuf_r+0x74>
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	f023 0303 	bic.w	r3, r3, #3
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	81a3      	strh	r3, [r4, #12]
 800363c:	89a0      	ldrh	r0, [r4, #12]
 800363e:	4305      	orrs	r5, r0
 8003640:	81a5      	strh	r5, [r4, #12]
 8003642:	e7cd      	b.n	80035e0 <__smakebuf_r+0x18>
 8003644:	080033d9 	.word	0x080033d9

08003648 <_free_r>:
 8003648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800364a:	2900      	cmp	r1, #0
 800364c:	d048      	beq.n	80036e0 <_free_r+0x98>
 800364e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003652:	9001      	str	r0, [sp, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f1a1 0404 	sub.w	r4, r1, #4
 800365a:	bfb8      	it	lt
 800365c:	18e4      	addlt	r4, r4, r3
 800365e:	f000 fc35 	bl	8003ecc <__malloc_lock>
 8003662:	4a20      	ldr	r2, [pc, #128]	; (80036e4 <_free_r+0x9c>)
 8003664:	9801      	ldr	r0, [sp, #4]
 8003666:	6813      	ldr	r3, [r2, #0]
 8003668:	4615      	mov	r5, r2
 800366a:	b933      	cbnz	r3, 800367a <_free_r+0x32>
 800366c:	6063      	str	r3, [r4, #4]
 800366e:	6014      	str	r4, [r2, #0]
 8003670:	b003      	add	sp, #12
 8003672:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003676:	f000 bc2f 	b.w	8003ed8 <__malloc_unlock>
 800367a:	42a3      	cmp	r3, r4
 800367c:	d90b      	bls.n	8003696 <_free_r+0x4e>
 800367e:	6821      	ldr	r1, [r4, #0]
 8003680:	1862      	adds	r2, r4, r1
 8003682:	4293      	cmp	r3, r2
 8003684:	bf04      	itt	eq
 8003686:	681a      	ldreq	r2, [r3, #0]
 8003688:	685b      	ldreq	r3, [r3, #4]
 800368a:	6063      	str	r3, [r4, #4]
 800368c:	bf04      	itt	eq
 800368e:	1852      	addeq	r2, r2, r1
 8003690:	6022      	streq	r2, [r4, #0]
 8003692:	602c      	str	r4, [r5, #0]
 8003694:	e7ec      	b.n	8003670 <_free_r+0x28>
 8003696:	461a      	mov	r2, r3
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	b10b      	cbz	r3, 80036a0 <_free_r+0x58>
 800369c:	42a3      	cmp	r3, r4
 800369e:	d9fa      	bls.n	8003696 <_free_r+0x4e>
 80036a0:	6811      	ldr	r1, [r2, #0]
 80036a2:	1855      	adds	r5, r2, r1
 80036a4:	42a5      	cmp	r5, r4
 80036a6:	d10b      	bne.n	80036c0 <_free_r+0x78>
 80036a8:	6824      	ldr	r4, [r4, #0]
 80036aa:	4421      	add	r1, r4
 80036ac:	1854      	adds	r4, r2, r1
 80036ae:	42a3      	cmp	r3, r4
 80036b0:	6011      	str	r1, [r2, #0]
 80036b2:	d1dd      	bne.n	8003670 <_free_r+0x28>
 80036b4:	681c      	ldr	r4, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	6053      	str	r3, [r2, #4]
 80036ba:	4421      	add	r1, r4
 80036bc:	6011      	str	r1, [r2, #0]
 80036be:	e7d7      	b.n	8003670 <_free_r+0x28>
 80036c0:	d902      	bls.n	80036c8 <_free_r+0x80>
 80036c2:	230c      	movs	r3, #12
 80036c4:	6003      	str	r3, [r0, #0]
 80036c6:	e7d3      	b.n	8003670 <_free_r+0x28>
 80036c8:	6825      	ldr	r5, [r4, #0]
 80036ca:	1961      	adds	r1, r4, r5
 80036cc:	428b      	cmp	r3, r1
 80036ce:	bf04      	itt	eq
 80036d0:	6819      	ldreq	r1, [r3, #0]
 80036d2:	685b      	ldreq	r3, [r3, #4]
 80036d4:	6063      	str	r3, [r4, #4]
 80036d6:	bf04      	itt	eq
 80036d8:	1949      	addeq	r1, r1, r5
 80036da:	6021      	streq	r1, [r4, #0]
 80036dc:	6054      	str	r4, [r2, #4]
 80036de:	e7c7      	b.n	8003670 <_free_r+0x28>
 80036e0:	b003      	add	sp, #12
 80036e2:	bd30      	pop	{r4, r5, pc}
 80036e4:	20000094 	.word	0x20000094

080036e8 <_malloc_r>:
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	1ccd      	adds	r5, r1, #3
 80036ec:	f025 0503 	bic.w	r5, r5, #3
 80036f0:	3508      	adds	r5, #8
 80036f2:	2d0c      	cmp	r5, #12
 80036f4:	bf38      	it	cc
 80036f6:	250c      	movcc	r5, #12
 80036f8:	2d00      	cmp	r5, #0
 80036fa:	4606      	mov	r6, r0
 80036fc:	db01      	blt.n	8003702 <_malloc_r+0x1a>
 80036fe:	42a9      	cmp	r1, r5
 8003700:	d903      	bls.n	800370a <_malloc_r+0x22>
 8003702:	230c      	movs	r3, #12
 8003704:	6033      	str	r3, [r6, #0]
 8003706:	2000      	movs	r0, #0
 8003708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800370a:	f000 fbdf 	bl	8003ecc <__malloc_lock>
 800370e:	4921      	ldr	r1, [pc, #132]	; (8003794 <_malloc_r+0xac>)
 8003710:	680a      	ldr	r2, [r1, #0]
 8003712:	4614      	mov	r4, r2
 8003714:	b99c      	cbnz	r4, 800373e <_malloc_r+0x56>
 8003716:	4f20      	ldr	r7, [pc, #128]	; (8003798 <_malloc_r+0xb0>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	b923      	cbnz	r3, 8003726 <_malloc_r+0x3e>
 800371c:	4621      	mov	r1, r4
 800371e:	4630      	mov	r0, r6
 8003720:	f000 fb2a 	bl	8003d78 <_sbrk_r>
 8003724:	6038      	str	r0, [r7, #0]
 8003726:	4629      	mov	r1, r5
 8003728:	4630      	mov	r0, r6
 800372a:	f000 fb25 	bl	8003d78 <_sbrk_r>
 800372e:	1c43      	adds	r3, r0, #1
 8003730:	d123      	bne.n	800377a <_malloc_r+0x92>
 8003732:	230c      	movs	r3, #12
 8003734:	6033      	str	r3, [r6, #0]
 8003736:	4630      	mov	r0, r6
 8003738:	f000 fbce 	bl	8003ed8 <__malloc_unlock>
 800373c:	e7e3      	b.n	8003706 <_malloc_r+0x1e>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	1b5b      	subs	r3, r3, r5
 8003742:	d417      	bmi.n	8003774 <_malloc_r+0x8c>
 8003744:	2b0b      	cmp	r3, #11
 8003746:	d903      	bls.n	8003750 <_malloc_r+0x68>
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	441c      	add	r4, r3
 800374c:	6025      	str	r5, [r4, #0]
 800374e:	e004      	b.n	800375a <_malloc_r+0x72>
 8003750:	6863      	ldr	r3, [r4, #4]
 8003752:	42a2      	cmp	r2, r4
 8003754:	bf0c      	ite	eq
 8003756:	600b      	streq	r3, [r1, #0]
 8003758:	6053      	strne	r3, [r2, #4]
 800375a:	4630      	mov	r0, r6
 800375c:	f000 fbbc 	bl	8003ed8 <__malloc_unlock>
 8003760:	f104 000b 	add.w	r0, r4, #11
 8003764:	1d23      	adds	r3, r4, #4
 8003766:	f020 0007 	bic.w	r0, r0, #7
 800376a:	1ac2      	subs	r2, r0, r3
 800376c:	d0cc      	beq.n	8003708 <_malloc_r+0x20>
 800376e:	1a1b      	subs	r3, r3, r0
 8003770:	50a3      	str	r3, [r4, r2]
 8003772:	e7c9      	b.n	8003708 <_malloc_r+0x20>
 8003774:	4622      	mov	r2, r4
 8003776:	6864      	ldr	r4, [r4, #4]
 8003778:	e7cc      	b.n	8003714 <_malloc_r+0x2c>
 800377a:	1cc4      	adds	r4, r0, #3
 800377c:	f024 0403 	bic.w	r4, r4, #3
 8003780:	42a0      	cmp	r0, r4
 8003782:	d0e3      	beq.n	800374c <_malloc_r+0x64>
 8003784:	1a21      	subs	r1, r4, r0
 8003786:	4630      	mov	r0, r6
 8003788:	f000 faf6 	bl	8003d78 <_sbrk_r>
 800378c:	3001      	adds	r0, #1
 800378e:	d1dd      	bne.n	800374c <_malloc_r+0x64>
 8003790:	e7cf      	b.n	8003732 <_malloc_r+0x4a>
 8003792:	bf00      	nop
 8003794:	20000094 	.word	0x20000094
 8003798:	20000098 	.word	0x20000098

0800379c <__sfputc_r>:
 800379c:	6893      	ldr	r3, [r2, #8]
 800379e:	3b01      	subs	r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	b410      	push	{r4}
 80037a4:	6093      	str	r3, [r2, #8]
 80037a6:	da08      	bge.n	80037ba <__sfputc_r+0x1e>
 80037a8:	6994      	ldr	r4, [r2, #24]
 80037aa:	42a3      	cmp	r3, r4
 80037ac:	db01      	blt.n	80037b2 <__sfputc_r+0x16>
 80037ae:	290a      	cmp	r1, #10
 80037b0:	d103      	bne.n	80037ba <__sfputc_r+0x1e>
 80037b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037b6:	f7ff bc69 	b.w	800308c <__swbuf_r>
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	1c58      	adds	r0, r3, #1
 80037be:	6010      	str	r0, [r2, #0]
 80037c0:	7019      	strb	r1, [r3, #0]
 80037c2:	4608      	mov	r0, r1
 80037c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <__sfputs_r>:
 80037ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037cc:	4606      	mov	r6, r0
 80037ce:	460f      	mov	r7, r1
 80037d0:	4614      	mov	r4, r2
 80037d2:	18d5      	adds	r5, r2, r3
 80037d4:	42ac      	cmp	r4, r5
 80037d6:	d101      	bne.n	80037dc <__sfputs_r+0x12>
 80037d8:	2000      	movs	r0, #0
 80037da:	e007      	b.n	80037ec <__sfputs_r+0x22>
 80037dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037e0:	463a      	mov	r2, r7
 80037e2:	4630      	mov	r0, r6
 80037e4:	f7ff ffda 	bl	800379c <__sfputc_r>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d1f3      	bne.n	80037d4 <__sfputs_r+0xa>
 80037ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037f0 <_vfiprintf_r>:
 80037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	460d      	mov	r5, r1
 80037f6:	b09d      	sub	sp, #116	; 0x74
 80037f8:	4614      	mov	r4, r2
 80037fa:	4698      	mov	r8, r3
 80037fc:	4606      	mov	r6, r0
 80037fe:	b118      	cbz	r0, 8003808 <_vfiprintf_r+0x18>
 8003800:	6983      	ldr	r3, [r0, #24]
 8003802:	b90b      	cbnz	r3, 8003808 <_vfiprintf_r+0x18>
 8003804:	f7ff fe1c 	bl	8003440 <__sinit>
 8003808:	4b89      	ldr	r3, [pc, #548]	; (8003a30 <_vfiprintf_r+0x240>)
 800380a:	429d      	cmp	r5, r3
 800380c:	d11b      	bne.n	8003846 <_vfiprintf_r+0x56>
 800380e:	6875      	ldr	r5, [r6, #4]
 8003810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003812:	07d9      	lsls	r1, r3, #31
 8003814:	d405      	bmi.n	8003822 <_vfiprintf_r+0x32>
 8003816:	89ab      	ldrh	r3, [r5, #12]
 8003818:	059a      	lsls	r2, r3, #22
 800381a:	d402      	bmi.n	8003822 <_vfiprintf_r+0x32>
 800381c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800381e:	f7ff fead 	bl	800357c <__retarget_lock_acquire_recursive>
 8003822:	89ab      	ldrh	r3, [r5, #12]
 8003824:	071b      	lsls	r3, r3, #28
 8003826:	d501      	bpl.n	800382c <_vfiprintf_r+0x3c>
 8003828:	692b      	ldr	r3, [r5, #16]
 800382a:	b9eb      	cbnz	r3, 8003868 <_vfiprintf_r+0x78>
 800382c:	4629      	mov	r1, r5
 800382e:	4630      	mov	r0, r6
 8003830:	f7ff fc7e 	bl	8003130 <__swsetup_r>
 8003834:	b1c0      	cbz	r0, 8003868 <_vfiprintf_r+0x78>
 8003836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003838:	07dc      	lsls	r4, r3, #31
 800383a:	d50e      	bpl.n	800385a <_vfiprintf_r+0x6a>
 800383c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003840:	b01d      	add	sp, #116	; 0x74
 8003842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003846:	4b7b      	ldr	r3, [pc, #492]	; (8003a34 <_vfiprintf_r+0x244>)
 8003848:	429d      	cmp	r5, r3
 800384a:	d101      	bne.n	8003850 <_vfiprintf_r+0x60>
 800384c:	68b5      	ldr	r5, [r6, #8]
 800384e:	e7df      	b.n	8003810 <_vfiprintf_r+0x20>
 8003850:	4b79      	ldr	r3, [pc, #484]	; (8003a38 <_vfiprintf_r+0x248>)
 8003852:	429d      	cmp	r5, r3
 8003854:	bf08      	it	eq
 8003856:	68f5      	ldreq	r5, [r6, #12]
 8003858:	e7da      	b.n	8003810 <_vfiprintf_r+0x20>
 800385a:	89ab      	ldrh	r3, [r5, #12]
 800385c:	0598      	lsls	r0, r3, #22
 800385e:	d4ed      	bmi.n	800383c <_vfiprintf_r+0x4c>
 8003860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003862:	f7ff fe8c 	bl	800357e <__retarget_lock_release_recursive>
 8003866:	e7e9      	b.n	800383c <_vfiprintf_r+0x4c>
 8003868:	2300      	movs	r3, #0
 800386a:	9309      	str	r3, [sp, #36]	; 0x24
 800386c:	2320      	movs	r3, #32
 800386e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003872:	f8cd 800c 	str.w	r8, [sp, #12]
 8003876:	2330      	movs	r3, #48	; 0x30
 8003878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003a3c <_vfiprintf_r+0x24c>
 800387c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003880:	f04f 0901 	mov.w	r9, #1
 8003884:	4623      	mov	r3, r4
 8003886:	469a      	mov	sl, r3
 8003888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800388c:	b10a      	cbz	r2, 8003892 <_vfiprintf_r+0xa2>
 800388e:	2a25      	cmp	r2, #37	; 0x25
 8003890:	d1f9      	bne.n	8003886 <_vfiprintf_r+0x96>
 8003892:	ebba 0b04 	subs.w	fp, sl, r4
 8003896:	d00b      	beq.n	80038b0 <_vfiprintf_r+0xc0>
 8003898:	465b      	mov	r3, fp
 800389a:	4622      	mov	r2, r4
 800389c:	4629      	mov	r1, r5
 800389e:	4630      	mov	r0, r6
 80038a0:	f7ff ff93 	bl	80037ca <__sfputs_r>
 80038a4:	3001      	adds	r0, #1
 80038a6:	f000 80aa 	beq.w	80039fe <_vfiprintf_r+0x20e>
 80038aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038ac:	445a      	add	r2, fp
 80038ae:	9209      	str	r2, [sp, #36]	; 0x24
 80038b0:	f89a 3000 	ldrb.w	r3, [sl]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80a2 	beq.w	80039fe <_vfiprintf_r+0x20e>
 80038ba:	2300      	movs	r3, #0
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038c4:	f10a 0a01 	add.w	sl, sl, #1
 80038c8:	9304      	str	r3, [sp, #16]
 80038ca:	9307      	str	r3, [sp, #28]
 80038cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038d0:	931a      	str	r3, [sp, #104]	; 0x68
 80038d2:	4654      	mov	r4, sl
 80038d4:	2205      	movs	r2, #5
 80038d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038da:	4858      	ldr	r0, [pc, #352]	; (8003a3c <_vfiprintf_r+0x24c>)
 80038dc:	f7fc fc78 	bl	80001d0 <memchr>
 80038e0:	9a04      	ldr	r2, [sp, #16]
 80038e2:	b9d8      	cbnz	r0, 800391c <_vfiprintf_r+0x12c>
 80038e4:	06d1      	lsls	r1, r2, #27
 80038e6:	bf44      	itt	mi
 80038e8:	2320      	movmi	r3, #32
 80038ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038ee:	0713      	lsls	r3, r2, #28
 80038f0:	bf44      	itt	mi
 80038f2:	232b      	movmi	r3, #43	; 0x2b
 80038f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038f8:	f89a 3000 	ldrb.w	r3, [sl]
 80038fc:	2b2a      	cmp	r3, #42	; 0x2a
 80038fe:	d015      	beq.n	800392c <_vfiprintf_r+0x13c>
 8003900:	9a07      	ldr	r2, [sp, #28]
 8003902:	4654      	mov	r4, sl
 8003904:	2000      	movs	r0, #0
 8003906:	f04f 0c0a 	mov.w	ip, #10
 800390a:	4621      	mov	r1, r4
 800390c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003910:	3b30      	subs	r3, #48	; 0x30
 8003912:	2b09      	cmp	r3, #9
 8003914:	d94e      	bls.n	80039b4 <_vfiprintf_r+0x1c4>
 8003916:	b1b0      	cbz	r0, 8003946 <_vfiprintf_r+0x156>
 8003918:	9207      	str	r2, [sp, #28]
 800391a:	e014      	b.n	8003946 <_vfiprintf_r+0x156>
 800391c:	eba0 0308 	sub.w	r3, r0, r8
 8003920:	fa09 f303 	lsl.w	r3, r9, r3
 8003924:	4313      	orrs	r3, r2
 8003926:	9304      	str	r3, [sp, #16]
 8003928:	46a2      	mov	sl, r4
 800392a:	e7d2      	b.n	80038d2 <_vfiprintf_r+0xe2>
 800392c:	9b03      	ldr	r3, [sp, #12]
 800392e:	1d19      	adds	r1, r3, #4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	9103      	str	r1, [sp, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	bfbb      	ittet	lt
 8003938:	425b      	neglt	r3, r3
 800393a:	f042 0202 	orrlt.w	r2, r2, #2
 800393e:	9307      	strge	r3, [sp, #28]
 8003940:	9307      	strlt	r3, [sp, #28]
 8003942:	bfb8      	it	lt
 8003944:	9204      	strlt	r2, [sp, #16]
 8003946:	7823      	ldrb	r3, [r4, #0]
 8003948:	2b2e      	cmp	r3, #46	; 0x2e
 800394a:	d10c      	bne.n	8003966 <_vfiprintf_r+0x176>
 800394c:	7863      	ldrb	r3, [r4, #1]
 800394e:	2b2a      	cmp	r3, #42	; 0x2a
 8003950:	d135      	bne.n	80039be <_vfiprintf_r+0x1ce>
 8003952:	9b03      	ldr	r3, [sp, #12]
 8003954:	1d1a      	adds	r2, r3, #4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	9203      	str	r2, [sp, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	bfb8      	it	lt
 800395e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003962:	3402      	adds	r4, #2
 8003964:	9305      	str	r3, [sp, #20]
 8003966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003a4c <_vfiprintf_r+0x25c>
 800396a:	7821      	ldrb	r1, [r4, #0]
 800396c:	2203      	movs	r2, #3
 800396e:	4650      	mov	r0, sl
 8003970:	f7fc fc2e 	bl	80001d0 <memchr>
 8003974:	b140      	cbz	r0, 8003988 <_vfiprintf_r+0x198>
 8003976:	2340      	movs	r3, #64	; 0x40
 8003978:	eba0 000a 	sub.w	r0, r0, sl
 800397c:	fa03 f000 	lsl.w	r0, r3, r0
 8003980:	9b04      	ldr	r3, [sp, #16]
 8003982:	4303      	orrs	r3, r0
 8003984:	3401      	adds	r4, #1
 8003986:	9304      	str	r3, [sp, #16]
 8003988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800398c:	482c      	ldr	r0, [pc, #176]	; (8003a40 <_vfiprintf_r+0x250>)
 800398e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003992:	2206      	movs	r2, #6
 8003994:	f7fc fc1c 	bl	80001d0 <memchr>
 8003998:	2800      	cmp	r0, #0
 800399a:	d03f      	beq.n	8003a1c <_vfiprintf_r+0x22c>
 800399c:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <_vfiprintf_r+0x254>)
 800399e:	bb1b      	cbnz	r3, 80039e8 <_vfiprintf_r+0x1f8>
 80039a0:	9b03      	ldr	r3, [sp, #12]
 80039a2:	3307      	adds	r3, #7
 80039a4:	f023 0307 	bic.w	r3, r3, #7
 80039a8:	3308      	adds	r3, #8
 80039aa:	9303      	str	r3, [sp, #12]
 80039ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ae:	443b      	add	r3, r7
 80039b0:	9309      	str	r3, [sp, #36]	; 0x24
 80039b2:	e767      	b.n	8003884 <_vfiprintf_r+0x94>
 80039b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80039b8:	460c      	mov	r4, r1
 80039ba:	2001      	movs	r0, #1
 80039bc:	e7a5      	b.n	800390a <_vfiprintf_r+0x11a>
 80039be:	2300      	movs	r3, #0
 80039c0:	3401      	adds	r4, #1
 80039c2:	9305      	str	r3, [sp, #20]
 80039c4:	4619      	mov	r1, r3
 80039c6:	f04f 0c0a 	mov.w	ip, #10
 80039ca:	4620      	mov	r0, r4
 80039cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039d0:	3a30      	subs	r2, #48	; 0x30
 80039d2:	2a09      	cmp	r2, #9
 80039d4:	d903      	bls.n	80039de <_vfiprintf_r+0x1ee>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0c5      	beq.n	8003966 <_vfiprintf_r+0x176>
 80039da:	9105      	str	r1, [sp, #20]
 80039dc:	e7c3      	b.n	8003966 <_vfiprintf_r+0x176>
 80039de:	fb0c 2101 	mla	r1, ip, r1, r2
 80039e2:	4604      	mov	r4, r0
 80039e4:	2301      	movs	r3, #1
 80039e6:	e7f0      	b.n	80039ca <_vfiprintf_r+0x1da>
 80039e8:	ab03      	add	r3, sp, #12
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	462a      	mov	r2, r5
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <_vfiprintf_r+0x258>)
 80039f0:	a904      	add	r1, sp, #16
 80039f2:	4630      	mov	r0, r6
 80039f4:	f3af 8000 	nop.w
 80039f8:	4607      	mov	r7, r0
 80039fa:	1c78      	adds	r0, r7, #1
 80039fc:	d1d6      	bne.n	80039ac <_vfiprintf_r+0x1bc>
 80039fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a00:	07d9      	lsls	r1, r3, #31
 8003a02:	d405      	bmi.n	8003a10 <_vfiprintf_r+0x220>
 8003a04:	89ab      	ldrh	r3, [r5, #12]
 8003a06:	059a      	lsls	r2, r3, #22
 8003a08:	d402      	bmi.n	8003a10 <_vfiprintf_r+0x220>
 8003a0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a0c:	f7ff fdb7 	bl	800357e <__retarget_lock_release_recursive>
 8003a10:	89ab      	ldrh	r3, [r5, #12]
 8003a12:	065b      	lsls	r3, r3, #25
 8003a14:	f53f af12 	bmi.w	800383c <_vfiprintf_r+0x4c>
 8003a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a1a:	e711      	b.n	8003840 <_vfiprintf_r+0x50>
 8003a1c:	ab03      	add	r3, sp, #12
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	462a      	mov	r2, r5
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <_vfiprintf_r+0x258>)
 8003a24:	a904      	add	r1, sp, #16
 8003a26:	4630      	mov	r0, r6
 8003a28:	f000 f880 	bl	8003b2c <_printf_i>
 8003a2c:	e7e4      	b.n	80039f8 <_vfiprintf_r+0x208>
 8003a2e:	bf00      	nop
 8003a30:	08004174 	.word	0x08004174
 8003a34:	08004194 	.word	0x08004194
 8003a38:	08004154 	.word	0x08004154
 8003a3c:	080041b4 	.word	0x080041b4
 8003a40:	080041be 	.word	0x080041be
 8003a44:	00000000 	.word	0x00000000
 8003a48:	080037cb 	.word	0x080037cb
 8003a4c:	080041ba 	.word	0x080041ba

08003a50 <_printf_common>:
 8003a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a54:	4616      	mov	r6, r2
 8003a56:	4699      	mov	r9, r3
 8003a58:	688a      	ldr	r2, [r1, #8]
 8003a5a:	690b      	ldr	r3, [r1, #16]
 8003a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a60:	4293      	cmp	r3, r2
 8003a62:	bfb8      	it	lt
 8003a64:	4613      	movlt	r3, r2
 8003a66:	6033      	str	r3, [r6, #0]
 8003a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a6c:	4607      	mov	r7, r0
 8003a6e:	460c      	mov	r4, r1
 8003a70:	b10a      	cbz	r2, 8003a76 <_printf_common+0x26>
 8003a72:	3301      	adds	r3, #1
 8003a74:	6033      	str	r3, [r6, #0]
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	0699      	lsls	r1, r3, #26
 8003a7a:	bf42      	ittt	mi
 8003a7c:	6833      	ldrmi	r3, [r6, #0]
 8003a7e:	3302      	addmi	r3, #2
 8003a80:	6033      	strmi	r3, [r6, #0]
 8003a82:	6825      	ldr	r5, [r4, #0]
 8003a84:	f015 0506 	ands.w	r5, r5, #6
 8003a88:	d106      	bne.n	8003a98 <_printf_common+0x48>
 8003a8a:	f104 0a19 	add.w	sl, r4, #25
 8003a8e:	68e3      	ldr	r3, [r4, #12]
 8003a90:	6832      	ldr	r2, [r6, #0]
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	42ab      	cmp	r3, r5
 8003a96:	dc26      	bgt.n	8003ae6 <_printf_common+0x96>
 8003a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a9c:	1e13      	subs	r3, r2, #0
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	bf18      	it	ne
 8003aa2:	2301      	movne	r3, #1
 8003aa4:	0692      	lsls	r2, r2, #26
 8003aa6:	d42b      	bmi.n	8003b00 <_printf_common+0xb0>
 8003aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aac:	4649      	mov	r1, r9
 8003aae:	4638      	mov	r0, r7
 8003ab0:	47c0      	blx	r8
 8003ab2:	3001      	adds	r0, #1
 8003ab4:	d01e      	beq.n	8003af4 <_printf_common+0xa4>
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	68e5      	ldr	r5, [r4, #12]
 8003aba:	6832      	ldr	r2, [r6, #0]
 8003abc:	f003 0306 	and.w	r3, r3, #6
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	bf08      	it	eq
 8003ac4:	1aad      	subeq	r5, r5, r2
 8003ac6:	68a3      	ldr	r3, [r4, #8]
 8003ac8:	6922      	ldr	r2, [r4, #16]
 8003aca:	bf0c      	ite	eq
 8003acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ad0:	2500      	movne	r5, #0
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	bfc4      	itt	gt
 8003ad6:	1a9b      	subgt	r3, r3, r2
 8003ad8:	18ed      	addgt	r5, r5, r3
 8003ada:	2600      	movs	r6, #0
 8003adc:	341a      	adds	r4, #26
 8003ade:	42b5      	cmp	r5, r6
 8003ae0:	d11a      	bne.n	8003b18 <_printf_common+0xc8>
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	e008      	b.n	8003af8 <_printf_common+0xa8>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	4652      	mov	r2, sl
 8003aea:	4649      	mov	r1, r9
 8003aec:	4638      	mov	r0, r7
 8003aee:	47c0      	blx	r8
 8003af0:	3001      	adds	r0, #1
 8003af2:	d103      	bne.n	8003afc <_printf_common+0xac>
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afc:	3501      	adds	r5, #1
 8003afe:	e7c6      	b.n	8003a8e <_printf_common+0x3e>
 8003b00:	18e1      	adds	r1, r4, r3
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	2030      	movs	r0, #48	; 0x30
 8003b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b0a:	4422      	add	r2, r4
 8003b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b14:	3302      	adds	r3, #2
 8003b16:	e7c7      	b.n	8003aa8 <_printf_common+0x58>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	4622      	mov	r2, r4
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	4638      	mov	r0, r7
 8003b20:	47c0      	blx	r8
 8003b22:	3001      	adds	r0, #1
 8003b24:	d0e6      	beq.n	8003af4 <_printf_common+0xa4>
 8003b26:	3601      	adds	r6, #1
 8003b28:	e7d9      	b.n	8003ade <_printf_common+0x8e>
	...

08003b2c <_printf_i>:
 8003b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	460c      	mov	r4, r1
 8003b32:	4691      	mov	r9, r2
 8003b34:	7e27      	ldrb	r7, [r4, #24]
 8003b36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b38:	2f78      	cmp	r7, #120	; 0x78
 8003b3a:	4680      	mov	r8, r0
 8003b3c:	469a      	mov	sl, r3
 8003b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b42:	d807      	bhi.n	8003b54 <_printf_i+0x28>
 8003b44:	2f62      	cmp	r7, #98	; 0x62
 8003b46:	d80a      	bhi.n	8003b5e <_printf_i+0x32>
 8003b48:	2f00      	cmp	r7, #0
 8003b4a:	f000 80d8 	beq.w	8003cfe <_printf_i+0x1d2>
 8003b4e:	2f58      	cmp	r7, #88	; 0x58
 8003b50:	f000 80a3 	beq.w	8003c9a <_printf_i+0x16e>
 8003b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b5c:	e03a      	b.n	8003bd4 <_printf_i+0xa8>
 8003b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b62:	2b15      	cmp	r3, #21
 8003b64:	d8f6      	bhi.n	8003b54 <_printf_i+0x28>
 8003b66:	a001      	add	r0, pc, #4	; (adr r0, 8003b6c <_printf_i+0x40>)
 8003b68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b6c:	08003bc5 	.word	0x08003bc5
 8003b70:	08003bd9 	.word	0x08003bd9
 8003b74:	08003b55 	.word	0x08003b55
 8003b78:	08003b55 	.word	0x08003b55
 8003b7c:	08003b55 	.word	0x08003b55
 8003b80:	08003b55 	.word	0x08003b55
 8003b84:	08003bd9 	.word	0x08003bd9
 8003b88:	08003b55 	.word	0x08003b55
 8003b8c:	08003b55 	.word	0x08003b55
 8003b90:	08003b55 	.word	0x08003b55
 8003b94:	08003b55 	.word	0x08003b55
 8003b98:	08003ce5 	.word	0x08003ce5
 8003b9c:	08003c09 	.word	0x08003c09
 8003ba0:	08003cc7 	.word	0x08003cc7
 8003ba4:	08003b55 	.word	0x08003b55
 8003ba8:	08003b55 	.word	0x08003b55
 8003bac:	08003d07 	.word	0x08003d07
 8003bb0:	08003b55 	.word	0x08003b55
 8003bb4:	08003c09 	.word	0x08003c09
 8003bb8:	08003b55 	.word	0x08003b55
 8003bbc:	08003b55 	.word	0x08003b55
 8003bc0:	08003ccf 	.word	0x08003ccf
 8003bc4:	680b      	ldr	r3, [r1, #0]
 8003bc6:	1d1a      	adds	r2, r3, #4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	600a      	str	r2, [r1, #0]
 8003bcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0a3      	b.n	8003d20 <_printf_i+0x1f4>
 8003bd8:	6825      	ldr	r5, [r4, #0]
 8003bda:	6808      	ldr	r0, [r1, #0]
 8003bdc:	062e      	lsls	r6, r5, #24
 8003bde:	f100 0304 	add.w	r3, r0, #4
 8003be2:	d50a      	bpl.n	8003bfa <_printf_i+0xce>
 8003be4:	6805      	ldr	r5, [r0, #0]
 8003be6:	600b      	str	r3, [r1, #0]
 8003be8:	2d00      	cmp	r5, #0
 8003bea:	da03      	bge.n	8003bf4 <_printf_i+0xc8>
 8003bec:	232d      	movs	r3, #45	; 0x2d
 8003bee:	426d      	negs	r5, r5
 8003bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf4:	485e      	ldr	r0, [pc, #376]	; (8003d70 <_printf_i+0x244>)
 8003bf6:	230a      	movs	r3, #10
 8003bf8:	e019      	b.n	8003c2e <_printf_i+0x102>
 8003bfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003bfe:	6805      	ldr	r5, [r0, #0]
 8003c00:	600b      	str	r3, [r1, #0]
 8003c02:	bf18      	it	ne
 8003c04:	b22d      	sxthne	r5, r5
 8003c06:	e7ef      	b.n	8003be8 <_printf_i+0xbc>
 8003c08:	680b      	ldr	r3, [r1, #0]
 8003c0a:	6825      	ldr	r5, [r4, #0]
 8003c0c:	1d18      	adds	r0, r3, #4
 8003c0e:	6008      	str	r0, [r1, #0]
 8003c10:	0628      	lsls	r0, r5, #24
 8003c12:	d501      	bpl.n	8003c18 <_printf_i+0xec>
 8003c14:	681d      	ldr	r5, [r3, #0]
 8003c16:	e002      	b.n	8003c1e <_printf_i+0xf2>
 8003c18:	0669      	lsls	r1, r5, #25
 8003c1a:	d5fb      	bpl.n	8003c14 <_printf_i+0xe8>
 8003c1c:	881d      	ldrh	r5, [r3, #0]
 8003c1e:	4854      	ldr	r0, [pc, #336]	; (8003d70 <_printf_i+0x244>)
 8003c20:	2f6f      	cmp	r7, #111	; 0x6f
 8003c22:	bf0c      	ite	eq
 8003c24:	2308      	moveq	r3, #8
 8003c26:	230a      	movne	r3, #10
 8003c28:	2100      	movs	r1, #0
 8003c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c2e:	6866      	ldr	r6, [r4, #4]
 8003c30:	60a6      	str	r6, [r4, #8]
 8003c32:	2e00      	cmp	r6, #0
 8003c34:	bfa2      	ittt	ge
 8003c36:	6821      	ldrge	r1, [r4, #0]
 8003c38:	f021 0104 	bicge.w	r1, r1, #4
 8003c3c:	6021      	strge	r1, [r4, #0]
 8003c3e:	b90d      	cbnz	r5, 8003c44 <_printf_i+0x118>
 8003c40:	2e00      	cmp	r6, #0
 8003c42:	d04d      	beq.n	8003ce0 <_printf_i+0x1b4>
 8003c44:	4616      	mov	r6, r2
 8003c46:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c4a:	fb03 5711 	mls	r7, r3, r1, r5
 8003c4e:	5dc7      	ldrb	r7, [r0, r7]
 8003c50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c54:	462f      	mov	r7, r5
 8003c56:	42bb      	cmp	r3, r7
 8003c58:	460d      	mov	r5, r1
 8003c5a:	d9f4      	bls.n	8003c46 <_printf_i+0x11a>
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d10b      	bne.n	8003c78 <_printf_i+0x14c>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	07df      	lsls	r7, r3, #31
 8003c64:	d508      	bpl.n	8003c78 <_printf_i+0x14c>
 8003c66:	6923      	ldr	r3, [r4, #16]
 8003c68:	6861      	ldr	r1, [r4, #4]
 8003c6a:	4299      	cmp	r1, r3
 8003c6c:	bfde      	ittt	le
 8003c6e:	2330      	movle	r3, #48	; 0x30
 8003c70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c74:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003c78:	1b92      	subs	r2, r2, r6
 8003c7a:	6122      	str	r2, [r4, #16]
 8003c7c:	f8cd a000 	str.w	sl, [sp]
 8003c80:	464b      	mov	r3, r9
 8003c82:	aa03      	add	r2, sp, #12
 8003c84:	4621      	mov	r1, r4
 8003c86:	4640      	mov	r0, r8
 8003c88:	f7ff fee2 	bl	8003a50 <_printf_common>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d14c      	bne.n	8003d2a <_printf_i+0x1fe>
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c94:	b004      	add	sp, #16
 8003c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c9a:	4835      	ldr	r0, [pc, #212]	; (8003d70 <_printf_i+0x244>)
 8003c9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	680e      	ldr	r6, [r1, #0]
 8003ca4:	061f      	lsls	r7, r3, #24
 8003ca6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003caa:	600e      	str	r6, [r1, #0]
 8003cac:	d514      	bpl.n	8003cd8 <_printf_i+0x1ac>
 8003cae:	07d9      	lsls	r1, r3, #31
 8003cb0:	bf44      	itt	mi
 8003cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8003cb6:	6023      	strmi	r3, [r4, #0]
 8003cb8:	b91d      	cbnz	r5, 8003cc2 <_printf_i+0x196>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	f023 0320 	bic.w	r3, r3, #32
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	2310      	movs	r3, #16
 8003cc4:	e7b0      	b.n	8003c28 <_printf_i+0xfc>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	f043 0320 	orr.w	r3, r3, #32
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	2378      	movs	r3, #120	; 0x78
 8003cd0:	4828      	ldr	r0, [pc, #160]	; (8003d74 <_printf_i+0x248>)
 8003cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cd6:	e7e3      	b.n	8003ca0 <_printf_i+0x174>
 8003cd8:	065e      	lsls	r6, r3, #25
 8003cda:	bf48      	it	mi
 8003cdc:	b2ad      	uxthmi	r5, r5
 8003cde:	e7e6      	b.n	8003cae <_printf_i+0x182>
 8003ce0:	4616      	mov	r6, r2
 8003ce2:	e7bb      	b.n	8003c5c <_printf_i+0x130>
 8003ce4:	680b      	ldr	r3, [r1, #0]
 8003ce6:	6826      	ldr	r6, [r4, #0]
 8003ce8:	6960      	ldr	r0, [r4, #20]
 8003cea:	1d1d      	adds	r5, r3, #4
 8003cec:	600d      	str	r5, [r1, #0]
 8003cee:	0635      	lsls	r5, r6, #24
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	d501      	bpl.n	8003cf8 <_printf_i+0x1cc>
 8003cf4:	6018      	str	r0, [r3, #0]
 8003cf6:	e002      	b.n	8003cfe <_printf_i+0x1d2>
 8003cf8:	0671      	lsls	r1, r6, #25
 8003cfa:	d5fb      	bpl.n	8003cf4 <_printf_i+0x1c8>
 8003cfc:	8018      	strh	r0, [r3, #0]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	6123      	str	r3, [r4, #16]
 8003d02:	4616      	mov	r6, r2
 8003d04:	e7ba      	b.n	8003c7c <_printf_i+0x150>
 8003d06:	680b      	ldr	r3, [r1, #0]
 8003d08:	1d1a      	adds	r2, r3, #4
 8003d0a:	600a      	str	r2, [r1, #0]
 8003d0c:	681e      	ldr	r6, [r3, #0]
 8003d0e:	6862      	ldr	r2, [r4, #4]
 8003d10:	2100      	movs	r1, #0
 8003d12:	4630      	mov	r0, r6
 8003d14:	f7fc fa5c 	bl	80001d0 <memchr>
 8003d18:	b108      	cbz	r0, 8003d1e <_printf_i+0x1f2>
 8003d1a:	1b80      	subs	r0, r0, r6
 8003d1c:	6060      	str	r0, [r4, #4]
 8003d1e:	6863      	ldr	r3, [r4, #4]
 8003d20:	6123      	str	r3, [r4, #16]
 8003d22:	2300      	movs	r3, #0
 8003d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d28:	e7a8      	b.n	8003c7c <_printf_i+0x150>
 8003d2a:	6923      	ldr	r3, [r4, #16]
 8003d2c:	4632      	mov	r2, r6
 8003d2e:	4649      	mov	r1, r9
 8003d30:	4640      	mov	r0, r8
 8003d32:	47d0      	blx	sl
 8003d34:	3001      	adds	r0, #1
 8003d36:	d0ab      	beq.n	8003c90 <_printf_i+0x164>
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	079b      	lsls	r3, r3, #30
 8003d3c:	d413      	bmi.n	8003d66 <_printf_i+0x23a>
 8003d3e:	68e0      	ldr	r0, [r4, #12]
 8003d40:	9b03      	ldr	r3, [sp, #12]
 8003d42:	4298      	cmp	r0, r3
 8003d44:	bfb8      	it	lt
 8003d46:	4618      	movlt	r0, r3
 8003d48:	e7a4      	b.n	8003c94 <_printf_i+0x168>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	4632      	mov	r2, r6
 8003d4e:	4649      	mov	r1, r9
 8003d50:	4640      	mov	r0, r8
 8003d52:	47d0      	blx	sl
 8003d54:	3001      	adds	r0, #1
 8003d56:	d09b      	beq.n	8003c90 <_printf_i+0x164>
 8003d58:	3501      	adds	r5, #1
 8003d5a:	68e3      	ldr	r3, [r4, #12]
 8003d5c:	9903      	ldr	r1, [sp, #12]
 8003d5e:	1a5b      	subs	r3, r3, r1
 8003d60:	42ab      	cmp	r3, r5
 8003d62:	dcf2      	bgt.n	8003d4a <_printf_i+0x21e>
 8003d64:	e7eb      	b.n	8003d3e <_printf_i+0x212>
 8003d66:	2500      	movs	r5, #0
 8003d68:	f104 0619 	add.w	r6, r4, #25
 8003d6c:	e7f5      	b.n	8003d5a <_printf_i+0x22e>
 8003d6e:	bf00      	nop
 8003d70:	080041c5 	.word	0x080041c5
 8003d74:	080041d6 	.word	0x080041d6

08003d78 <_sbrk_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	4d06      	ldr	r5, [pc, #24]	; (8003d94 <_sbrk_r+0x1c>)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	4604      	mov	r4, r0
 8003d80:	4608      	mov	r0, r1
 8003d82:	602b      	str	r3, [r5, #0]
 8003d84:	f7fd f8d0 	bl	8000f28 <_sbrk>
 8003d88:	1c43      	adds	r3, r0, #1
 8003d8a:	d102      	bne.n	8003d92 <_sbrk_r+0x1a>
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	b103      	cbz	r3, 8003d92 <_sbrk_r+0x1a>
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	bd38      	pop	{r3, r4, r5, pc}
 8003d94:	20000138 	.word	0x20000138

08003d98 <__sread>:
 8003d98:	b510      	push	{r4, lr}
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da0:	f000 f8a0 	bl	8003ee4 <_read_r>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	bfab      	itete	ge
 8003da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003daa:	89a3      	ldrhlt	r3, [r4, #12]
 8003dac:	181b      	addge	r3, r3, r0
 8003dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003db2:	bfac      	ite	ge
 8003db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003db6:	81a3      	strhlt	r3, [r4, #12]
 8003db8:	bd10      	pop	{r4, pc}

08003dba <__swrite>:
 8003dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dbe:	461f      	mov	r7, r3
 8003dc0:	898b      	ldrh	r3, [r1, #12]
 8003dc2:	05db      	lsls	r3, r3, #23
 8003dc4:	4605      	mov	r5, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	4616      	mov	r6, r2
 8003dca:	d505      	bpl.n	8003dd8 <__swrite+0x1e>
 8003dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f000 f868 	bl	8003ea8 <_lseek_r>
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003de2:	81a3      	strh	r3, [r4, #12]
 8003de4:	4632      	mov	r2, r6
 8003de6:	463b      	mov	r3, r7
 8003de8:	4628      	mov	r0, r5
 8003dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dee:	f000 b817 	b.w	8003e20 <_write_r>

08003df2 <__sseek>:
 8003df2:	b510      	push	{r4, lr}
 8003df4:	460c      	mov	r4, r1
 8003df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dfa:	f000 f855 	bl	8003ea8 <_lseek_r>
 8003dfe:	1c43      	adds	r3, r0, #1
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	bf15      	itete	ne
 8003e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e0e:	81a3      	strheq	r3, [r4, #12]
 8003e10:	bf18      	it	ne
 8003e12:	81a3      	strhne	r3, [r4, #12]
 8003e14:	bd10      	pop	{r4, pc}

08003e16 <__sclose>:
 8003e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1a:	f000 b813 	b.w	8003e44 <_close_r>
	...

08003e20 <_write_r>:
 8003e20:	b538      	push	{r3, r4, r5, lr}
 8003e22:	4d07      	ldr	r5, [pc, #28]	; (8003e40 <_write_r+0x20>)
 8003e24:	4604      	mov	r4, r0
 8003e26:	4608      	mov	r0, r1
 8003e28:	4611      	mov	r1, r2
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	602a      	str	r2, [r5, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f7fd f829 	bl	8000e86 <_write>
 8003e34:	1c43      	adds	r3, r0, #1
 8003e36:	d102      	bne.n	8003e3e <_write_r+0x1e>
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	b103      	cbz	r3, 8003e3e <_write_r+0x1e>
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	20000138 	.word	0x20000138

08003e44 <_close_r>:
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	4d06      	ldr	r5, [pc, #24]	; (8003e60 <_close_r+0x1c>)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	602b      	str	r3, [r5, #0]
 8003e50:	f7fd f835 	bl	8000ebe <_close>
 8003e54:	1c43      	adds	r3, r0, #1
 8003e56:	d102      	bne.n	8003e5e <_close_r+0x1a>
 8003e58:	682b      	ldr	r3, [r5, #0]
 8003e5a:	b103      	cbz	r3, 8003e5e <_close_r+0x1a>
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	bd38      	pop	{r3, r4, r5, pc}
 8003e60:	20000138 	.word	0x20000138

08003e64 <_fstat_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4d07      	ldr	r5, [pc, #28]	; (8003e84 <_fstat_r+0x20>)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	602b      	str	r3, [r5, #0]
 8003e72:	f7fd f830 	bl	8000ed6 <_fstat>
 8003e76:	1c43      	adds	r3, r0, #1
 8003e78:	d102      	bne.n	8003e80 <_fstat_r+0x1c>
 8003e7a:	682b      	ldr	r3, [r5, #0]
 8003e7c:	b103      	cbz	r3, 8003e80 <_fstat_r+0x1c>
 8003e7e:	6023      	str	r3, [r4, #0]
 8003e80:	bd38      	pop	{r3, r4, r5, pc}
 8003e82:	bf00      	nop
 8003e84:	20000138 	.word	0x20000138

08003e88 <_isatty_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	4d06      	ldr	r5, [pc, #24]	; (8003ea4 <_isatty_r+0x1c>)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	4604      	mov	r4, r0
 8003e90:	4608      	mov	r0, r1
 8003e92:	602b      	str	r3, [r5, #0]
 8003e94:	f7fd f82f 	bl	8000ef6 <_isatty>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_isatty_r+0x1a>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_isatty_r+0x1a>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	20000138 	.word	0x20000138

08003ea8 <_lseek_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	4d07      	ldr	r5, [pc, #28]	; (8003ec8 <_lseek_r+0x20>)
 8003eac:	4604      	mov	r4, r0
 8003eae:	4608      	mov	r0, r1
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	602a      	str	r2, [r5, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f7fd f828 	bl	8000f0c <_lseek>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d102      	bne.n	8003ec6 <_lseek_r+0x1e>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	b103      	cbz	r3, 8003ec6 <_lseek_r+0x1e>
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
 8003ec8:	20000138 	.word	0x20000138

08003ecc <__malloc_lock>:
 8003ecc:	4801      	ldr	r0, [pc, #4]	; (8003ed4 <__malloc_lock+0x8>)
 8003ece:	f7ff bb55 	b.w	800357c <__retarget_lock_acquire_recursive>
 8003ed2:	bf00      	nop
 8003ed4:	20000130 	.word	0x20000130

08003ed8 <__malloc_unlock>:
 8003ed8:	4801      	ldr	r0, [pc, #4]	; (8003ee0 <__malloc_unlock+0x8>)
 8003eda:	f7ff bb50 	b.w	800357e <__retarget_lock_release_recursive>
 8003ede:	bf00      	nop
 8003ee0:	20000130 	.word	0x20000130

08003ee4 <_read_r>:
 8003ee4:	b538      	push	{r3, r4, r5, lr}
 8003ee6:	4d07      	ldr	r5, [pc, #28]	; (8003f04 <_read_r+0x20>)
 8003ee8:	4604      	mov	r4, r0
 8003eea:	4608      	mov	r0, r1
 8003eec:	4611      	mov	r1, r2
 8003eee:	2200      	movs	r2, #0
 8003ef0:	602a      	str	r2, [r5, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f7fc ffaa 	bl	8000e4c <_read>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d102      	bne.n	8003f02 <_read_r+0x1e>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	b103      	cbz	r3, 8003f02 <_read_r+0x1e>
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
 8003f04:	20000138 	.word	0x20000138

08003f08 <_init>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	bf00      	nop
 8003f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0e:	bc08      	pop	{r3}
 8003f10:	469e      	mov	lr, r3
 8003f12:	4770      	bx	lr

08003f14 <_fini>:
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f16:	bf00      	nop
 8003f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1a:	bc08      	pop	{r3}
 8003f1c:	469e      	mov	lr, r3
 8003f1e:	4770      	bx	lr
