
I2C_Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e38  08004e38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e40  08004e40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e40  08004e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000011c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000018c  2000018c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122d4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000213c  00000000  00000000  00032374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  000344b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea0  00000000  00000000  000353f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223e4  00000000  00000000  00036290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011bee  00000000  00000000  00058674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce96a  00000000  00000000  0006a262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00138bcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004910  00000000  00000000  00138c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004cb8 	.word	0x08004cb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004cb8 	.word	0x08004cb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <enableOutTim4>:
static void MX_GPIO_Init(void);
static void MX_TIM4_Init(void);


void enableOutTim4(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800056c:	2100      	movs	r1, #0
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <enableOutTim4+0x28>)
 8000570:	f002 f99e 	bl	80028b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000574:	2104      	movs	r1, #4
 8000576:	4806      	ldr	r0, [pc, #24]	; (8000590 <enableOutTim4+0x28>)
 8000578:	f002 f99a 	bl	80028b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800057c:	2108      	movs	r1, #8
 800057e:	4804      	ldr	r0, [pc, #16]	; (8000590 <enableOutTim4+0x28>)
 8000580:	f002 f996 	bl	80028b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000584:	210c      	movs	r1, #12
 8000586:	4802      	ldr	r0, [pc, #8]	; (8000590 <enableOutTim4+0x28>)
 8000588:	f002 f992 	bl	80028b0 <HAL_TIM_PWM_Start>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000098 	.word	0x20000098

08000594 <disableOutTim4>:

void disableOutTim4(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000598:	2100      	movs	r1, #0
 800059a:	4808      	ldr	r0, [pc, #32]	; (80005bc <disableOutTim4+0x28>)
 800059c:	f002 fa50 	bl	8002a40 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80005a0:	2104      	movs	r1, #4
 80005a2:	4806      	ldr	r0, [pc, #24]	; (80005bc <disableOutTim4+0x28>)
 80005a4:	f002 fa4c 	bl	8002a40 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80005a8:	2108      	movs	r1, #8
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <disableOutTim4+0x28>)
 80005ac:	f002 fa48 	bl	8002a40 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 80005b0:	210c      	movs	r1, #12
 80005b2:	4802      	ldr	r0, [pc, #8]	; (80005bc <disableOutTim4+0x28>)
 80005b4:	f002 fa44 	bl	8002a40 <HAL_TIM_PWM_Stop>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000098 	.word	0x20000098

080005c0 <setDutyCycle>:

void setDutyCycle(uint16_t pwmWidth)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]
	TIM4->CCR1 = pwmWidth;
 80005ca:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <setDutyCycle+0x30>)
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	6353      	str	r3, [r2, #52]	; 0x34
	TIM4->CCR2 = pwmWidth;
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <setDutyCycle+0x30>)
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	6393      	str	r3, [r2, #56]	; 0x38
	TIM4->CCR3 = pwmWidth;
 80005d6:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <setDutyCycle+0x30>)
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	63d3      	str	r3, [r2, #60]	; 0x3c
    TIM4->CCR4 = pwmWidth;
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <setDutyCycle+0x30>)
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40000800 	.word	0x40000800

080005f4 <setPwmFrequency>:

void setPwmFrequency(uint16_t frequency)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
	TIM4->PSC = frequency;
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <setPwmFrequency+0x1c>)
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40000800 	.word	0x40000800

08000614 <enableSleepMode>:

void enableSleepMode(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000618:	2108      	movs	r1, #8
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <enableSleepMode+0x14>)
 800061c:	f002 f948 	bl	80028b0 <HAL_TIM_PWM_Start>
	HAL_SuspendTick();
 8000620:	f000 fd4e 	bl	80010c0 <HAL_SuspendTick>
	//HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000098 	.word	0x20000098

0800062c <disableSleepMode>:

void disableSleepMode(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8000630:	2108      	movs	r1, #8
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <disableSleepMode+0x14>)
 8000634:	f002 fa04 	bl	8002a40 <HAL_TIM_PWM_Stop>
	HAL_ResumeTick();
 8000638:	f000 fd52 	bl	80010e0 <HAL_ResumeTick>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000098 	.word	0x20000098

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 fca3 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f8db 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 fa27 	bl	8000aa4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000656:	f000 f935 	bl	80008c4 <MX_I2C1_Init>
  MX_TIM4_Init();
 800065a:	f000 f961 	bl	8000920 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800065e:	f000 f9f7 	bl	8000a50 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(15);
 8000662:	200f      	movs	r0, #15
 8000664:	f000 fd08 	bl	8001078 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	485b      	ldr	r0, [pc, #364]	; (80007dc <main+0x198>)
 800066e:	f000 ffc9 	bl	8001604 <HAL_GPIO_WritePin>

  uint8_t devId = 0x80;
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	75fb      	strb	r3, [r7, #23]
  uint8_t TxBuffer[8];

  TxBuffer[0] = 0x00;
 8000676:	2300      	movs	r3, #0
 8000678:	713b      	strb	r3, [r7, #4]
  TxBuffer[1] = 0x01;
 800067a:	2301      	movs	r3, #1
 800067c:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
 800067e:	7dfb      	ldrb	r3, [r7, #23]
 8000680:	b299      	uxth	r1, r3
 8000682:	1d3a      	adds	r2, r7, #4
 8000684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2302      	movs	r3, #2
 800068c:	4854      	ldr	r0, [pc, #336]	; (80007e0 <main+0x19c>)
 800068e:	f001 f917 	bl	80018c0 <HAL_I2C_Master_Transmit>

  TxBuffer[0] = 0x06;
 8000692:	2306      	movs	r3, #6
 8000694:	713b      	strb	r3, [r7, #4]
  TxBuffer[1] = 0x65;
 8000696:	2365      	movs	r3, #101	; 0x65
 8000698:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	b299      	uxth	r1, r3
 800069e:	1d3a      	adds	r2, r7, #4
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2302      	movs	r3, #2
 80006a8:	484d      	ldr	r0, [pc, #308]	; (80007e0 <main+0x19c>)
 80006aa:	f001 f909 	bl	80018c0 <HAL_I2C_Master_Transmit>

  TxBuffer[0] = 0x07;
 80006ae:	2307      	movs	r3, #7
 80006b0:	713b      	strb	r3, [r7, #4]
  TxBuffer[1] = 0x08;
 80006b2:	2308      	movs	r3, #8
 80006b4:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
 80006b8:	b299      	uxth	r1, r3
 80006ba:	1d3a      	adds	r2, r7, #4
 80006bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2302      	movs	r3, #2
 80006c4:	4846      	ldr	r0, [pc, #280]	; (80007e0 <main+0x19c>)
 80006c6:	f001 f8fb 	bl	80018c0 <HAL_I2C_Master_Transmit>

  TxBuffer[0] = 0x08;
 80006ca:	2308      	movs	r3, #8
 80006cc:	713b      	strb	r3, [r7, #4]
  TxBuffer[1] = 0xCC;
 80006ce:	23cc      	movs	r3, #204	; 0xcc
 80006d0:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
 80006d2:	7dfb      	ldrb	r3, [r7, #23]
 80006d4:	b299      	uxth	r1, r3
 80006d6:	1d3a      	adds	r2, r7, #4
 80006d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2302      	movs	r3, #2
 80006e0:	483f      	ldr	r0, [pc, #252]	; (80007e0 <main+0x19c>)
 80006e2:	f001 f8ed 	bl	80018c0 <HAL_I2C_Master_Transmit>

  TxBuffer[0] = 0x09;
 80006e6:	2309      	movs	r3, #9
 80006e8:	713b      	strb	r3, [r7, #4]
  TxBuffer[1] = 0x04;
 80006ea:	2304      	movs	r3, #4
 80006ec:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit(&hi2c1, devId, (uint8_t*) &TxBuffer, 2, 1000);
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	b299      	uxth	r1, r3
 80006f2:	1d3a      	adds	r2, r7, #4
 80006f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2302      	movs	r3, #2
 80006fc:	4838      	ldr	r0, [pc, #224]	; (80007e0 <main+0x19c>)
 80006fe:	f001 f8df 	bl	80018c0 <HAL_I2C_Master_Transmit>

  while (1)
  {
	  //enableOutTim4(&htim4);
	  uint16_t dutyCycleValueMin = 1; // 1 - low intensity, 25 - big intensity;
 8000702:	2301      	movs	r3, #1
 8000704:	82bb      	strh	r3, [r7, #20]
	  uint16_t dutyCycleValueMax = 25;
 8000706:	2319      	movs	r3, #25
 8000708:	827b      	strh	r3, [r7, #18]
	  uint16_t frequency = 1600 - 1; //freq HSE = 8 Mhz => 8 Mhz / 1600 = 5 kHz;
 800070a:	f240 633f 	movw	r3, #1599	; 0x63f
 800070e:	823b      	strh	r3, [r7, #16]

	  uint8_t rcvBuf;
	  HAL_StatusTypeDef result;

	  result = HAL_UART_Receive(&huart3, &rcvBuf, sizeof(rcvBuf), 10);
 8000710:	1cf9      	adds	r1, r7, #3
 8000712:	230a      	movs	r3, #10
 8000714:	2201      	movs	r2, #1
 8000716:	4833      	ldr	r0, [pc, #204]	; (80007e4 <main+0x1a0>)
 8000718:	f002 fff7 	bl	800370a <HAL_UART_Receive>
 800071c:	4603      	mov	r3, r0
 800071e:	73fb      	strb	r3, [r7, #15]

	  if (result == HAL_OK)
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d158      	bne.n	80007d8 <main+0x194>
	  {
		  switch (rcvBuf)
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	3b30      	subs	r3, #48	; 0x30
 800072a:	2b07      	cmp	r3, #7
 800072c:	d850      	bhi.n	80007d0 <main+0x18c>
 800072e:	a201      	add	r2, pc, #4	; (adr r2, 8000734 <main+0xf0>)
 8000730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000734:	08000761 	.word	0x08000761
 8000738:	08000755 	.word	0x08000755
 800073c:	0800076d 	.word	0x0800076d
 8000740:	08000781 	.word	0x08000781
 8000744:	08000795 	.word	0x08000795
 8000748:	080007a5 	.word	0x080007a5
 800074c:	080007b9 	.word	0x080007b9
 8000750:	080007c5 	.word	0x080007c5
		  {
		  	  case '1':
		  		  printf("All outputs enabled!\r\n");
 8000754:	4824      	ldr	r0, [pc, #144]	; (80007e8 <main+0x1a4>)
 8000756:	f003 fb69 	bl	8003e2c <puts>
		  		  enableOutTim4();
 800075a:	f7ff ff05 	bl	8000568 <enableOutTim4>
		  		  break;
 800075e:	e03c      	b.n	80007da <main+0x196>
		  	  case '0':
		  		  printf("All outputs disabled!\r\n");
 8000760:	4822      	ldr	r0, [pc, #136]	; (80007ec <main+0x1a8>)
 8000762:	f003 fb63 	bl	8003e2c <puts>
		  		  disableOutTim4();
 8000766:	f7ff ff15 	bl	8000594 <disableOutTim4>
		  		  break;
 800076a:	e036      	b.n	80007da <main+0x196>
		  	  case '2':
		  		  printf("Duty Cycle set: %d \r\n", dutyCycleValueMin);
 800076c:	8abb      	ldrh	r3, [r7, #20]
 800076e:	4619      	mov	r1, r3
 8000770:	481f      	ldr	r0, [pc, #124]	; (80007f0 <main+0x1ac>)
 8000772:	f003 fad5 	bl	8003d20 <iprintf>
				  setDutyCycle(dutyCycleValueMin);
 8000776:	8abb      	ldrh	r3, [r7, #20]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff21 	bl	80005c0 <setDutyCycle>
				  break;
 800077e:	e02c      	b.n	80007da <main+0x196>
		  	  case '3':
		  		  printf("Duty Cycle set: %d \r\n", dutyCycleValueMax);
 8000780:	8a7b      	ldrh	r3, [r7, #18]
 8000782:	4619      	mov	r1, r3
 8000784:	481a      	ldr	r0, [pc, #104]	; (80007f0 <main+0x1ac>)
 8000786:	f003 facb 	bl	8003d20 <iprintf>
		  		  setDutyCycle(dutyCycleValueMax);
 800078a:	8a7b      	ldrh	r3, [r7, #18]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff17 	bl	80005c0 <setDutyCycle>
		  		  break;
 8000792:	e022      	b.n	80007da <main+0x196>
		  	  case '4':
		  		  printf("Frequency set: 20 Hz \r\n");
 8000794:	4817      	ldr	r0, [pc, #92]	; (80007f4 <main+0x1b0>)
 8000796:	f003 fb49 	bl	8003e2c <puts>
		  		  setPwmFrequency(frequency);
 800079a:	8a3b      	ldrh	r3, [r7, #16]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff29 	bl	80005f4 <setPwmFrequency>
		  		  break;
 80007a2:	e01a      	b.n	80007da <main+0x196>
		  	  case '5':
		  		  printf("Frequency set: 5 Hz \r\n");
 80007a4:	4814      	ldr	r0, [pc, #80]	; (80007f8 <main+0x1b4>)
 80007a6:	f003 fb41 	bl	8003e2c <puts>
		  		  setPwmFrequency(frequency * 4);
 80007aa:	8a3b      	ldrh	r3, [r7, #16]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff1f 	bl	80005f4 <setPwmFrequency>
		  		  break;
 80007b6:	e010      	b.n	80007da <main+0x196>
		  	  case '6':
		  		  printf("Sleep mode enabled(\r\n");
 80007b8:	4810      	ldr	r0, [pc, #64]	; (80007fc <main+0x1b8>)
 80007ba:	f003 fb37 	bl	8003e2c <puts>
		  		  enableSleepMode();
 80007be:	f7ff ff29 	bl	8000614 <enableSleepMode>
		  		  break;
 80007c2:	e00a      	b.n	80007da <main+0x196>
		  	  case '7':
		  		  printf("Sleep mode disabled)\r\n");
 80007c4:	480e      	ldr	r0, [pc, #56]	; (8000800 <main+0x1bc>)
 80007c6:	f003 fb31 	bl	8003e2c <puts>
		  		  disableSleepMode();
 80007ca:	f7ff ff2f 	bl	800062c <disableSleepMode>
		  		  break;
 80007ce:	e004      	b.n	80007da <main+0x196>
		  	  default:
		  		  printf("Error, Sorry(\r\n");
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <main+0x1c0>)
 80007d2:	f003 fb2b 	bl	8003e2c <puts>
		  		  break;
 80007d6:	e000      	b.n	80007da <main+0x196>
		  }
	  }
 80007d8:	bf00      	nop
  {
 80007da:	e792      	b.n	8000702 <main+0xbe>
 80007dc:	40020400 	.word	0x40020400
 80007e0:	20000124 	.word	0x20000124
 80007e4:	200000e0 	.word	0x200000e0
 80007e8:	08004cd0 	.word	0x08004cd0
 80007ec:	08004ce8 	.word	0x08004ce8
 80007f0:	08004d00 	.word	0x08004d00
 80007f4:	08004d18 	.word	0x08004d18
 80007f8:	08004d30 	.word	0x08004d30
 80007fc:	08004d48 	.word	0x08004d48
 8000800:	08004d60 	.word	0x08004d60
 8000804:	08004d78 	.word	0x08004d78

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	; 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2230      	movs	r2, #48	; 0x30
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fa7a 	bl	8003d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <SystemClock_Config+0xb4>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a21      	ldr	r2, [pc, #132]	; (80008bc <SystemClock_Config+0xb4>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <SystemClock_Config+0xb4>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <SystemClock_Config+0xb8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <SystemClock_Config+0xb8>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <SystemClock_Config+0xb8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000868:	2301      	movs	r3, #1
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086c:	2310      	movs	r3, #16
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fb29 	bl	8001ed0 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000884:	f000 f962 	bl	8000b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fd8c 	bl	80023c0 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008ae:	f000 f94d 	bl	8000b4c <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	; 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_I2C1_Init+0x54>)
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <MX_I2C1_Init+0x58>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_I2C1_Init+0x54>)
 80008d0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008d4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_I2C1_Init+0x54>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_I2C1_Init+0x54>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_I2C1_Init+0x54>)
 80008e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_I2C1_Init+0x54>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_I2C1_Init+0x54>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_I2C1_Init+0x54>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_I2C1_Init+0x54>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_I2C1_Init+0x54>)
 8000904:	f000 fe98 	bl	8001638 <HAL_I2C_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800090e:	f000 f91d 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000124 	.word	0x20000124
 800091c:	40005400 	.word	0x40005400

08000920 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08e      	sub	sp, #56	; 0x38
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	f107 0320 	add.w	r3, r7, #32
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000950:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <MX_TIM4_Init+0x128>)
 8000952:	4a3e      	ldr	r2, [pc, #248]	; (8000a4c <MX_TIM4_Init+0x12c>)
 8000954:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8000956:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <MX_TIM4_Init+0x128>)
 8000958:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800095c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <MX_TIM4_Init+0x128>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000964:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <MX_TIM4_Init+0x128>)
 8000966:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800096a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <MX_TIM4_Init+0x128>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b35      	ldr	r3, [pc, #212]	; (8000a48 <MX_TIM4_Init+0x128>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000978:	4833      	ldr	r0, [pc, #204]	; (8000a48 <MX_TIM4_Init+0x128>)
 800097a:	f001 fef1 	bl	8002760 <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000984:	f000 f8e2 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800098e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000992:	4619      	mov	r1, r3
 8000994:	482c      	ldr	r0, [pc, #176]	; (8000a48 <MX_TIM4_Init+0x128>)
 8000996:	f002 f985 	bl	8002ca4 <HAL_TIM_ConfigClockSource>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80009a0:	f000 f8d4 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009a4:	4828      	ldr	r0, [pc, #160]	; (8000a48 <MX_TIM4_Init+0x128>)
 80009a6:	f001 ff2a 	bl	80027fe <HAL_TIM_PWM_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80009b0:	f000 f8cc 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	4619      	mov	r1, r3
 80009c2:	4821      	ldr	r0, [pc, #132]	; (8000a48 <MX_TIM4_Init+0x128>)
 80009c4:	f002 fd46 	bl	8003454 <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80009ce:	f000 f8bd 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d2:	2360      	movs	r3, #96	; 0x60
 80009d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80009d6:	2364      	movs	r3, #100	; 0x64
 80009d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	4619      	mov	r1, r3
 80009e8:	4817      	ldr	r0, [pc, #92]	; (8000a48 <MX_TIM4_Init+0x128>)
 80009ea:	f002 f899 	bl	8002b20 <HAL_TIM_PWM_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80009f4:	f000 f8aa 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2204      	movs	r2, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <MX_TIM4_Init+0x128>)
 8000a00:	f002 f88e 	bl	8002b20 <HAL_TIM_PWM_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000a0a:	f000 f89f 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2208      	movs	r2, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_TIM4_Init+0x128>)
 8000a16:	f002 f883 	bl	8002b20 <HAL_TIM_PWM_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000a20:	f000 f894 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	220c      	movs	r2, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_TIM4_Init+0x128>)
 8000a2c:	f002 f878 	bl	8002b20 <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000a36:	f000 f889 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_TIM4_Init+0x128>)
 8000a3c:	f000 f91e 	bl	8000c7c <HAL_TIM_MspPostInit>

}
 8000a40:	bf00      	nop
 8000a42:	3738      	adds	r7, #56	; 0x38
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000098 	.word	0x20000098
 8000a4c:	40000800 	.word	0x40000800

08000a50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_USART3_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a88:	f002 fd60 	bl	800354c <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f000 f85b 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000e0 	.word	0x200000e0
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_GPIO_Init+0x7c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <MX_GPIO_Init+0x7c>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_GPIO_Init+0x7c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_GPIO_Init+0x7c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <MX_GPIO_Init+0x7c>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_GPIO_Init+0x7c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	480b      	ldr	r0, [pc, #44]	; (8000b24 <MX_GPIO_Init+0x80>)
 8000af8:	f000 fd84 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4619      	mov	r1, r3
 8000b12:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_GPIO_Init+0x80>)
 8000b14:	f000 fbda 	bl	80012cc <HAL_GPIO_Init>

}
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020400 	.word	0x40020400

08000b28 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000b30:	1d39      	adds	r1, r7, #4
 8000b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b36:	2201      	movs	r2, #1
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <__io_putchar+0x20>)
 8000b3a:	f002 fd54 	bl	80035e6 <HAL_UART_Transmit>

  return ch;
 8000b3e:	687b      	ldr	r3, [r7, #4]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000e0 	.word	0x200000e0

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_I2C_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12c      	bne.n	8000c24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000be6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bec:	2312      	movs	r3, #18
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <HAL_I2C_MspInit+0x8c>)
 8000c04:	f000 fb62 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c16:	6413      	str	r3, [r2, #64]	; 0x40
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_I2C_MspInit+0x88>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400

08000c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <HAL_TIM_Base_MspInit+0x3c>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d10d      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_TIM_Base_MspInit+0x40>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <HAL_TIM_Base_MspInit+0x40>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <HAL_TIM_Base_MspInit+0x40>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40000800 	.word	0x40000800
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <HAL_TIM_MspPostInit+0x68>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d11e      	bne.n	8000cdc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_TIM_MspPostInit+0x6c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_TIM_MspPostInit+0x6c>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_TIM_MspPostInit+0x6c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_TIM_MspPostInit+0x70>)
 8000cd8:	f000 faf8 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40000800 	.word	0x40000800
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020c00 	.word	0x40020c00

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_UART_MspInit+0x84>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12c      	bne.n	8000d6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d68:	f000 fab0 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40004800 	.word	0x40004800
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020c00 	.word	0x40020c00

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dcc:	f000 f934 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	e00a      	b.n	8000dfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000de6:	f3af 8000 	nop.w
 8000dea:	4601      	mov	r1, r0
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	60ba      	str	r2, [r7, #8]
 8000df2:	b2ca      	uxtb	r2, r1
 8000df4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dbf0      	blt.n	8000de6 <_read+0x12>
	}

return len;
 8000e04:	687b      	ldr	r3, [r7, #4]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e009      	b.n	8000e34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	60ba      	str	r2, [r7, #8]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fe7d 	bl	8000b28 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbf1      	blt.n	8000e20 <_write+0x12>
	}
	return len;
 8000e3c:	687b      	ldr	r3, [r7, #4]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_close>:

int _close(int file)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <_isatty>:

int _isatty(int file)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
	return 1;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f002 feec 	bl	8003cbc <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20020000 	.word	0x20020000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	2000008c 	.word	0x2000008c
 8000f18:	20000190 	.word	0x20000190

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f46:	490e      	ldr	r1, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f5c:	4c0b      	ldr	r4, [pc, #44]	; (8000f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f6a:	f7ff ffd7 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f002 feab 	bl	8003cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff fb67 	bl	8000644 <main>
  bx  lr    
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f84:	08004e48 	.word	0x08004e48
  ldr r2, =_sbss
 8000f88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f8c:	2000018c 	.word	0x2000018c

08000f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_Init+0x40>)
 8000f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_Init+0x40>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_Init+0x40>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f951 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f000 f808 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fdc6 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f95b 	bl	80012b2 <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001014:	f000 f931 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000000 	.word	0x20000000
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	20000178 	.word	0x20000178

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000178 	.word	0x20000178

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffde 	bl	8001060 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008

080010c0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_SuspendTick+0x1c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_SuspendTick+0x1c>)
 80010ca:	f023 0302 	bic.w	r3, r3, #2
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_ResumeTick+0x1c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_ResumeTick+0x1c>)
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	; (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff47 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff5c 	bl	8001148 <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff8e 	bl	80011b8 <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffb0 	bl	8001220 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e16b      	b.n	80015c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 815a 	bne.w	80015ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d005      	beq.n	800131e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	2b02      	cmp	r3, #2
 800131c:	d130      	bne.n	8001380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b03      	cmp	r3, #3
 800138a:	d017      	beq.n	80013bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80b4 	beq.w	80015ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a5f      	ldr	r2, [pc, #380]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146e:	4a5b      	ldr	r2, [pc, #364]	; (80015dc <HAL_GPIO_Init+0x310>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_GPIO_Init+0x314>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d02b      	beq.n	80014f2 <HAL_GPIO_Init+0x226>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a51      	ldr	r2, [pc, #324]	; (80015e4 <HAL_GPIO_Init+0x318>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d025      	beq.n	80014ee <HAL_GPIO_Init+0x222>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <HAL_GPIO_Init+0x31c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01f      	beq.n	80014ea <HAL_GPIO_Init+0x21e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4f      	ldr	r2, [pc, #316]	; (80015ec <HAL_GPIO_Init+0x320>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x21a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4e      	ldr	r2, [pc, #312]	; (80015f0 <HAL_GPIO_Init+0x324>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x216>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4d      	ldr	r2, [pc, #308]	; (80015f4 <HAL_GPIO_Init+0x328>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x212>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4c      	ldr	r2, [pc, #304]	; (80015f8 <HAL_GPIO_Init+0x32c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x20e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4b      	ldr	r2, [pc, #300]	; (80015fc <HAL_GPIO_Init+0x330>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x20a>
 80014d2:	2307      	movs	r3, #7
 80014d4:	e00e      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014d6:	2308      	movs	r3, #8
 80014d8:	e00c      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014da:	2306      	movs	r3, #6
 80014dc:	e00a      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014de:	2305      	movs	r3, #5
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014f2:	2300      	movs	r3, #0
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001504:	4935      	ldr	r1, [pc, #212]	; (80015dc <HAL_GPIO_Init+0x310>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001536:	4a32      	ldr	r2, [pc, #200]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_GPIO_Init+0x334>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001560:	4a27      	ldr	r2, [pc, #156]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158a:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_GPIO_Init+0x334>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_GPIO_Init+0x334>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	f67f ae90 	bls.w	80012e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40021400 	.word	0x40021400
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40021c00 	.word	0x40021c00
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e12b      	b.n	80018a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff faa2 	bl	8000ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2224      	movs	r2, #36	; 0x24
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800168a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800169a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800169c:	f001 f838 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 80016a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a81      	ldr	r2, [pc, #516]	; (80018ac <HAL_I2C_Init+0x274>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d807      	bhi.n	80016bc <HAL_I2C_Init+0x84>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4a80      	ldr	r2, [pc, #512]	; (80018b0 <HAL_I2C_Init+0x278>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	bf94      	ite	ls
 80016b4:	2301      	movls	r3, #1
 80016b6:	2300      	movhi	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	e006      	b.n	80016ca <HAL_I2C_Init+0x92>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a7d      	ldr	r2, [pc, #500]	; (80018b4 <HAL_I2C_Init+0x27c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bf94      	ite	ls
 80016c4:	2301      	movls	r3, #1
 80016c6:	2300      	movhi	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0e7      	b.n	80018a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4a78      	ldr	r2, [pc, #480]	; (80018b8 <HAL_I2C_Init+0x280>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0c9b      	lsrs	r3, r3, #18
 80016dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a6a      	ldr	r2, [pc, #424]	; (80018ac <HAL_I2C_Init+0x274>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d802      	bhi.n	800170c <HAL_I2C_Init+0xd4>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3301      	adds	r3, #1
 800170a:	e009      	b.n	8001720 <HAL_I2C_Init+0xe8>
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	4a69      	ldr	r2, [pc, #420]	; (80018bc <HAL_I2C_Init+0x284>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	3301      	adds	r3, #1
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	430b      	orrs	r3, r1
 8001726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001732:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	495c      	ldr	r1, [pc, #368]	; (80018ac <HAL_I2C_Init+0x274>)
 800173c:	428b      	cmp	r3, r1
 800173e:	d819      	bhi.n	8001774 <HAL_I2C_Init+0x13c>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e59      	subs	r1, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fbb1 f3f3 	udiv	r3, r1, r3
 800174e:	1c59      	adds	r1, r3, #1
 8001750:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001754:	400b      	ands	r3, r1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <HAL_I2C_Init+0x138>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1e59      	subs	r1, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fbb1 f3f3 	udiv	r3, r1, r3
 8001768:	3301      	adds	r3, #1
 800176a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176e:	e051      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 8001770:	2304      	movs	r3, #4
 8001772:	e04f      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d111      	bne.n	80017a0 <HAL_I2C_Init+0x168>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1e58      	subs	r0, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	440b      	add	r3, r1
 800178a:	fbb0 f3f3 	udiv	r3, r0, r3
 800178e:	3301      	adds	r3, #1
 8001790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	e012      	b.n	80017c6 <HAL_I2C_Init+0x18e>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1e58      	subs	r0, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	0099      	lsls	r1, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b6:	3301      	adds	r3, #1
 80017b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Init+0x196>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e022      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10e      	bne.n	80017f4 <HAL_I2C_Init+0x1bc>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1e58      	subs	r0, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6859      	ldr	r1, [r3, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	440b      	add	r3, r1
 80017e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f2:	e00f      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e58      	subs	r0, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	0099      	lsls	r1, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	6809      	ldr	r1, [r1, #0]
 8001818:	4313      	orrs	r3, r2
 800181a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6911      	ldr	r1, [r2, #16]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68d2      	ldr	r2, [r2, #12]
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	430b      	orrs	r3, r1
 8001856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	000186a0 	.word	0x000186a0
 80018b0:	001e847f 	.word	0x001e847f
 80018b4:	003d08ff 	.word	0x003d08ff
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	10624dd3 	.word	0x10624dd3

080018c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	461a      	mov	r2, r3
 80018cc:	460b      	mov	r3, r1
 80018ce:	817b      	strh	r3, [r7, #10]
 80018d0:	4613      	mov	r3, r2
 80018d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff fbc4 	bl	8001060 <HAL_GetTick>
 80018d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	f040 80e0 	bne.w	8001aa8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2319      	movs	r3, #25
 80018ee:	2201      	movs	r2, #1
 80018f0:	4970      	ldr	r1, [pc, #448]	; (8001ab4 <HAL_I2C_Master_Transmit+0x1f4>)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f964 	bl	8001bc0 <I2C_WaitOnFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018fe:	2302      	movs	r3, #2
 8001900:	e0d3      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_I2C_Master_Transmit+0x50>
 800190c:	2302      	movs	r3, #2
 800190e:	e0cc      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d007      	beq.n	8001936 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001944:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2221      	movs	r2, #33	; 0x21
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2210      	movs	r2, #16
 8001952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	893a      	ldrh	r2, [r7, #8]
 8001966:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4a50      	ldr	r2, [pc, #320]	; (8001ab8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001978:	8979      	ldrh	r1, [r7, #10]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	6a3a      	ldr	r2, [r7, #32]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f89c 	bl	8001abc <I2C_MasterRequestWrite>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e08d      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019a4:	e066      	b.n	8001a74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	6a39      	ldr	r1, [r7, #32]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f9de 	bl	8001d6c <I2C_WaitOnTXEFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00d      	beq.n	80019d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d107      	bne.n	80019ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06b      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d11b      	bne.n	8001a48 <HAL_I2C_Master_Transmit+0x188>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d017      	beq.n	8001a48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	6a39      	ldr	r1, [r7, #32]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 f9ce 	bl	8001dee <I2C_WaitOnBTFFlagUntilTimeout>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00d      	beq.n	8001a74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d107      	bne.n	8001a70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e01a      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d194      	bne.n	80019a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e000      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001aa8:	2302      	movs	r3, #2
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	00100002 	.word	0x00100002
 8001ab8:	ffff0000 	.word	0xffff0000

08001abc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d006      	beq.n	8001ae6 <I2C_MasterRequestWrite+0x2a>
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d003      	beq.n	8001ae6 <I2C_MasterRequestWrite+0x2a>
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ae4:	d108      	bne.n	8001af8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e00b      	b.n	8001b10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	2b12      	cmp	r3, #18
 8001afe:	d107      	bne.n	8001b10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f84f 	bl	8001bc0 <I2C_WaitOnFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00d      	beq.n	8001b44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b36:	d103      	bne.n	8001b40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e035      	b.n	8001bb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b4c:	d108      	bne.n	8001b60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b4e:	897b      	ldrh	r3, [r7, #10]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b5c:	611a      	str	r2, [r3, #16]
 8001b5e:	e01b      	b.n	8001b98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b60:	897b      	ldrh	r3, [r7, #10]
 8001b62:	11db      	asrs	r3, r3, #7
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f003 0306 	and.w	r3, r3, #6
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f063 030f 	orn	r3, r3, #15
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <I2C_MasterRequestWrite+0xfc>)
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f875 	bl	8001c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e010      	b.n	8001bb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b8e:	897b      	ldrh	r3, [r7, #10]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4907      	ldr	r1, [pc, #28]	; (8001bbc <I2C_MasterRequestWrite+0x100>)
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f865 	bl	8001c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	00010008 	.word	0x00010008
 8001bbc:	00010002 	.word	0x00010002

08001bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bd0:	e025      	b.n	8001c1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bd8:	d021      	beq.n	8001c1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bda:	f7ff fa41 	bl	8001060 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d302      	bcc.n	8001bf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d116      	bne.n	8001c1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f043 0220 	orr.w	r2, r3, #32
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e023      	b.n	8001c66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10d      	bne.n	8001c44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4013      	ands	r3, r2
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf0c      	ite	eq
 8001c3a:	2301      	moveq	r3, #1
 8001c3c:	2300      	movne	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	e00c      	b.n	8001c5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d0b6      	beq.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c7c:	e051      	b.n	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8c:	d123      	bne.n	8001cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ca6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f043 0204 	orr.w	r2, r3, #4
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e046      	b.n	8001d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cdc:	d021      	beq.n	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cde:	f7ff f9bf 	bl	8001060 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d302      	bcc.n	8001cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d116      	bne.n	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f043 0220 	orr.w	r2, r3, #32
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e020      	b.n	8001d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	0c1b      	lsrs	r3, r3, #16
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d10c      	bne.n	8001d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4013      	ands	r3, r2
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	e00b      	b.n	8001d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	4013      	ands	r3, r2
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf14      	ite	ne
 8001d58:	2301      	movne	r3, #1
 8001d5a:	2300      	moveq	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d18d      	bne.n	8001c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d78:	e02d      	b.n	8001dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f878 	bl	8001e70 <I2C_IsAcknowledgeFailed>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e02d      	b.n	8001de6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d90:	d021      	beq.n	8001dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d92:	f7ff f965 	bl	8001060 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d302      	bcc.n	8001da8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d116      	bne.n	8001dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f043 0220 	orr.w	r2, r3, #32
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e007      	b.n	8001de6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d1ca      	bne.n	8001d7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dfa:	e02d      	b.n	8001e58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f837 	bl	8001e70 <I2C_IsAcknowledgeFailed>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e02d      	b.n	8001e68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e12:	d021      	beq.n	8001e58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e14:	f7ff f924 	bl	8001060 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d302      	bcc.n	8001e2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f043 0220 	orr.w	r2, r3, #32
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e007      	b.n	8001e68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d1ca      	bne.n	8001dfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e86:	d11b      	bne.n	8001ec0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f043 0204 	orr.w	r2, r3, #4
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e264      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d075      	beq.n	8001fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eee:	4ba3      	ldr	r3, [pc, #652]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d00c      	beq.n	8001f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efa:	4ba0      	ldr	r3, [pc, #640]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d112      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f06:	4b9d      	ldr	r3, [pc, #628]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	4b99      	ldr	r3, [pc, #612]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d05b      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x108>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d157      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e23f      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x74>
 8001f36:	4b91      	ldr	r3, [pc, #580]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a90      	ldr	r2, [pc, #576]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e01d      	b.n	8001f80 <HAL_RCC_OscConfig+0xb0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x98>
 8001f4e:	4b8b      	ldr	r3, [pc, #556]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a8a      	ldr	r2, [pc, #552]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b88      	ldr	r3, [pc, #544]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a87      	ldr	r2, [pc, #540]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e00b      	b.n	8001f80 <HAL_RCC_OscConfig+0xb0>
 8001f68:	4b84      	ldr	r3, [pc, #528]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a83      	ldr	r2, [pc, #524]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b81      	ldr	r3, [pc, #516]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a80      	ldr	r2, [pc, #512]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff f86a 	bl	8001060 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff f866 	bl	8001060 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e204      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0xc0>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f856 	bl	8001060 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff f852 	bl	8001060 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1f0      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	4b6c      	ldr	r3, [pc, #432]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0xe8>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d063      	beq.n	80020ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe6:	4b65      	ldr	r3, [pc, #404]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff2:	4b62      	ldr	r3, [pc, #392]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d11c      	bne.n	8002038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b5f      	ldr	r3, [pc, #380]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d116      	bne.n	8002038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	4b5c      	ldr	r3, [pc, #368]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_RCC_OscConfig+0x152>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e1c4      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b56      	ldr	r3, [pc, #344]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4952      	ldr	r1, [pc, #328]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	e03a      	b.n	80020ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002040:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_RCC_OscConfig+0x2b0>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff f80b 	bl	8001060 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff f807 	bl	8001060 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1a5      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206c:	4b43      	ldr	r3, [pc, #268]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4940      	ldr	r1, [pc, #256]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	e015      	b.n	80020ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002082:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <HAL_RCC_OscConfig+0x2b0>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe ffea 	bl	8001060 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002090:	f7fe ffe6 	bl	8001060 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e184      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d030      	beq.n	800211c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c2:	4b30      	ldr	r3, [pc, #192]	; (8002184 <HAL_RCC_OscConfig+0x2b4>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe ffca 	bl	8001060 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d0:	f7fe ffc6 	bl	8001060 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e164      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x200>
 80020ee:	e015      	b.n	800211c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_RCC_OscConfig+0x2b4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7fe ffb3 	bl	8001060 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fe:	f7fe ffaf 	bl	8001060 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e14d      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a0 	beq.w	800226a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10f      	bne.n	800215a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a0e      	ldr	r2, [pc, #56]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002156:	2301      	movs	r3, #1
 8002158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_OscConfig+0x2b8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d121      	bne.n	80021aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_RCC_OscConfig+0x2b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_RCC_OscConfig+0x2b8>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002172:	f7fe ff75 	bl	8001060 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	e011      	b.n	800219e <HAL_RCC_OscConfig+0x2ce>
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	42470000 	.word	0x42470000
 8002184:	42470e80 	.word	0x42470e80
 8002188:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7fe ff68 	bl	8001060 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e106      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b85      	ldr	r3, [pc, #532]	; (80023b4 <HAL_RCC_OscConfig+0x4e4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d106      	bne.n	80021c0 <HAL_RCC_OscConfig+0x2f0>
 80021b2:	4b81      	ldr	r3, [pc, #516]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a80      	ldr	r2, [pc, #512]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
 80021be:	e01c      	b.n	80021fa <HAL_RCC_OscConfig+0x32a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	d10c      	bne.n	80021e2 <HAL_RCC_OscConfig+0x312>
 80021c8:	4b7b      	ldr	r3, [pc, #492]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	4a7a      	ldr	r2, [pc, #488]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6713      	str	r3, [r2, #112]	; 0x70
 80021d4:	4b78      	ldr	r3, [pc, #480]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a77      	ldr	r2, [pc, #476]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6713      	str	r3, [r2, #112]	; 0x70
 80021e0:	e00b      	b.n	80021fa <HAL_RCC_OscConfig+0x32a>
 80021e2:	4b75      	ldr	r3, [pc, #468]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	4a74      	ldr	r2, [pc, #464]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6713      	str	r3, [r2, #112]	; 0x70
 80021ee:	4b72      	ldr	r3, [pc, #456]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a71      	ldr	r2, [pc, #452]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021f4:	f023 0304 	bic.w	r3, r3, #4
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d015      	beq.n	800222e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7fe ff2d 	bl	8001060 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe ff29 	bl	8001060 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0c5      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0ee      	beq.n	800220a <HAL_RCC_OscConfig+0x33a>
 800222c:	e014      	b.n	8002258 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7fe ff17 	bl	8001060 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7fe ff13 	bl	8001060 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0af      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	4b5a      	ldr	r3, [pc, #360]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ee      	bne.n	8002236 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4b56      	ldr	r3, [pc, #344]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a55      	ldr	r2, [pc, #340]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 8002264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 809b 	beq.w	80023aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002274:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d05c      	beq.n	800233a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d141      	bne.n	800230c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002288:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <HAL_RCC_OscConfig+0x4ec>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe fee7 	bl	8001060 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe fee3 	bl	8001060 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e081      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a8:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	019b      	lsls	r3, r3, #6
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	085b      	lsrs	r3, r3, #1
 80022cc:	3b01      	subs	r3, #1
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	061b      	lsls	r3, r3, #24
 80022d8:	4937      	ldr	r1, [pc, #220]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022de:	4b37      	ldr	r3, [pc, #220]	; (80023bc <HAL_RCC_OscConfig+0x4ec>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe febc 	bl	8001060 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ec:	f7fe feb8 	bl	8001060 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e056      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fe:	4b2e      	ldr	r3, [pc, #184]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x41c>
 800230a:	e04e      	b.n	80023aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_RCC_OscConfig+0x4ec>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7fe fea5 	bl	8001060 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231a:	f7fe fea1 	bl	8001060 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e03f      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x44a>
 8002338:	e037      	b.n	80023aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e032      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d028      	beq.n	80023a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d121      	bne.n	80023a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d11a      	bne.n	80023a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002376:	4013      	ands	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800237c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800237e:	4293      	cmp	r3, r2
 8002380:	d111      	bne.n	80023a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	085b      	lsrs	r3, r3, #1
 800238e:	3b01      	subs	r3, #1
 8002390:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40007000 	.word	0x40007000
 80023b8:	40023800 	.word	0x40023800
 80023bc:	42470060 	.word	0x42470060

080023c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0cc      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b68      	ldr	r3, [pc, #416]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d90c      	bls.n	80023fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b65      	ldr	r3, [pc, #404]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0b8      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002414:	4b59      	ldr	r3, [pc, #356]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a58      	ldr	r2, [pc, #352]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800241e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800242c:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a52      	ldr	r2, [pc, #328]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	494d      	ldr	r1, [pc, #308]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d044      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d119      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e07f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d003      	beq.n	800247e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800247a:	2b03      	cmp	r3, #3
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247e:	4b3f      	ldr	r3, [pc, #252]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e06f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e067      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249e:	4b37      	ldr	r3, [pc, #220]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 0203 	bic.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4934      	ldr	r1, [pc, #208]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b0:	f7fe fdd6 	bl	8001060 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b8:	f7fe fdd2 	bl	8001060 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e04f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 020c 	and.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1eb      	bne.n	80024b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	4b25      	ldr	r3, [pc, #148]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d20c      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e032      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4916      	ldr	r1, [pc, #88]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	490e      	ldr	r1, [pc, #56]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002546:	f000 f821 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800254a:	4602      	mov	r2, r0
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	490a      	ldr	r1, [pc, #40]	; (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	5ccb      	ldrb	r3, [r1, r3]
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fd36 	bl	8000fd8 <HAL_InitTick>

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023c00 	.word	0x40023c00
 800257c:	40023800 	.word	0x40023800
 8002580:	08004d88 	.word	0x08004d88
 8002584:	20000000 	.word	0x20000000
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	b5b0      	push	{r4, r5, r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002592:	2100      	movs	r1, #0
 8002594:	6079      	str	r1, [r7, #4]
 8002596:	2100      	movs	r1, #0
 8002598:	60f9      	str	r1, [r7, #12]
 800259a:	2100      	movs	r1, #0
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800259e:	2100      	movs	r1, #0
 80025a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025a2:	4952      	ldr	r1, [pc, #328]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 80025a4:	6889      	ldr	r1, [r1, #8]
 80025a6:	f001 010c 	and.w	r1, r1, #12
 80025aa:	2908      	cmp	r1, #8
 80025ac:	d00d      	beq.n	80025ca <HAL_RCC_GetSysClockFreq+0x3e>
 80025ae:	2908      	cmp	r1, #8
 80025b0:	f200 8094 	bhi.w	80026dc <HAL_RCC_GetSysClockFreq+0x150>
 80025b4:	2900      	cmp	r1, #0
 80025b6:	d002      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x32>
 80025b8:	2904      	cmp	r1, #4
 80025ba:	d003      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x38>
 80025bc:	e08e      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80025c0:	60bb      	str	r3, [r7, #8]
       break;
 80025c2:	e08e      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025c4:	4b4b      	ldr	r3, [pc, #300]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80025c6:	60bb      	str	r3, [r7, #8]
      break;
 80025c8:	e08b      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ca:	4948      	ldr	r1, [pc, #288]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 80025cc:	6849      	ldr	r1, [r1, #4]
 80025ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80025d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d4:	4945      	ldr	r1, [pc, #276]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 80025d6:	6849      	ldr	r1, [r1, #4]
 80025d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80025dc:	2900      	cmp	r1, #0
 80025de:	d024      	beq.n	800262a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e0:	4942      	ldr	r1, [pc, #264]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 80025e2:	6849      	ldr	r1, [r1, #4]
 80025e4:	0989      	lsrs	r1, r1, #6
 80025e6:	4608      	mov	r0, r1
 80025e8:	f04f 0100 	mov.w	r1, #0
 80025ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80025f0:	f04f 0500 	mov.w	r5, #0
 80025f4:	ea00 0204 	and.w	r2, r0, r4
 80025f8:	ea01 0305 	and.w	r3, r1, r5
 80025fc:	493d      	ldr	r1, [pc, #244]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80025fe:	fb01 f003 	mul.w	r0, r1, r3
 8002602:	2100      	movs	r1, #0
 8002604:	fb01 f102 	mul.w	r1, r1, r2
 8002608:	1844      	adds	r4, r0, r1
 800260a:	493a      	ldr	r1, [pc, #232]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800260c:	fba2 0101 	umull	r0, r1, r2, r1
 8002610:	1863      	adds	r3, r4, r1
 8002612:	4619      	mov	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	461a      	mov	r2, r3
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	f7fd fe28 	bl	8000270 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e04a      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262a:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	099b      	lsrs	r3, r3, #6
 8002630:	461a      	mov	r2, r3
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	f240 10ff 	movw	r0, #511	; 0x1ff
 800263a:	f04f 0100 	mov.w	r1, #0
 800263e:	ea02 0400 	and.w	r4, r2, r0
 8002642:	ea03 0501 	and.w	r5, r3, r1
 8002646:	4620      	mov	r0, r4
 8002648:	4629      	mov	r1, r5
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	014b      	lsls	r3, r1, #5
 8002654:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002658:	0142      	lsls	r2, r0, #5
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	1b00      	subs	r0, r0, r4
 8002660:	eb61 0105 	sbc.w	r1, r1, r5
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	018b      	lsls	r3, r1, #6
 800266e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002672:	0182      	lsls	r2, r0, #6
 8002674:	1a12      	subs	r2, r2, r0
 8002676:	eb63 0301 	sbc.w	r3, r3, r1
 800267a:	f04f 0000 	mov.w	r0, #0
 800267e:	f04f 0100 	mov.w	r1, #0
 8002682:	00d9      	lsls	r1, r3, #3
 8002684:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002688:	00d0      	lsls	r0, r2, #3
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	1912      	adds	r2, r2, r4
 8002690:	eb45 0303 	adc.w	r3, r5, r3
 8002694:	f04f 0000 	mov.w	r0, #0
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	0299      	lsls	r1, r3, #10
 800269e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026a2:	0290      	lsls	r0, r2, #10
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	f7fd fddc 	bl	8000270 <__aeabi_uldivmod>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4613      	mov	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	0c1b      	lsrs	r3, r3, #16
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	3301      	adds	r3, #1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	60bb      	str	r3, [r7, #8]
      break;
 80026da:	e002      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80026de:	60bb      	str	r3, [r7, #8]
      break;
 80026e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e2:	68bb      	ldr	r3, [r7, #8]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bdb0      	pop	{r4, r5, r7, pc}
 80026ec:	40023800 	.word	0x40023800
 80026f0:	00f42400 	.word	0x00f42400
 80026f4:	017d7840 	.word	0x017d7840

080026f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_RCC_GetHCLKFreq+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000000 	.word	0x20000000

08002710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002714:	f7ff fff0 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0a9b      	lsrs	r3, r3, #10
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	08004d98 	.word	0x08004d98

08002738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800273c:	f7ff ffdc 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0b5b      	lsrs	r3, r3, #13
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4903      	ldr	r1, [pc, #12]	; (800275c <HAL_RCC_GetPCLK2Freq+0x24>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	08004d98 	.word	0x08004d98

08002760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e041      	b.n	80027f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fa56 	bl	8000c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f000 fb48 	bl	8002e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e041      	b.n	8002894 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d106      	bne.n	800282a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f839 	bl	800289c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2202      	movs	r2, #2
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	4619      	mov	r1, r3
 800283c:	4610      	mov	r0, r2
 800283e:	f000 faf9 	bl	8002e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_TIM_PWM_Start+0x24>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e022      	b.n	800291a <HAL_TIM_PWM_Start+0x6a>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d109      	bne.n	80028ee <HAL_TIM_PWM_Start+0x3e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	e015      	b.n	800291a <HAL_TIM_PWM_Start+0x6a>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d109      	bne.n	8002908 <HAL_TIM_PWM_Start+0x58>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	e008      	b.n	800291a <HAL_TIM_PWM_Start+0x6a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e07c      	b.n	8002a1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d104      	bne.n	8002932 <HAL_TIM_PWM_Start+0x82>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002930:	e013      	b.n	800295a <HAL_TIM_PWM_Start+0xaa>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d104      	bne.n	8002942 <HAL_TIM_PWM_Start+0x92>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002940:	e00b      	b.n	800295a <HAL_TIM_PWM_Start+0xaa>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d104      	bne.n	8002952 <HAL_TIM_PWM_Start+0xa2>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002950:	e003      	b.n	800295a <HAL_TIM_PWM_Start+0xaa>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2202      	movs	r2, #2
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2201      	movs	r2, #1
 8002960:	6839      	ldr	r1, [r7, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fd50 	bl	8003408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2d      	ldr	r2, [pc, #180]	; (8002a24 <HAL_TIM_PWM_Start+0x174>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_TIM_PWM_Start+0xcc>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2c      	ldr	r2, [pc, #176]	; (8002a28 <HAL_TIM_PWM_Start+0x178>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_TIM_PWM_Start+0xd0>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_TIM_PWM_Start+0xd2>
 8002980:	2300      	movs	r3, #0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <HAL_TIM_PWM_Start+0x174>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x136>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a8:	d01d      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x136>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_TIM_PWM_Start+0x17c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d018      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x136>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <HAL_TIM_PWM_Start+0x180>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x136>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_TIM_PWM_Start+0x184>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00e      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x136>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_TIM_PWM_Start+0x178>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x136>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <HAL_TIM_PWM_Start+0x188>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d004      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x136>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a16      	ldr	r2, [pc, #88]	; (8002a3c <HAL_TIM_PWM_Start+0x18c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d111      	bne.n	8002a0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d010      	beq.n	8002a1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	e007      	b.n	8002a1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40010000 	.word	0x40010000
 8002a28:	40010400 	.word	0x40010400
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40000800 	.word	0x40000800
 8002a34:	40000c00 	.word	0x40000c00
 8002a38:	40014000 	.word	0x40014000
 8002a3c:	40001800 	.word	0x40001800

08002a40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fcd8 	bl	8003408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2e      	ldr	r2, [pc, #184]	; (8002b18 <HAL_TIM_PWM_Stop+0xd8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_TIM_PWM_Stop+0x2c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2d      	ldr	r2, [pc, #180]	; (8002b1c <HAL_TIM_PWM_Stop+0xdc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d101      	bne.n	8002a70 <HAL_TIM_PWM_Stop+0x30>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_TIM_PWM_Stop+0x32>
 8002a70:	2300      	movs	r3, #0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d017      	beq.n	8002aa6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a1a      	ldr	r2, [r3, #32]
 8002a7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <HAL_TIM_PWM_Stop+0x66>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	f240 4344 	movw	r3, #1092	; 0x444
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d107      	bne.n	8002aa6 <HAL_TIM_PWM_Stop+0x66>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a1a      	ldr	r2, [r3, #32]
 8002aac:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_TIM_PWM_Stop+0x96>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	f240 4344 	movw	r3, #1092	; 0x444
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d107      	bne.n	8002ad6 <HAL_TIM_PWM_Stop+0x96>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Stop+0xa6>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae4:	e013      	b.n	8002b0e <HAL_TIM_PWM_Stop+0xce>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d104      	bne.n	8002af6 <HAL_TIM_PWM_Stop+0xb6>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af4:	e00b      	b.n	8002b0e <HAL_TIM_PWM_Stop+0xce>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d104      	bne.n	8002b06 <HAL_TIM_PWM_Stop+0xc6>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b04:	e003      	b.n	8002b0e <HAL_TIM_PWM_Stop+0xce>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40010000 	.word	0x40010000
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e0ae      	b.n	8002c9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b0c      	cmp	r3, #12
 8002b4a:	f200 809f 	bhi.w	8002c8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b4e:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	08002b89 	.word	0x08002b89
 8002b58:	08002c8d 	.word	0x08002c8d
 8002b5c:	08002c8d 	.word	0x08002c8d
 8002b60:	08002c8d 	.word	0x08002c8d
 8002b64:	08002bc9 	.word	0x08002bc9
 8002b68:	08002c8d 	.word	0x08002c8d
 8002b6c:	08002c8d 	.word	0x08002c8d
 8002b70:	08002c8d 	.word	0x08002c8d
 8002b74:	08002c0b 	.word	0x08002c0b
 8002b78:	08002c8d 	.word	0x08002c8d
 8002b7c:	08002c8d 	.word	0x08002c8d
 8002b80:	08002c8d 	.word	0x08002c8d
 8002b84:	08002c4b 	.word	0x08002c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f9f0 	bl	8002f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0208 	orr.w	r2, r2, #8
 8002ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0204 	bic.w	r2, r2, #4
 8002bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6999      	ldr	r1, [r3, #24]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	619a      	str	r2, [r3, #24]
      break;
 8002bc6:	e064      	b.n	8002c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fa40 	bl	8003054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6999      	ldr	r1, [r3, #24]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	021a      	lsls	r2, r3, #8
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	619a      	str	r2, [r3, #24]
      break;
 8002c08:	e043      	b.n	8002c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fa95 	bl	8003140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0208 	orr.w	r2, r2, #8
 8002c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0204 	bic.w	r2, r2, #4
 8002c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69d9      	ldr	r1, [r3, #28]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	61da      	str	r2, [r3, #28]
      break;
 8002c48:	e023      	b.n	8002c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fae9 	bl	8003228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69d9      	ldr	r1, [r3, #28]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	021a      	lsls	r2, r3, #8
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	61da      	str	r2, [r3, #28]
      break;
 8002c8a:	e002      	b.n	8002c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0b4      	b.n	8002e2a <HAL_TIM_ConfigClockSource+0x186>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf8:	d03e      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0xd4>
 8002cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfe:	f200 8087 	bhi.w	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d06:	f000 8086 	beq.w	8002e16 <HAL_TIM_ConfigClockSource+0x172>
 8002d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0e:	d87f      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d10:	2b70      	cmp	r3, #112	; 0x70
 8002d12:	d01a      	beq.n	8002d4a <HAL_TIM_ConfigClockSource+0xa6>
 8002d14:	2b70      	cmp	r3, #112	; 0x70
 8002d16:	d87b      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d18:	2b60      	cmp	r3, #96	; 0x60
 8002d1a:	d050      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x11a>
 8002d1c:	2b60      	cmp	r3, #96	; 0x60
 8002d1e:	d877      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d20:	2b50      	cmp	r3, #80	; 0x50
 8002d22:	d03c      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0xfa>
 8002d24:	2b50      	cmp	r3, #80	; 0x50
 8002d26:	d873      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d058      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x13a>
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d86f      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b30      	cmp	r3, #48	; 0x30
 8002d32:	d064      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x15a>
 8002d34:	2b30      	cmp	r3, #48	; 0x30
 8002d36:	d86b      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d060      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x15a>
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d867      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d05c      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x15a>
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d05a      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x15a>
 8002d48:	e062      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6899      	ldr	r1, [r3, #8]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f000 fb35 	bl	80033c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	609a      	str	r2, [r3, #8]
      break;
 8002d76:	e04f      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6899      	ldr	r1, [r3, #8]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f000 fb1e 	bl	80033c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d9a:	609a      	str	r2, [r3, #8]
      break;
 8002d9c:	e03c      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f000 fa92 	bl	80032d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2150      	movs	r1, #80	; 0x50
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 faeb 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8002dbc:	e02c      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f000 fab1 	bl	8003332 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2160      	movs	r1, #96	; 0x60
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fadb 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8002ddc:	e01c      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f000 fa72 	bl	80032d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2140      	movs	r1, #64	; 0x40
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 facb 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8002dfc:	e00c      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f000 fac2 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8002e0e:	e003      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
      break;
 8002e14:	e000      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a40      	ldr	r2, [pc, #256]	; (8002f48 <TIM_Base_SetConfig+0x114>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e52:	d00f      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a3d      	ldr	r2, [pc, #244]	; (8002f4c <TIM_Base_SetConfig+0x118>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00b      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a3c      	ldr	r2, [pc, #240]	; (8002f50 <TIM_Base_SetConfig+0x11c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3b      	ldr	r2, [pc, #236]	; (8002f54 <TIM_Base_SetConfig+0x120>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3a      	ldr	r2, [pc, #232]	; (8002f58 <TIM_Base_SetConfig+0x124>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d108      	bne.n	8002e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a2f      	ldr	r2, [pc, #188]	; (8002f48 <TIM_Base_SetConfig+0x114>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d02b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d027      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <TIM_Base_SetConfig+0x118>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d023      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a2b      	ldr	r2, [pc, #172]	; (8002f50 <TIM_Base_SetConfig+0x11c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01f      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <TIM_Base_SetConfig+0x120>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a29      	ldr	r2, [pc, #164]	; (8002f58 <TIM_Base_SetConfig+0x124>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d017      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <TIM_Base_SetConfig+0x128>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <TIM_Base_SetConfig+0x12c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00f      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <TIM_Base_SetConfig+0x130>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <TIM_Base_SetConfig+0x134>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a24      	ldr	r2, [pc, #144]	; (8002f6c <TIM_Base_SetConfig+0x138>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <TIM_Base_SetConfig+0x13c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <TIM_Base_SetConfig+0x114>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_Base_SetConfig+0xf8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <TIM_Base_SetConfig+0x124>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d103      	bne.n	8002f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	615a      	str	r2, [r3, #20]
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800
 8002f68:	40001800 	.word	0x40001800
 8002f6c:	40001c00 	.word	0x40001c00
 8002f70:	40002000 	.word	0x40002000

08002f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f023 0201 	bic.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f023 0302 	bic.w	r3, r3, #2
 8002fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a20      	ldr	r2, [pc, #128]	; (800304c <TIM_OC1_SetConfig+0xd8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <TIM_OC1_SetConfig+0x64>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <TIM_OC1_SetConfig+0xdc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10c      	bne.n	8002ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 0308 	bic.w	r3, r3, #8
 8002fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a15      	ldr	r2, [pc, #84]	; (800304c <TIM_OC1_SetConfig+0xd8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d003      	beq.n	8003002 <TIM_OC1_SetConfig+0x8e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <TIM_OC1_SetConfig+0xdc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d111      	bne.n	8003026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	621a      	str	r2, [r3, #32]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40010000 	.word	0x40010000
 8003050:	40010400 	.word	0x40010400

08003054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0210 	bic.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0320 	bic.w	r3, r3, #32
 800309e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a22      	ldr	r2, [pc, #136]	; (8003138 <TIM_OC2_SetConfig+0xe4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d003      	beq.n	80030bc <TIM_OC2_SetConfig+0x68>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a21      	ldr	r2, [pc, #132]	; (800313c <TIM_OC2_SetConfig+0xe8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d10d      	bne.n	80030d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a17      	ldr	r2, [pc, #92]	; (8003138 <TIM_OC2_SetConfig+0xe4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_OC2_SetConfig+0x94>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a16      	ldr	r2, [pc, #88]	; (800313c <TIM_OC2_SetConfig+0xe8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d113      	bne.n	8003110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40010400 	.word	0x40010400

08003140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a21      	ldr	r2, [pc, #132]	; (8003220 <TIM_OC3_SetConfig+0xe0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_OC3_SetConfig+0x66>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a20      	ldr	r2, [pc, #128]	; (8003224 <TIM_OC3_SetConfig+0xe4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d10d      	bne.n	80031c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a16      	ldr	r2, [pc, #88]	; (8003220 <TIM_OC3_SetConfig+0xe0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_OC3_SetConfig+0x92>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a15      	ldr	r2, [pc, #84]	; (8003224 <TIM_OC3_SetConfig+0xe4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d113      	bne.n	80031fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	621a      	str	r2, [r3, #32]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40010000 	.word	0x40010000
 8003224:	40010400 	.word	0x40010400

08003228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	031b      	lsls	r3, r3, #12
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a12      	ldr	r2, [pc, #72]	; (80032cc <TIM_OC4_SetConfig+0xa4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_OC4_SetConfig+0x68>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <TIM_OC4_SetConfig+0xa8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d109      	bne.n	80032a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40010400 	.word	0x40010400

080032d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 0201 	bic.w	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 030a 	bic.w	r3, r3, #10
 8003310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	621a      	str	r2, [r3, #32]
}
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003332:	b480      	push	{r7}
 8003334:	b087      	sub	sp, #28
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f023 0210 	bic.w	r2, r3, #16
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800335c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	031b      	lsls	r3, r3, #12
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800336e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f043 0307 	orr.w	r3, r3, #7
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	021a      	lsls	r2, r3, #8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	609a      	str	r2, [r3, #8]
}
 80033fc:	bf00      	nop
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	2201      	movs	r2, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a1a      	ldr	r2, [r3, #32]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	43db      	mvns	r3, r3
 800342a:	401a      	ands	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1a      	ldr	r2, [r3, #32]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	fa01 f303 	lsl.w	r3, r1, r3
 8003440:	431a      	orrs	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	621a      	str	r2, [r3, #32]
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003468:	2302      	movs	r3, #2
 800346a:	e05a      	b.n	8003522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a21      	ldr	r2, [pc, #132]	; (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d022      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b8:	d01d      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d018      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1a      	ldr	r2, [pc, #104]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00e      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a18      	ldr	r2, [pc, #96]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a17      	ldr	r2, [pc, #92]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a15      	ldr	r2, [pc, #84]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10c      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	4313      	orrs	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40010000 	.word	0x40010000
 8003534:	40000400 	.word	0x40000400
 8003538:	40000800 	.word	0x40000800
 800353c:	40000c00 	.word	0x40000c00
 8003540:	40010400 	.word	0x40010400
 8003544:	40014000 	.word	0x40014000
 8003548:	40001800 	.word	0x40001800

0800354c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e03f      	b.n	80035de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd fbbc 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2224      	movs	r2, #36	; 0x24
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800358e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f9cb 	bl	800392c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b08a      	sub	sp, #40	; 0x28
 80035ea:	af02      	add	r7, sp, #8
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	4613      	mov	r3, r2
 80035f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b20      	cmp	r3, #32
 8003604:	d17c      	bne.n	8003700 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_UART_Transmit+0x2c>
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e075      	b.n	8003702 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_UART_Transmit+0x3e>
 8003620:	2302      	movs	r3, #2
 8003622:	e06e      	b.n	8003702 <HAL_UART_Transmit+0x11c>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2221      	movs	r2, #33	; 0x21
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800363a:	f7fd fd11 	bl	8001060 <HAL_GetTick>
 800363e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	88fa      	ldrh	r2, [r7, #6]
 800364a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003654:	d108      	bne.n	8003668 <HAL_UART_Transmit+0x82>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e003      	b.n	8003670 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003678:	e02a      	b.n	80036d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2200      	movs	r2, #0
 8003682:	2180      	movs	r1, #128	; 0x80
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f8e2 	bl	800384e <UART_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e036      	b.n	8003702 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10b      	bne.n	80036b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	3302      	adds	r3, #2
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	e007      	b.n	80036c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	3301      	adds	r3, #1
 80036c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1cf      	bne.n	800367a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2200      	movs	r2, #0
 80036e2:	2140      	movs	r1, #64	; 0x40
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f8b2 	bl	800384e <UART_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e006      	b.n	8003702 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e000      	b.n	8003702 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003700:	2302      	movs	r3, #2
  }
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b08a      	sub	sp, #40	; 0x28
 800370e:	af02      	add	r7, sp, #8
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	4613      	mov	r3, r2
 8003718:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b20      	cmp	r3, #32
 8003728:	f040 808c 	bne.w	8003844 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_UART_Receive+0x2e>
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e084      	b.n	8003846 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_UART_Receive+0x40>
 8003746:	2302      	movs	r3, #2
 8003748:	e07d      	b.n	8003846 <HAL_UART_Receive+0x13c>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2222      	movs	r2, #34	; 0x22
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003766:	f7fd fc7b 	bl	8001060 <HAL_GetTick>
 800376a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	88fa      	ldrh	r2, [r7, #6]
 8003776:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003780:	d108      	bne.n	8003794 <HAL_UART_Receive+0x8a>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d104      	bne.n	8003794 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	e003      	b.n	800379c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80037a4:	e043      	b.n	800382e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2200      	movs	r2, #0
 80037ae:	2120      	movs	r1, #32
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f84c 	bl	800384e <UART_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e042      	b.n	8003846 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10c      	bne.n	80037e0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	3302      	adds	r3, #2
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	e01f      	b.n	8003820 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e8:	d007      	beq.n	80037fa <HAL_UART_Receive+0xf0>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <HAL_UART_Receive+0xfe>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e008      	b.n	800381a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003814:	b2da      	uxtb	r2, r3
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3301      	adds	r3, #1
 800381e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1b6      	bne.n	80037a6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003844:	2302      	movs	r3, #2
  }
}
 8003846:	4618      	mov	r0, r3
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b090      	sub	sp, #64	; 0x40
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	4613      	mov	r3, r2
 800385c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385e:	e050      	b.n	8003902 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003866:	d04c      	beq.n	8003902 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <UART_WaitOnFlagUntilTimeout+0x30>
 800386e:	f7fd fbf7 	bl	8001060 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800387a:	429a      	cmp	r2, r3
 800387c:	d241      	bcs.n	8003902 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	330c      	adds	r3, #12
 8003884:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	330c      	adds	r3, #12
 800389c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800389e:	637a      	str	r2, [r7, #52]	; 0x34
 80038a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e5      	bne.n	800387e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3314      	adds	r3, #20
 80038b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	613b      	str	r3, [r7, #16]
   return(result);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3314      	adds	r3, #20
 80038d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d2:	623a      	str	r2, [r7, #32]
 80038d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d6:	69f9      	ldr	r1, [r7, #28]
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	e841 2300 	strex	r3, r2, [r1]
 80038de:	61bb      	str	r3, [r7, #24]
   return(result);
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1e5      	bne.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e00f      	b.n	8003922 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4013      	ands	r3, r2
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	429a      	cmp	r2, r3
 8003910:	bf0c      	ite	eq
 8003912:	2301      	moveq	r3, #1
 8003914:	2300      	movne	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	429a      	cmp	r2, r3
 800391e:	d09f      	beq.n	8003860 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3740      	adds	r7, #64	; 0x40
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	b09f      	sub	sp, #124	; 0x7c
 8003932:	af00      	add	r7, sp, #0
 8003934:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003942:	68d9      	ldr	r1, [r3, #12]
 8003944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	ea40 0301 	orr.w	r3, r0, r1
 800394c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800394e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	431a      	orrs	r2, r3
 8003958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	431a      	orrs	r2, r3
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4313      	orrs	r3, r2
 8003964:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003970:	f021 010c 	bic.w	r1, r1, #12
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800397a:	430b      	orrs	r3, r1
 800397c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800397e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398a:	6999      	ldr	r1, [r3, #24]
 800398c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	ea40 0301 	orr.w	r3, r0, r1
 8003994:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4bc5      	ldr	r3, [pc, #788]	; (8003cb0 <UART_SetConfig+0x384>)
 800399c:	429a      	cmp	r2, r3
 800399e:	d004      	beq.n	80039aa <UART_SetConfig+0x7e>
 80039a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4bc3      	ldr	r3, [pc, #780]	; (8003cb4 <UART_SetConfig+0x388>)
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d103      	bne.n	80039b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039aa:	f7fe fec5 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 80039ae:	6778      	str	r0, [r7, #116]	; 0x74
 80039b0:	e002      	b.n	80039b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039b2:	f7fe fead 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 80039b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c0:	f040 80b6 	bne.w	8003b30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c6:	461c      	mov	r4, r3
 80039c8:	f04f 0500 	mov.w	r5, #0
 80039cc:	4622      	mov	r2, r4
 80039ce:	462b      	mov	r3, r5
 80039d0:	1891      	adds	r1, r2, r2
 80039d2:	6439      	str	r1, [r7, #64]	; 0x40
 80039d4:	415b      	adcs	r3, r3
 80039d6:	647b      	str	r3, [r7, #68]	; 0x44
 80039d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039dc:	1912      	adds	r2, r2, r4
 80039de:	eb45 0303 	adc.w	r3, r5, r3
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	00d9      	lsls	r1, r3, #3
 80039ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039f0:	00d0      	lsls	r0, r2, #3
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	1911      	adds	r1, r2, r4
 80039f8:	6639      	str	r1, [r7, #96]	; 0x60
 80039fa:	416b      	adcs	r3, r5
 80039fc:	667b      	str	r3, [r7, #100]	; 0x64
 80039fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	1891      	adds	r1, r2, r2
 8003a0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a0c:	415b      	adcs	r3, r3
 8003a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a18:	f7fc fc2a 	bl	8000270 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4ba5      	ldr	r3, [pc, #660]	; (8003cb8 <UART_SetConfig+0x38c>)
 8003a22:	fba3 2302 	umull	r2, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	011e      	lsls	r6, r3, #4
 8003a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a2c:	461c      	mov	r4, r3
 8003a2e:	f04f 0500 	mov.w	r5, #0
 8003a32:	4622      	mov	r2, r4
 8003a34:	462b      	mov	r3, r5
 8003a36:	1891      	adds	r1, r2, r2
 8003a38:	6339      	str	r1, [r7, #48]	; 0x30
 8003a3a:	415b      	adcs	r3, r3
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a42:	1912      	adds	r2, r2, r4
 8003a44:	eb45 0303 	adc.w	r3, r5, r3
 8003a48:	f04f 0000 	mov.w	r0, #0
 8003a4c:	f04f 0100 	mov.w	r1, #0
 8003a50:	00d9      	lsls	r1, r3, #3
 8003a52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a56:	00d0      	lsls	r0, r2, #3
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	1911      	adds	r1, r2, r4
 8003a5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a60:	416b      	adcs	r3, r5
 8003a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	1891      	adds	r1, r2, r2
 8003a70:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a72:	415b      	adcs	r3, r3
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a7e:	f7fc fbf7 	bl	8000270 <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4b8c      	ldr	r3, [pc, #560]	; (8003cb8 <UART_SetConfig+0x38c>)
 8003a88:	fba3 1302 	umull	r1, r3, r3, r2
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	2164      	movs	r1, #100	; 0x64
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	3332      	adds	r3, #50	; 0x32
 8003a9a:	4a87      	ldr	r2, [pc, #540]	; (8003cb8 <UART_SetConfig+0x38c>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003aa8:	441e      	add	r6, r3
 8003aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aac:	4618      	mov	r0, r3
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	1894      	adds	r4, r2, r2
 8003ab8:	623c      	str	r4, [r7, #32]
 8003aba:	415b      	adcs	r3, r3
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
 8003abe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ac2:	1812      	adds	r2, r2, r0
 8003ac4:	eb41 0303 	adc.w	r3, r1, r3
 8003ac8:	f04f 0400 	mov.w	r4, #0
 8003acc:	f04f 0500 	mov.w	r5, #0
 8003ad0:	00dd      	lsls	r5, r3, #3
 8003ad2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ad6:	00d4      	lsls	r4, r2, #3
 8003ad8:	4622      	mov	r2, r4
 8003ada:	462b      	mov	r3, r5
 8003adc:	1814      	adds	r4, r2, r0
 8003ade:	653c      	str	r4, [r7, #80]	; 0x50
 8003ae0:	414b      	adcs	r3, r1
 8003ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	1891      	adds	r1, r2, r2
 8003af0:	61b9      	str	r1, [r7, #24]
 8003af2:	415b      	adcs	r3, r3
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003afa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003afe:	f7fc fbb7 	bl	8000270 <__aeabi_uldivmod>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4b6c      	ldr	r3, [pc, #432]	; (8003cb8 <UART_SetConfig+0x38c>)
 8003b08:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	2164      	movs	r1, #100	; 0x64
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	3332      	adds	r3, #50	; 0x32
 8003b1a:	4a67      	ldr	r2, [pc, #412]	; (8003cb8 <UART_SetConfig+0x38c>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	f003 0207 	and.w	r2, r3, #7
 8003b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4432      	add	r2, r6
 8003b2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b2e:	e0b9      	b.n	8003ca4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b32:	461c      	mov	r4, r3
 8003b34:	f04f 0500 	mov.w	r5, #0
 8003b38:	4622      	mov	r2, r4
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	1891      	adds	r1, r2, r2
 8003b3e:	6139      	str	r1, [r7, #16]
 8003b40:	415b      	adcs	r3, r3
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b48:	1912      	adds	r2, r2, r4
 8003b4a:	eb45 0303 	adc.w	r3, r5, r3
 8003b4e:	f04f 0000 	mov.w	r0, #0
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	00d9      	lsls	r1, r3, #3
 8003b58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b5c:	00d0      	lsls	r0, r2, #3
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	eb12 0804 	adds.w	r8, r2, r4
 8003b66:	eb43 0905 	adc.w	r9, r3, r5
 8003b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	008b      	lsls	r3, r1, #2
 8003b7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b82:	0082      	lsls	r2, r0, #2
 8003b84:	4640      	mov	r0, r8
 8003b86:	4649      	mov	r1, r9
 8003b88:	f7fc fb72 	bl	8000270 <__aeabi_uldivmod>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4b49      	ldr	r3, [pc, #292]	; (8003cb8 <UART_SetConfig+0x38c>)
 8003b92:	fba3 2302 	umull	r2, r3, r3, r2
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	011e      	lsls	r6, r3, #4
 8003b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	1894      	adds	r4, r2, r2
 8003ba8:	60bc      	str	r4, [r7, #8]
 8003baa:	415b      	adcs	r3, r3
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bb2:	1812      	adds	r2, r2, r0
 8003bb4:	eb41 0303 	adc.w	r3, r1, r3
 8003bb8:	f04f 0400 	mov.w	r4, #0
 8003bbc:	f04f 0500 	mov.w	r5, #0
 8003bc0:	00dd      	lsls	r5, r3, #3
 8003bc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bc6:	00d4      	lsls	r4, r2, #3
 8003bc8:	4622      	mov	r2, r4
 8003bca:	462b      	mov	r3, r5
 8003bcc:	1814      	adds	r4, r2, r0
 8003bce:	64bc      	str	r4, [r7, #72]	; 0x48
 8003bd0:	414b      	adcs	r3, r1
 8003bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	008b      	lsls	r3, r1, #2
 8003be8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bec:	0082      	lsls	r2, r0, #2
 8003bee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003bf2:	f7fc fb3d 	bl	8000270 <__aeabi_uldivmod>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4b2f      	ldr	r3, [pc, #188]	; (8003cb8 <UART_SetConfig+0x38c>)
 8003bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	2164      	movs	r1, #100	; 0x64
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	3332      	adds	r3, #50	; 0x32
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <UART_SetConfig+0x38c>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c1a:	441e      	add	r6, r3
 8003c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	1894      	adds	r4, r2, r2
 8003c2a:	603c      	str	r4, [r7, #0]
 8003c2c:	415b      	adcs	r3, r3
 8003c2e:	607b      	str	r3, [r7, #4]
 8003c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c34:	1812      	adds	r2, r2, r0
 8003c36:	eb41 0303 	adc.w	r3, r1, r3
 8003c3a:	f04f 0400 	mov.w	r4, #0
 8003c3e:	f04f 0500 	mov.w	r5, #0
 8003c42:	00dd      	lsls	r5, r3, #3
 8003c44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c48:	00d4      	lsls	r4, r2, #3
 8003c4a:	4622      	mov	r2, r4
 8003c4c:	462b      	mov	r3, r5
 8003c4e:	eb12 0a00 	adds.w	sl, r2, r0
 8003c52:	eb43 0b01 	adc.w	fp, r3, r1
 8003c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	008b      	lsls	r3, r1, #2
 8003c6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c6e:	0082      	lsls	r2, r0, #2
 8003c70:	4650      	mov	r0, sl
 8003c72:	4659      	mov	r1, fp
 8003c74:	f7fc fafc 	bl	8000270 <__aeabi_uldivmod>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <UART_SetConfig+0x38c>)
 8003c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2164      	movs	r1, #100	; 0x64
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	3332      	adds	r3, #50	; 0x32
 8003c90:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <UART_SetConfig+0x38c>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	f003 020f 	and.w	r2, r3, #15
 8003c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4432      	add	r2, r6
 8003ca2:	609a      	str	r2, [r3, #8]
}
 8003ca4:	bf00      	nop
 8003ca6:	377c      	adds	r7, #124	; 0x7c
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cae:	bf00      	nop
 8003cb0:	40011000 	.word	0x40011000
 8003cb4:	40011400 	.word	0x40011400
 8003cb8:	51eb851f 	.word	0x51eb851f

08003cbc <__errno>:
 8003cbc:	4b01      	ldr	r3, [pc, #4]	; (8003cc4 <__errno+0x8>)
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	2000000c 	.word	0x2000000c

08003cc8 <__libc_init_array>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	4d0d      	ldr	r5, [pc, #52]	; (8003d00 <__libc_init_array+0x38>)
 8003ccc:	4c0d      	ldr	r4, [pc, #52]	; (8003d04 <__libc_init_array+0x3c>)
 8003cce:	1b64      	subs	r4, r4, r5
 8003cd0:	10a4      	asrs	r4, r4, #2
 8003cd2:	2600      	movs	r6, #0
 8003cd4:	42a6      	cmp	r6, r4
 8003cd6:	d109      	bne.n	8003cec <__libc_init_array+0x24>
 8003cd8:	4d0b      	ldr	r5, [pc, #44]	; (8003d08 <__libc_init_array+0x40>)
 8003cda:	4c0c      	ldr	r4, [pc, #48]	; (8003d0c <__libc_init_array+0x44>)
 8003cdc:	f000 ffec 	bl	8004cb8 <_init>
 8003ce0:	1b64      	subs	r4, r4, r5
 8003ce2:	10a4      	asrs	r4, r4, #2
 8003ce4:	2600      	movs	r6, #0
 8003ce6:	42a6      	cmp	r6, r4
 8003ce8:	d105      	bne.n	8003cf6 <__libc_init_array+0x2e>
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
 8003cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf0:	4798      	blx	r3
 8003cf2:	3601      	adds	r6, #1
 8003cf4:	e7ee      	b.n	8003cd4 <__libc_init_array+0xc>
 8003cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfa:	4798      	blx	r3
 8003cfc:	3601      	adds	r6, #1
 8003cfe:	e7f2      	b.n	8003ce6 <__libc_init_array+0x1e>
 8003d00:	08004e40 	.word	0x08004e40
 8003d04:	08004e40 	.word	0x08004e40
 8003d08:	08004e40 	.word	0x08004e40
 8003d0c:	08004e44 	.word	0x08004e44

08003d10 <memset>:
 8003d10:	4402      	add	r2, r0
 8003d12:	4603      	mov	r3, r0
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d100      	bne.n	8003d1a <memset+0xa>
 8003d18:	4770      	bx	lr
 8003d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1e:	e7f9      	b.n	8003d14 <memset+0x4>

08003d20 <iprintf>:
 8003d20:	b40f      	push	{r0, r1, r2, r3}
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <iprintf+0x2c>)
 8003d24:	b513      	push	{r0, r1, r4, lr}
 8003d26:	681c      	ldr	r4, [r3, #0]
 8003d28:	b124      	cbz	r4, 8003d34 <iprintf+0x14>
 8003d2a:	69a3      	ldr	r3, [r4, #24]
 8003d2c:	b913      	cbnz	r3, 8003d34 <iprintf+0x14>
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f000 fa5e 	bl	80041f0 <__sinit>
 8003d34:	ab05      	add	r3, sp, #20
 8003d36:	9a04      	ldr	r2, [sp, #16]
 8003d38:	68a1      	ldr	r1, [r4, #8]
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f000 fc2f 	bl	80045a0 <_vfiprintf_r>
 8003d42:	b002      	add	sp, #8
 8003d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d48:	b004      	add	sp, #16
 8003d4a:	4770      	bx	lr
 8003d4c:	2000000c 	.word	0x2000000c

08003d50 <_puts_r>:
 8003d50:	b570      	push	{r4, r5, r6, lr}
 8003d52:	460e      	mov	r6, r1
 8003d54:	4605      	mov	r5, r0
 8003d56:	b118      	cbz	r0, 8003d60 <_puts_r+0x10>
 8003d58:	6983      	ldr	r3, [r0, #24]
 8003d5a:	b90b      	cbnz	r3, 8003d60 <_puts_r+0x10>
 8003d5c:	f000 fa48 	bl	80041f0 <__sinit>
 8003d60:	69ab      	ldr	r3, [r5, #24]
 8003d62:	68ac      	ldr	r4, [r5, #8]
 8003d64:	b913      	cbnz	r3, 8003d6c <_puts_r+0x1c>
 8003d66:	4628      	mov	r0, r5
 8003d68:	f000 fa42 	bl	80041f0 <__sinit>
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	; (8003e20 <_puts_r+0xd0>)
 8003d6e:	429c      	cmp	r4, r3
 8003d70:	d120      	bne.n	8003db4 <_puts_r+0x64>
 8003d72:	686c      	ldr	r4, [r5, #4]
 8003d74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d76:	07db      	lsls	r3, r3, #31
 8003d78:	d405      	bmi.n	8003d86 <_puts_r+0x36>
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	0598      	lsls	r0, r3, #22
 8003d7e:	d402      	bmi.n	8003d86 <_puts_r+0x36>
 8003d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d82:	f000 fad3 	bl	800432c <__retarget_lock_acquire_recursive>
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	0719      	lsls	r1, r3, #28
 8003d8a:	d51d      	bpl.n	8003dc8 <_puts_r+0x78>
 8003d8c:	6923      	ldr	r3, [r4, #16]
 8003d8e:	b1db      	cbz	r3, 8003dc8 <_puts_r+0x78>
 8003d90:	3e01      	subs	r6, #1
 8003d92:	68a3      	ldr	r3, [r4, #8]
 8003d94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	60a3      	str	r3, [r4, #8]
 8003d9c:	bb39      	cbnz	r1, 8003dee <_puts_r+0x9e>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	da38      	bge.n	8003e14 <_puts_r+0xc4>
 8003da2:	4622      	mov	r2, r4
 8003da4:	210a      	movs	r1, #10
 8003da6:	4628      	mov	r0, r5
 8003da8:	f000 f848 	bl	8003e3c <__swbuf_r>
 8003dac:	3001      	adds	r0, #1
 8003dae:	d011      	beq.n	8003dd4 <_puts_r+0x84>
 8003db0:	250a      	movs	r5, #10
 8003db2:	e011      	b.n	8003dd8 <_puts_r+0x88>
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <_puts_r+0xd4>)
 8003db6:	429c      	cmp	r4, r3
 8003db8:	d101      	bne.n	8003dbe <_puts_r+0x6e>
 8003dba:	68ac      	ldr	r4, [r5, #8]
 8003dbc:	e7da      	b.n	8003d74 <_puts_r+0x24>
 8003dbe:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <_puts_r+0xd8>)
 8003dc0:	429c      	cmp	r4, r3
 8003dc2:	bf08      	it	eq
 8003dc4:	68ec      	ldreq	r4, [r5, #12]
 8003dc6:	e7d5      	b.n	8003d74 <_puts_r+0x24>
 8003dc8:	4621      	mov	r1, r4
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f000 f888 	bl	8003ee0 <__swsetup_r>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d0dd      	beq.n	8003d90 <_puts_r+0x40>
 8003dd4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003dd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dda:	07da      	lsls	r2, r3, #31
 8003ddc:	d405      	bmi.n	8003dea <_puts_r+0x9a>
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	059b      	lsls	r3, r3, #22
 8003de2:	d402      	bmi.n	8003dea <_puts_r+0x9a>
 8003de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003de6:	f000 faa2 	bl	800432e <__retarget_lock_release_recursive>
 8003dea:	4628      	mov	r0, r5
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da04      	bge.n	8003dfc <_puts_r+0xac>
 8003df2:	69a2      	ldr	r2, [r4, #24]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	dc06      	bgt.n	8003e06 <_puts_r+0xb6>
 8003df8:	290a      	cmp	r1, #10
 8003dfa:	d004      	beq.n	8003e06 <_puts_r+0xb6>
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	6022      	str	r2, [r4, #0]
 8003e02:	7019      	strb	r1, [r3, #0]
 8003e04:	e7c5      	b.n	8003d92 <_puts_r+0x42>
 8003e06:	4622      	mov	r2, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	f000 f817 	bl	8003e3c <__swbuf_r>
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d1bf      	bne.n	8003d92 <_puts_r+0x42>
 8003e12:	e7df      	b.n	8003dd4 <_puts_r+0x84>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	250a      	movs	r5, #10
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	6022      	str	r2, [r4, #0]
 8003e1c:	701d      	strb	r5, [r3, #0]
 8003e1e:	e7db      	b.n	8003dd8 <_puts_r+0x88>
 8003e20:	08004dc4 	.word	0x08004dc4
 8003e24:	08004de4 	.word	0x08004de4
 8003e28:	08004da4 	.word	0x08004da4

08003e2c <puts>:
 8003e2c:	4b02      	ldr	r3, [pc, #8]	; (8003e38 <puts+0xc>)
 8003e2e:	4601      	mov	r1, r0
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	f7ff bf8d 	b.w	8003d50 <_puts_r>
 8003e36:	bf00      	nop
 8003e38:	2000000c 	.word	0x2000000c

08003e3c <__swbuf_r>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	460e      	mov	r6, r1
 8003e40:	4614      	mov	r4, r2
 8003e42:	4605      	mov	r5, r0
 8003e44:	b118      	cbz	r0, 8003e4e <__swbuf_r+0x12>
 8003e46:	6983      	ldr	r3, [r0, #24]
 8003e48:	b90b      	cbnz	r3, 8003e4e <__swbuf_r+0x12>
 8003e4a:	f000 f9d1 	bl	80041f0 <__sinit>
 8003e4e:	4b21      	ldr	r3, [pc, #132]	; (8003ed4 <__swbuf_r+0x98>)
 8003e50:	429c      	cmp	r4, r3
 8003e52:	d12b      	bne.n	8003eac <__swbuf_r+0x70>
 8003e54:	686c      	ldr	r4, [r5, #4]
 8003e56:	69a3      	ldr	r3, [r4, #24]
 8003e58:	60a3      	str	r3, [r4, #8]
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	071a      	lsls	r2, r3, #28
 8003e5e:	d52f      	bpl.n	8003ec0 <__swbuf_r+0x84>
 8003e60:	6923      	ldr	r3, [r4, #16]
 8003e62:	b36b      	cbz	r3, 8003ec0 <__swbuf_r+0x84>
 8003e64:	6923      	ldr	r3, [r4, #16]
 8003e66:	6820      	ldr	r0, [r4, #0]
 8003e68:	1ac0      	subs	r0, r0, r3
 8003e6a:	6963      	ldr	r3, [r4, #20]
 8003e6c:	b2f6      	uxtb	r6, r6
 8003e6e:	4283      	cmp	r3, r0
 8003e70:	4637      	mov	r7, r6
 8003e72:	dc04      	bgt.n	8003e7e <__swbuf_r+0x42>
 8003e74:	4621      	mov	r1, r4
 8003e76:	4628      	mov	r0, r5
 8003e78:	f000 f926 	bl	80040c8 <_fflush_r>
 8003e7c:	bb30      	cbnz	r0, 8003ecc <__swbuf_r+0x90>
 8003e7e:	68a3      	ldr	r3, [r4, #8]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	60a3      	str	r3, [r4, #8]
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	6022      	str	r2, [r4, #0]
 8003e8a:	701e      	strb	r6, [r3, #0]
 8003e8c:	6963      	ldr	r3, [r4, #20]
 8003e8e:	3001      	adds	r0, #1
 8003e90:	4283      	cmp	r3, r0
 8003e92:	d004      	beq.n	8003e9e <__swbuf_r+0x62>
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	07db      	lsls	r3, r3, #31
 8003e98:	d506      	bpl.n	8003ea8 <__swbuf_r+0x6c>
 8003e9a:	2e0a      	cmp	r6, #10
 8003e9c:	d104      	bne.n	8003ea8 <__swbuf_r+0x6c>
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f000 f911 	bl	80040c8 <_fflush_r>
 8003ea6:	b988      	cbnz	r0, 8003ecc <__swbuf_r+0x90>
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eac:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <__swbuf_r+0x9c>)
 8003eae:	429c      	cmp	r4, r3
 8003eb0:	d101      	bne.n	8003eb6 <__swbuf_r+0x7a>
 8003eb2:	68ac      	ldr	r4, [r5, #8]
 8003eb4:	e7cf      	b.n	8003e56 <__swbuf_r+0x1a>
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <__swbuf_r+0xa0>)
 8003eb8:	429c      	cmp	r4, r3
 8003eba:	bf08      	it	eq
 8003ebc:	68ec      	ldreq	r4, [r5, #12]
 8003ebe:	e7ca      	b.n	8003e56 <__swbuf_r+0x1a>
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f000 f80c 	bl	8003ee0 <__swsetup_r>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d0cb      	beq.n	8003e64 <__swbuf_r+0x28>
 8003ecc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003ed0:	e7ea      	b.n	8003ea8 <__swbuf_r+0x6c>
 8003ed2:	bf00      	nop
 8003ed4:	08004dc4 	.word	0x08004dc4
 8003ed8:	08004de4 	.word	0x08004de4
 8003edc:	08004da4 	.word	0x08004da4

08003ee0 <__swsetup_r>:
 8003ee0:	4b32      	ldr	r3, [pc, #200]	; (8003fac <__swsetup_r+0xcc>)
 8003ee2:	b570      	push	{r4, r5, r6, lr}
 8003ee4:	681d      	ldr	r5, [r3, #0]
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	460c      	mov	r4, r1
 8003eea:	b125      	cbz	r5, 8003ef6 <__swsetup_r+0x16>
 8003eec:	69ab      	ldr	r3, [r5, #24]
 8003eee:	b913      	cbnz	r3, 8003ef6 <__swsetup_r+0x16>
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f000 f97d 	bl	80041f0 <__sinit>
 8003ef6:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <__swsetup_r+0xd0>)
 8003ef8:	429c      	cmp	r4, r3
 8003efa:	d10f      	bne.n	8003f1c <__swsetup_r+0x3c>
 8003efc:	686c      	ldr	r4, [r5, #4]
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f04:	0719      	lsls	r1, r3, #28
 8003f06:	d42c      	bmi.n	8003f62 <__swsetup_r+0x82>
 8003f08:	06dd      	lsls	r5, r3, #27
 8003f0a:	d411      	bmi.n	8003f30 <__swsetup_r+0x50>
 8003f0c:	2309      	movs	r3, #9
 8003f0e:	6033      	str	r3, [r6, #0]
 8003f10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f14:	81a3      	strh	r3, [r4, #12]
 8003f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f1a:	e03e      	b.n	8003f9a <__swsetup_r+0xba>
 8003f1c:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <__swsetup_r+0xd4>)
 8003f1e:	429c      	cmp	r4, r3
 8003f20:	d101      	bne.n	8003f26 <__swsetup_r+0x46>
 8003f22:	68ac      	ldr	r4, [r5, #8]
 8003f24:	e7eb      	b.n	8003efe <__swsetup_r+0x1e>
 8003f26:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <__swsetup_r+0xd8>)
 8003f28:	429c      	cmp	r4, r3
 8003f2a:	bf08      	it	eq
 8003f2c:	68ec      	ldreq	r4, [r5, #12]
 8003f2e:	e7e6      	b.n	8003efe <__swsetup_r+0x1e>
 8003f30:	0758      	lsls	r0, r3, #29
 8003f32:	d512      	bpl.n	8003f5a <__swsetup_r+0x7a>
 8003f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f36:	b141      	cbz	r1, 8003f4a <__swsetup_r+0x6a>
 8003f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f3c:	4299      	cmp	r1, r3
 8003f3e:	d002      	beq.n	8003f46 <__swsetup_r+0x66>
 8003f40:	4630      	mov	r0, r6
 8003f42:	f000 fa59 	bl	80043f8 <_free_r>
 8003f46:	2300      	movs	r3, #0
 8003f48:	6363      	str	r3, [r4, #52]	; 0x34
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f50:	81a3      	strh	r3, [r4, #12]
 8003f52:	2300      	movs	r3, #0
 8003f54:	6063      	str	r3, [r4, #4]
 8003f56:	6923      	ldr	r3, [r4, #16]
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	f043 0308 	orr.w	r3, r3, #8
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	6923      	ldr	r3, [r4, #16]
 8003f64:	b94b      	cbnz	r3, 8003f7a <__swsetup_r+0x9a>
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f70:	d003      	beq.n	8003f7a <__swsetup_r+0x9a>
 8003f72:	4621      	mov	r1, r4
 8003f74:	4630      	mov	r0, r6
 8003f76:	f000 f9ff 	bl	8004378 <__smakebuf_r>
 8003f7a:	89a0      	ldrh	r0, [r4, #12]
 8003f7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f80:	f010 0301 	ands.w	r3, r0, #1
 8003f84:	d00a      	beq.n	8003f9c <__swsetup_r+0xbc>
 8003f86:	2300      	movs	r3, #0
 8003f88:	60a3      	str	r3, [r4, #8]
 8003f8a:	6963      	ldr	r3, [r4, #20]
 8003f8c:	425b      	negs	r3, r3
 8003f8e:	61a3      	str	r3, [r4, #24]
 8003f90:	6923      	ldr	r3, [r4, #16]
 8003f92:	b943      	cbnz	r3, 8003fa6 <__swsetup_r+0xc6>
 8003f94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f98:	d1ba      	bne.n	8003f10 <__swsetup_r+0x30>
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	0781      	lsls	r1, r0, #30
 8003f9e:	bf58      	it	pl
 8003fa0:	6963      	ldrpl	r3, [r4, #20]
 8003fa2:	60a3      	str	r3, [r4, #8]
 8003fa4:	e7f4      	b.n	8003f90 <__swsetup_r+0xb0>
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	e7f7      	b.n	8003f9a <__swsetup_r+0xba>
 8003faa:	bf00      	nop
 8003fac:	2000000c 	.word	0x2000000c
 8003fb0:	08004dc4 	.word	0x08004dc4
 8003fb4:	08004de4 	.word	0x08004de4
 8003fb8:	08004da4 	.word	0x08004da4

08003fbc <__sflush_r>:
 8003fbc:	898a      	ldrh	r2, [r1, #12]
 8003fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc2:	4605      	mov	r5, r0
 8003fc4:	0710      	lsls	r0, r2, #28
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	d458      	bmi.n	800407c <__sflush_r+0xc0>
 8003fca:	684b      	ldr	r3, [r1, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	dc05      	bgt.n	8003fdc <__sflush_r+0x20>
 8003fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	dc02      	bgt.n	8003fdc <__sflush_r+0x20>
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fde:	2e00      	cmp	r6, #0
 8003fe0:	d0f9      	beq.n	8003fd6 <__sflush_r+0x1a>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fe8:	682f      	ldr	r7, [r5, #0]
 8003fea:	602b      	str	r3, [r5, #0]
 8003fec:	d032      	beq.n	8004054 <__sflush_r+0x98>
 8003fee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	075a      	lsls	r2, r3, #29
 8003ff4:	d505      	bpl.n	8004002 <__sflush_r+0x46>
 8003ff6:	6863      	ldr	r3, [r4, #4]
 8003ff8:	1ac0      	subs	r0, r0, r3
 8003ffa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ffc:	b10b      	cbz	r3, 8004002 <__sflush_r+0x46>
 8003ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004000:	1ac0      	subs	r0, r0, r3
 8004002:	2300      	movs	r3, #0
 8004004:	4602      	mov	r2, r0
 8004006:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004008:	6a21      	ldr	r1, [r4, #32]
 800400a:	4628      	mov	r0, r5
 800400c:	47b0      	blx	r6
 800400e:	1c43      	adds	r3, r0, #1
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	d106      	bne.n	8004022 <__sflush_r+0x66>
 8004014:	6829      	ldr	r1, [r5, #0]
 8004016:	291d      	cmp	r1, #29
 8004018:	d82c      	bhi.n	8004074 <__sflush_r+0xb8>
 800401a:	4a2a      	ldr	r2, [pc, #168]	; (80040c4 <__sflush_r+0x108>)
 800401c:	40ca      	lsrs	r2, r1
 800401e:	07d6      	lsls	r6, r2, #31
 8004020:	d528      	bpl.n	8004074 <__sflush_r+0xb8>
 8004022:	2200      	movs	r2, #0
 8004024:	6062      	str	r2, [r4, #4]
 8004026:	04d9      	lsls	r1, r3, #19
 8004028:	6922      	ldr	r2, [r4, #16]
 800402a:	6022      	str	r2, [r4, #0]
 800402c:	d504      	bpl.n	8004038 <__sflush_r+0x7c>
 800402e:	1c42      	adds	r2, r0, #1
 8004030:	d101      	bne.n	8004036 <__sflush_r+0x7a>
 8004032:	682b      	ldr	r3, [r5, #0]
 8004034:	b903      	cbnz	r3, 8004038 <__sflush_r+0x7c>
 8004036:	6560      	str	r0, [r4, #84]	; 0x54
 8004038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800403a:	602f      	str	r7, [r5, #0]
 800403c:	2900      	cmp	r1, #0
 800403e:	d0ca      	beq.n	8003fd6 <__sflush_r+0x1a>
 8004040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004044:	4299      	cmp	r1, r3
 8004046:	d002      	beq.n	800404e <__sflush_r+0x92>
 8004048:	4628      	mov	r0, r5
 800404a:	f000 f9d5 	bl	80043f8 <_free_r>
 800404e:	2000      	movs	r0, #0
 8004050:	6360      	str	r0, [r4, #52]	; 0x34
 8004052:	e7c1      	b.n	8003fd8 <__sflush_r+0x1c>
 8004054:	6a21      	ldr	r1, [r4, #32]
 8004056:	2301      	movs	r3, #1
 8004058:	4628      	mov	r0, r5
 800405a:	47b0      	blx	r6
 800405c:	1c41      	adds	r1, r0, #1
 800405e:	d1c7      	bne.n	8003ff0 <__sflush_r+0x34>
 8004060:	682b      	ldr	r3, [r5, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0c4      	beq.n	8003ff0 <__sflush_r+0x34>
 8004066:	2b1d      	cmp	r3, #29
 8004068:	d001      	beq.n	800406e <__sflush_r+0xb2>
 800406a:	2b16      	cmp	r3, #22
 800406c:	d101      	bne.n	8004072 <__sflush_r+0xb6>
 800406e:	602f      	str	r7, [r5, #0]
 8004070:	e7b1      	b.n	8003fd6 <__sflush_r+0x1a>
 8004072:	89a3      	ldrh	r3, [r4, #12]
 8004074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004078:	81a3      	strh	r3, [r4, #12]
 800407a:	e7ad      	b.n	8003fd8 <__sflush_r+0x1c>
 800407c:	690f      	ldr	r7, [r1, #16]
 800407e:	2f00      	cmp	r7, #0
 8004080:	d0a9      	beq.n	8003fd6 <__sflush_r+0x1a>
 8004082:	0793      	lsls	r3, r2, #30
 8004084:	680e      	ldr	r6, [r1, #0]
 8004086:	bf08      	it	eq
 8004088:	694b      	ldreq	r3, [r1, #20]
 800408a:	600f      	str	r7, [r1, #0]
 800408c:	bf18      	it	ne
 800408e:	2300      	movne	r3, #0
 8004090:	eba6 0807 	sub.w	r8, r6, r7
 8004094:	608b      	str	r3, [r1, #8]
 8004096:	f1b8 0f00 	cmp.w	r8, #0
 800409a:	dd9c      	ble.n	8003fd6 <__sflush_r+0x1a>
 800409c:	6a21      	ldr	r1, [r4, #32]
 800409e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040a0:	4643      	mov	r3, r8
 80040a2:	463a      	mov	r2, r7
 80040a4:	4628      	mov	r0, r5
 80040a6:	47b0      	blx	r6
 80040a8:	2800      	cmp	r0, #0
 80040aa:	dc06      	bgt.n	80040ba <__sflush_r+0xfe>
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b2:	81a3      	strh	r3, [r4, #12]
 80040b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040b8:	e78e      	b.n	8003fd8 <__sflush_r+0x1c>
 80040ba:	4407      	add	r7, r0
 80040bc:	eba8 0800 	sub.w	r8, r8, r0
 80040c0:	e7e9      	b.n	8004096 <__sflush_r+0xda>
 80040c2:	bf00      	nop
 80040c4:	20400001 	.word	0x20400001

080040c8 <_fflush_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	690b      	ldr	r3, [r1, #16]
 80040cc:	4605      	mov	r5, r0
 80040ce:	460c      	mov	r4, r1
 80040d0:	b913      	cbnz	r3, 80040d8 <_fflush_r+0x10>
 80040d2:	2500      	movs	r5, #0
 80040d4:	4628      	mov	r0, r5
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	b118      	cbz	r0, 80040e2 <_fflush_r+0x1a>
 80040da:	6983      	ldr	r3, [r0, #24]
 80040dc:	b90b      	cbnz	r3, 80040e2 <_fflush_r+0x1a>
 80040de:	f000 f887 	bl	80041f0 <__sinit>
 80040e2:	4b14      	ldr	r3, [pc, #80]	; (8004134 <_fflush_r+0x6c>)
 80040e4:	429c      	cmp	r4, r3
 80040e6:	d11b      	bne.n	8004120 <_fflush_r+0x58>
 80040e8:	686c      	ldr	r4, [r5, #4]
 80040ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0ef      	beq.n	80040d2 <_fflush_r+0xa>
 80040f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040f4:	07d0      	lsls	r0, r2, #31
 80040f6:	d404      	bmi.n	8004102 <_fflush_r+0x3a>
 80040f8:	0599      	lsls	r1, r3, #22
 80040fa:	d402      	bmi.n	8004102 <_fflush_r+0x3a>
 80040fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040fe:	f000 f915 	bl	800432c <__retarget_lock_acquire_recursive>
 8004102:	4628      	mov	r0, r5
 8004104:	4621      	mov	r1, r4
 8004106:	f7ff ff59 	bl	8003fbc <__sflush_r>
 800410a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800410c:	07da      	lsls	r2, r3, #31
 800410e:	4605      	mov	r5, r0
 8004110:	d4e0      	bmi.n	80040d4 <_fflush_r+0xc>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	059b      	lsls	r3, r3, #22
 8004116:	d4dd      	bmi.n	80040d4 <_fflush_r+0xc>
 8004118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800411a:	f000 f908 	bl	800432e <__retarget_lock_release_recursive>
 800411e:	e7d9      	b.n	80040d4 <_fflush_r+0xc>
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <_fflush_r+0x70>)
 8004122:	429c      	cmp	r4, r3
 8004124:	d101      	bne.n	800412a <_fflush_r+0x62>
 8004126:	68ac      	ldr	r4, [r5, #8]
 8004128:	e7df      	b.n	80040ea <_fflush_r+0x22>
 800412a:	4b04      	ldr	r3, [pc, #16]	; (800413c <_fflush_r+0x74>)
 800412c:	429c      	cmp	r4, r3
 800412e:	bf08      	it	eq
 8004130:	68ec      	ldreq	r4, [r5, #12]
 8004132:	e7da      	b.n	80040ea <_fflush_r+0x22>
 8004134:	08004dc4 	.word	0x08004dc4
 8004138:	08004de4 	.word	0x08004de4
 800413c:	08004da4 	.word	0x08004da4

08004140 <std>:
 8004140:	2300      	movs	r3, #0
 8004142:	b510      	push	{r4, lr}
 8004144:	4604      	mov	r4, r0
 8004146:	e9c0 3300 	strd	r3, r3, [r0]
 800414a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800414e:	6083      	str	r3, [r0, #8]
 8004150:	8181      	strh	r1, [r0, #12]
 8004152:	6643      	str	r3, [r0, #100]	; 0x64
 8004154:	81c2      	strh	r2, [r0, #14]
 8004156:	6183      	str	r3, [r0, #24]
 8004158:	4619      	mov	r1, r3
 800415a:	2208      	movs	r2, #8
 800415c:	305c      	adds	r0, #92	; 0x5c
 800415e:	f7ff fdd7 	bl	8003d10 <memset>
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <std+0x38>)
 8004164:	6263      	str	r3, [r4, #36]	; 0x24
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <std+0x3c>)
 8004168:	62a3      	str	r3, [r4, #40]	; 0x28
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <std+0x40>)
 800416c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800416e:	4b05      	ldr	r3, [pc, #20]	; (8004184 <std+0x44>)
 8004170:	6224      	str	r4, [r4, #32]
 8004172:	6323      	str	r3, [r4, #48]	; 0x30
 8004174:	bd10      	pop	{r4, pc}
 8004176:	bf00      	nop
 8004178:	08004b49 	.word	0x08004b49
 800417c:	08004b6b 	.word	0x08004b6b
 8004180:	08004ba3 	.word	0x08004ba3
 8004184:	08004bc7 	.word	0x08004bc7

08004188 <_cleanup_r>:
 8004188:	4901      	ldr	r1, [pc, #4]	; (8004190 <_cleanup_r+0x8>)
 800418a:	f000 b8af 	b.w	80042ec <_fwalk_reent>
 800418e:	bf00      	nop
 8004190:	080040c9 	.word	0x080040c9

08004194 <__sfmoreglue>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	1e4a      	subs	r2, r1, #1
 8004198:	2568      	movs	r5, #104	; 0x68
 800419a:	4355      	muls	r5, r2
 800419c:	460e      	mov	r6, r1
 800419e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041a2:	f000 f979 	bl	8004498 <_malloc_r>
 80041a6:	4604      	mov	r4, r0
 80041a8:	b140      	cbz	r0, 80041bc <__sfmoreglue+0x28>
 80041aa:	2100      	movs	r1, #0
 80041ac:	e9c0 1600 	strd	r1, r6, [r0]
 80041b0:	300c      	adds	r0, #12
 80041b2:	60a0      	str	r0, [r4, #8]
 80041b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041b8:	f7ff fdaa 	bl	8003d10 <memset>
 80041bc:	4620      	mov	r0, r4
 80041be:	bd70      	pop	{r4, r5, r6, pc}

080041c0 <__sfp_lock_acquire>:
 80041c0:	4801      	ldr	r0, [pc, #4]	; (80041c8 <__sfp_lock_acquire+0x8>)
 80041c2:	f000 b8b3 	b.w	800432c <__retarget_lock_acquire_recursive>
 80041c6:	bf00      	nop
 80041c8:	20000184 	.word	0x20000184

080041cc <__sfp_lock_release>:
 80041cc:	4801      	ldr	r0, [pc, #4]	; (80041d4 <__sfp_lock_release+0x8>)
 80041ce:	f000 b8ae 	b.w	800432e <__retarget_lock_release_recursive>
 80041d2:	bf00      	nop
 80041d4:	20000184 	.word	0x20000184

080041d8 <__sinit_lock_acquire>:
 80041d8:	4801      	ldr	r0, [pc, #4]	; (80041e0 <__sinit_lock_acquire+0x8>)
 80041da:	f000 b8a7 	b.w	800432c <__retarget_lock_acquire_recursive>
 80041de:	bf00      	nop
 80041e0:	2000017f 	.word	0x2000017f

080041e4 <__sinit_lock_release>:
 80041e4:	4801      	ldr	r0, [pc, #4]	; (80041ec <__sinit_lock_release+0x8>)
 80041e6:	f000 b8a2 	b.w	800432e <__retarget_lock_release_recursive>
 80041ea:	bf00      	nop
 80041ec:	2000017f 	.word	0x2000017f

080041f0 <__sinit>:
 80041f0:	b510      	push	{r4, lr}
 80041f2:	4604      	mov	r4, r0
 80041f4:	f7ff fff0 	bl	80041d8 <__sinit_lock_acquire>
 80041f8:	69a3      	ldr	r3, [r4, #24]
 80041fa:	b11b      	cbz	r3, 8004204 <__sinit+0x14>
 80041fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004200:	f7ff bff0 	b.w	80041e4 <__sinit_lock_release>
 8004204:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004208:	6523      	str	r3, [r4, #80]	; 0x50
 800420a:	4b13      	ldr	r3, [pc, #76]	; (8004258 <__sinit+0x68>)
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <__sinit+0x6c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	62a2      	str	r2, [r4, #40]	; 0x28
 8004212:	42a3      	cmp	r3, r4
 8004214:	bf04      	itt	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	61a3      	streq	r3, [r4, #24]
 800421a:	4620      	mov	r0, r4
 800421c:	f000 f820 	bl	8004260 <__sfp>
 8004220:	6060      	str	r0, [r4, #4]
 8004222:	4620      	mov	r0, r4
 8004224:	f000 f81c 	bl	8004260 <__sfp>
 8004228:	60a0      	str	r0, [r4, #8]
 800422a:	4620      	mov	r0, r4
 800422c:	f000 f818 	bl	8004260 <__sfp>
 8004230:	2200      	movs	r2, #0
 8004232:	60e0      	str	r0, [r4, #12]
 8004234:	2104      	movs	r1, #4
 8004236:	6860      	ldr	r0, [r4, #4]
 8004238:	f7ff ff82 	bl	8004140 <std>
 800423c:	68a0      	ldr	r0, [r4, #8]
 800423e:	2201      	movs	r2, #1
 8004240:	2109      	movs	r1, #9
 8004242:	f7ff ff7d 	bl	8004140 <std>
 8004246:	68e0      	ldr	r0, [r4, #12]
 8004248:	2202      	movs	r2, #2
 800424a:	2112      	movs	r1, #18
 800424c:	f7ff ff78 	bl	8004140 <std>
 8004250:	2301      	movs	r3, #1
 8004252:	61a3      	str	r3, [r4, #24]
 8004254:	e7d2      	b.n	80041fc <__sinit+0xc>
 8004256:	bf00      	nop
 8004258:	08004da0 	.word	0x08004da0
 800425c:	08004189 	.word	0x08004189

08004260 <__sfp>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	4607      	mov	r7, r0
 8004264:	f7ff ffac 	bl	80041c0 <__sfp_lock_acquire>
 8004268:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <__sfp+0x84>)
 800426a:	681e      	ldr	r6, [r3, #0]
 800426c:	69b3      	ldr	r3, [r6, #24]
 800426e:	b913      	cbnz	r3, 8004276 <__sfp+0x16>
 8004270:	4630      	mov	r0, r6
 8004272:	f7ff ffbd 	bl	80041f0 <__sinit>
 8004276:	3648      	adds	r6, #72	; 0x48
 8004278:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800427c:	3b01      	subs	r3, #1
 800427e:	d503      	bpl.n	8004288 <__sfp+0x28>
 8004280:	6833      	ldr	r3, [r6, #0]
 8004282:	b30b      	cbz	r3, 80042c8 <__sfp+0x68>
 8004284:	6836      	ldr	r6, [r6, #0]
 8004286:	e7f7      	b.n	8004278 <__sfp+0x18>
 8004288:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800428c:	b9d5      	cbnz	r5, 80042c4 <__sfp+0x64>
 800428e:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <__sfp+0x88>)
 8004290:	60e3      	str	r3, [r4, #12]
 8004292:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004296:	6665      	str	r5, [r4, #100]	; 0x64
 8004298:	f000 f847 	bl	800432a <__retarget_lock_init_recursive>
 800429c:	f7ff ff96 	bl	80041cc <__sfp_lock_release>
 80042a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042a8:	6025      	str	r5, [r4, #0]
 80042aa:	61a5      	str	r5, [r4, #24]
 80042ac:	2208      	movs	r2, #8
 80042ae:	4629      	mov	r1, r5
 80042b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042b4:	f7ff fd2c 	bl	8003d10 <memset>
 80042b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042c0:	4620      	mov	r0, r4
 80042c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042c4:	3468      	adds	r4, #104	; 0x68
 80042c6:	e7d9      	b.n	800427c <__sfp+0x1c>
 80042c8:	2104      	movs	r1, #4
 80042ca:	4638      	mov	r0, r7
 80042cc:	f7ff ff62 	bl	8004194 <__sfmoreglue>
 80042d0:	4604      	mov	r4, r0
 80042d2:	6030      	str	r0, [r6, #0]
 80042d4:	2800      	cmp	r0, #0
 80042d6:	d1d5      	bne.n	8004284 <__sfp+0x24>
 80042d8:	f7ff ff78 	bl	80041cc <__sfp_lock_release>
 80042dc:	230c      	movs	r3, #12
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	e7ee      	b.n	80042c0 <__sfp+0x60>
 80042e2:	bf00      	nop
 80042e4:	08004da0 	.word	0x08004da0
 80042e8:	ffff0001 	.word	0xffff0001

080042ec <_fwalk_reent>:
 80042ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042f0:	4606      	mov	r6, r0
 80042f2:	4688      	mov	r8, r1
 80042f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042f8:	2700      	movs	r7, #0
 80042fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042fe:	f1b9 0901 	subs.w	r9, r9, #1
 8004302:	d505      	bpl.n	8004310 <_fwalk_reent+0x24>
 8004304:	6824      	ldr	r4, [r4, #0]
 8004306:	2c00      	cmp	r4, #0
 8004308:	d1f7      	bne.n	80042fa <_fwalk_reent+0xe>
 800430a:	4638      	mov	r0, r7
 800430c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004310:	89ab      	ldrh	r3, [r5, #12]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d907      	bls.n	8004326 <_fwalk_reent+0x3a>
 8004316:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800431a:	3301      	adds	r3, #1
 800431c:	d003      	beq.n	8004326 <_fwalk_reent+0x3a>
 800431e:	4629      	mov	r1, r5
 8004320:	4630      	mov	r0, r6
 8004322:	47c0      	blx	r8
 8004324:	4307      	orrs	r7, r0
 8004326:	3568      	adds	r5, #104	; 0x68
 8004328:	e7e9      	b.n	80042fe <_fwalk_reent+0x12>

0800432a <__retarget_lock_init_recursive>:
 800432a:	4770      	bx	lr

0800432c <__retarget_lock_acquire_recursive>:
 800432c:	4770      	bx	lr

0800432e <__retarget_lock_release_recursive>:
 800432e:	4770      	bx	lr

08004330 <__swhatbuf_r>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	460e      	mov	r6, r1
 8004334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004338:	2900      	cmp	r1, #0
 800433a:	b096      	sub	sp, #88	; 0x58
 800433c:	4614      	mov	r4, r2
 800433e:	461d      	mov	r5, r3
 8004340:	da07      	bge.n	8004352 <__swhatbuf_r+0x22>
 8004342:	2300      	movs	r3, #0
 8004344:	602b      	str	r3, [r5, #0]
 8004346:	89b3      	ldrh	r3, [r6, #12]
 8004348:	061a      	lsls	r2, r3, #24
 800434a:	d410      	bmi.n	800436e <__swhatbuf_r+0x3e>
 800434c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004350:	e00e      	b.n	8004370 <__swhatbuf_r+0x40>
 8004352:	466a      	mov	r2, sp
 8004354:	f000 fc5e 	bl	8004c14 <_fstat_r>
 8004358:	2800      	cmp	r0, #0
 800435a:	dbf2      	blt.n	8004342 <__swhatbuf_r+0x12>
 800435c:	9a01      	ldr	r2, [sp, #4]
 800435e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004362:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004366:	425a      	negs	r2, r3
 8004368:	415a      	adcs	r2, r3
 800436a:	602a      	str	r2, [r5, #0]
 800436c:	e7ee      	b.n	800434c <__swhatbuf_r+0x1c>
 800436e:	2340      	movs	r3, #64	; 0x40
 8004370:	2000      	movs	r0, #0
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	b016      	add	sp, #88	; 0x58
 8004376:	bd70      	pop	{r4, r5, r6, pc}

08004378 <__smakebuf_r>:
 8004378:	898b      	ldrh	r3, [r1, #12]
 800437a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800437c:	079d      	lsls	r5, r3, #30
 800437e:	4606      	mov	r6, r0
 8004380:	460c      	mov	r4, r1
 8004382:	d507      	bpl.n	8004394 <__smakebuf_r+0x1c>
 8004384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	6123      	str	r3, [r4, #16]
 800438c:	2301      	movs	r3, #1
 800438e:	6163      	str	r3, [r4, #20]
 8004390:	b002      	add	sp, #8
 8004392:	bd70      	pop	{r4, r5, r6, pc}
 8004394:	ab01      	add	r3, sp, #4
 8004396:	466a      	mov	r2, sp
 8004398:	f7ff ffca 	bl	8004330 <__swhatbuf_r>
 800439c:	9900      	ldr	r1, [sp, #0]
 800439e:	4605      	mov	r5, r0
 80043a0:	4630      	mov	r0, r6
 80043a2:	f000 f879 	bl	8004498 <_malloc_r>
 80043a6:	b948      	cbnz	r0, 80043bc <__smakebuf_r+0x44>
 80043a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ac:	059a      	lsls	r2, r3, #22
 80043ae:	d4ef      	bmi.n	8004390 <__smakebuf_r+0x18>
 80043b0:	f023 0303 	bic.w	r3, r3, #3
 80043b4:	f043 0302 	orr.w	r3, r3, #2
 80043b8:	81a3      	strh	r3, [r4, #12]
 80043ba:	e7e3      	b.n	8004384 <__smakebuf_r+0xc>
 80043bc:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <__smakebuf_r+0x7c>)
 80043be:	62b3      	str	r3, [r6, #40]	; 0x28
 80043c0:	89a3      	ldrh	r3, [r4, #12]
 80043c2:	6020      	str	r0, [r4, #0]
 80043c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c8:	81a3      	strh	r3, [r4, #12]
 80043ca:	9b00      	ldr	r3, [sp, #0]
 80043cc:	6163      	str	r3, [r4, #20]
 80043ce:	9b01      	ldr	r3, [sp, #4]
 80043d0:	6120      	str	r0, [r4, #16]
 80043d2:	b15b      	cbz	r3, 80043ec <__smakebuf_r+0x74>
 80043d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043d8:	4630      	mov	r0, r6
 80043da:	f000 fc2d 	bl	8004c38 <_isatty_r>
 80043de:	b128      	cbz	r0, 80043ec <__smakebuf_r+0x74>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	81a3      	strh	r3, [r4, #12]
 80043ec:	89a0      	ldrh	r0, [r4, #12]
 80043ee:	4305      	orrs	r5, r0
 80043f0:	81a5      	strh	r5, [r4, #12]
 80043f2:	e7cd      	b.n	8004390 <__smakebuf_r+0x18>
 80043f4:	08004189 	.word	0x08004189

080043f8 <_free_r>:
 80043f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043fa:	2900      	cmp	r1, #0
 80043fc:	d048      	beq.n	8004490 <_free_r+0x98>
 80043fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004402:	9001      	str	r0, [sp, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	f1a1 0404 	sub.w	r4, r1, #4
 800440a:	bfb8      	it	lt
 800440c:	18e4      	addlt	r4, r4, r3
 800440e:	f000 fc35 	bl	8004c7c <__malloc_lock>
 8004412:	4a20      	ldr	r2, [pc, #128]	; (8004494 <_free_r+0x9c>)
 8004414:	9801      	ldr	r0, [sp, #4]
 8004416:	6813      	ldr	r3, [r2, #0]
 8004418:	4615      	mov	r5, r2
 800441a:	b933      	cbnz	r3, 800442a <_free_r+0x32>
 800441c:	6063      	str	r3, [r4, #4]
 800441e:	6014      	str	r4, [r2, #0]
 8004420:	b003      	add	sp, #12
 8004422:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004426:	f000 bc2f 	b.w	8004c88 <__malloc_unlock>
 800442a:	42a3      	cmp	r3, r4
 800442c:	d90b      	bls.n	8004446 <_free_r+0x4e>
 800442e:	6821      	ldr	r1, [r4, #0]
 8004430:	1862      	adds	r2, r4, r1
 8004432:	4293      	cmp	r3, r2
 8004434:	bf04      	itt	eq
 8004436:	681a      	ldreq	r2, [r3, #0]
 8004438:	685b      	ldreq	r3, [r3, #4]
 800443a:	6063      	str	r3, [r4, #4]
 800443c:	bf04      	itt	eq
 800443e:	1852      	addeq	r2, r2, r1
 8004440:	6022      	streq	r2, [r4, #0]
 8004442:	602c      	str	r4, [r5, #0]
 8004444:	e7ec      	b.n	8004420 <_free_r+0x28>
 8004446:	461a      	mov	r2, r3
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	b10b      	cbz	r3, 8004450 <_free_r+0x58>
 800444c:	42a3      	cmp	r3, r4
 800444e:	d9fa      	bls.n	8004446 <_free_r+0x4e>
 8004450:	6811      	ldr	r1, [r2, #0]
 8004452:	1855      	adds	r5, r2, r1
 8004454:	42a5      	cmp	r5, r4
 8004456:	d10b      	bne.n	8004470 <_free_r+0x78>
 8004458:	6824      	ldr	r4, [r4, #0]
 800445a:	4421      	add	r1, r4
 800445c:	1854      	adds	r4, r2, r1
 800445e:	42a3      	cmp	r3, r4
 8004460:	6011      	str	r1, [r2, #0]
 8004462:	d1dd      	bne.n	8004420 <_free_r+0x28>
 8004464:	681c      	ldr	r4, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	6053      	str	r3, [r2, #4]
 800446a:	4421      	add	r1, r4
 800446c:	6011      	str	r1, [r2, #0]
 800446e:	e7d7      	b.n	8004420 <_free_r+0x28>
 8004470:	d902      	bls.n	8004478 <_free_r+0x80>
 8004472:	230c      	movs	r3, #12
 8004474:	6003      	str	r3, [r0, #0]
 8004476:	e7d3      	b.n	8004420 <_free_r+0x28>
 8004478:	6825      	ldr	r5, [r4, #0]
 800447a:	1961      	adds	r1, r4, r5
 800447c:	428b      	cmp	r3, r1
 800447e:	bf04      	itt	eq
 8004480:	6819      	ldreq	r1, [r3, #0]
 8004482:	685b      	ldreq	r3, [r3, #4]
 8004484:	6063      	str	r3, [r4, #4]
 8004486:	bf04      	itt	eq
 8004488:	1949      	addeq	r1, r1, r5
 800448a:	6021      	streq	r1, [r4, #0]
 800448c:	6054      	str	r4, [r2, #4]
 800448e:	e7c7      	b.n	8004420 <_free_r+0x28>
 8004490:	b003      	add	sp, #12
 8004492:	bd30      	pop	{r4, r5, pc}
 8004494:	20000090 	.word	0x20000090

08004498 <_malloc_r>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	1ccd      	adds	r5, r1, #3
 800449c:	f025 0503 	bic.w	r5, r5, #3
 80044a0:	3508      	adds	r5, #8
 80044a2:	2d0c      	cmp	r5, #12
 80044a4:	bf38      	it	cc
 80044a6:	250c      	movcc	r5, #12
 80044a8:	2d00      	cmp	r5, #0
 80044aa:	4606      	mov	r6, r0
 80044ac:	db01      	blt.n	80044b2 <_malloc_r+0x1a>
 80044ae:	42a9      	cmp	r1, r5
 80044b0:	d903      	bls.n	80044ba <_malloc_r+0x22>
 80044b2:	230c      	movs	r3, #12
 80044b4:	6033      	str	r3, [r6, #0]
 80044b6:	2000      	movs	r0, #0
 80044b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ba:	f000 fbdf 	bl	8004c7c <__malloc_lock>
 80044be:	4921      	ldr	r1, [pc, #132]	; (8004544 <_malloc_r+0xac>)
 80044c0:	680a      	ldr	r2, [r1, #0]
 80044c2:	4614      	mov	r4, r2
 80044c4:	b99c      	cbnz	r4, 80044ee <_malloc_r+0x56>
 80044c6:	4f20      	ldr	r7, [pc, #128]	; (8004548 <_malloc_r+0xb0>)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	b923      	cbnz	r3, 80044d6 <_malloc_r+0x3e>
 80044cc:	4621      	mov	r1, r4
 80044ce:	4630      	mov	r0, r6
 80044d0:	f000 fb2a 	bl	8004b28 <_sbrk_r>
 80044d4:	6038      	str	r0, [r7, #0]
 80044d6:	4629      	mov	r1, r5
 80044d8:	4630      	mov	r0, r6
 80044da:	f000 fb25 	bl	8004b28 <_sbrk_r>
 80044de:	1c43      	adds	r3, r0, #1
 80044e0:	d123      	bne.n	800452a <_malloc_r+0x92>
 80044e2:	230c      	movs	r3, #12
 80044e4:	6033      	str	r3, [r6, #0]
 80044e6:	4630      	mov	r0, r6
 80044e8:	f000 fbce 	bl	8004c88 <__malloc_unlock>
 80044ec:	e7e3      	b.n	80044b6 <_malloc_r+0x1e>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	1b5b      	subs	r3, r3, r5
 80044f2:	d417      	bmi.n	8004524 <_malloc_r+0x8c>
 80044f4:	2b0b      	cmp	r3, #11
 80044f6:	d903      	bls.n	8004500 <_malloc_r+0x68>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	441c      	add	r4, r3
 80044fc:	6025      	str	r5, [r4, #0]
 80044fe:	e004      	b.n	800450a <_malloc_r+0x72>
 8004500:	6863      	ldr	r3, [r4, #4]
 8004502:	42a2      	cmp	r2, r4
 8004504:	bf0c      	ite	eq
 8004506:	600b      	streq	r3, [r1, #0]
 8004508:	6053      	strne	r3, [r2, #4]
 800450a:	4630      	mov	r0, r6
 800450c:	f000 fbbc 	bl	8004c88 <__malloc_unlock>
 8004510:	f104 000b 	add.w	r0, r4, #11
 8004514:	1d23      	adds	r3, r4, #4
 8004516:	f020 0007 	bic.w	r0, r0, #7
 800451a:	1ac2      	subs	r2, r0, r3
 800451c:	d0cc      	beq.n	80044b8 <_malloc_r+0x20>
 800451e:	1a1b      	subs	r3, r3, r0
 8004520:	50a3      	str	r3, [r4, r2]
 8004522:	e7c9      	b.n	80044b8 <_malloc_r+0x20>
 8004524:	4622      	mov	r2, r4
 8004526:	6864      	ldr	r4, [r4, #4]
 8004528:	e7cc      	b.n	80044c4 <_malloc_r+0x2c>
 800452a:	1cc4      	adds	r4, r0, #3
 800452c:	f024 0403 	bic.w	r4, r4, #3
 8004530:	42a0      	cmp	r0, r4
 8004532:	d0e3      	beq.n	80044fc <_malloc_r+0x64>
 8004534:	1a21      	subs	r1, r4, r0
 8004536:	4630      	mov	r0, r6
 8004538:	f000 faf6 	bl	8004b28 <_sbrk_r>
 800453c:	3001      	adds	r0, #1
 800453e:	d1dd      	bne.n	80044fc <_malloc_r+0x64>
 8004540:	e7cf      	b.n	80044e2 <_malloc_r+0x4a>
 8004542:	bf00      	nop
 8004544:	20000090 	.word	0x20000090
 8004548:	20000094 	.word	0x20000094

0800454c <__sfputc_r>:
 800454c:	6893      	ldr	r3, [r2, #8]
 800454e:	3b01      	subs	r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	b410      	push	{r4}
 8004554:	6093      	str	r3, [r2, #8]
 8004556:	da08      	bge.n	800456a <__sfputc_r+0x1e>
 8004558:	6994      	ldr	r4, [r2, #24]
 800455a:	42a3      	cmp	r3, r4
 800455c:	db01      	blt.n	8004562 <__sfputc_r+0x16>
 800455e:	290a      	cmp	r1, #10
 8004560:	d103      	bne.n	800456a <__sfputc_r+0x1e>
 8004562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004566:	f7ff bc69 	b.w	8003e3c <__swbuf_r>
 800456a:	6813      	ldr	r3, [r2, #0]
 800456c:	1c58      	adds	r0, r3, #1
 800456e:	6010      	str	r0, [r2, #0]
 8004570:	7019      	strb	r1, [r3, #0]
 8004572:	4608      	mov	r0, r1
 8004574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004578:	4770      	bx	lr

0800457a <__sfputs_r>:
 800457a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457c:	4606      	mov	r6, r0
 800457e:	460f      	mov	r7, r1
 8004580:	4614      	mov	r4, r2
 8004582:	18d5      	adds	r5, r2, r3
 8004584:	42ac      	cmp	r4, r5
 8004586:	d101      	bne.n	800458c <__sfputs_r+0x12>
 8004588:	2000      	movs	r0, #0
 800458a:	e007      	b.n	800459c <__sfputs_r+0x22>
 800458c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004590:	463a      	mov	r2, r7
 8004592:	4630      	mov	r0, r6
 8004594:	f7ff ffda 	bl	800454c <__sfputc_r>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d1f3      	bne.n	8004584 <__sfputs_r+0xa>
 800459c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045a0 <_vfiprintf_r>:
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	460d      	mov	r5, r1
 80045a6:	b09d      	sub	sp, #116	; 0x74
 80045a8:	4614      	mov	r4, r2
 80045aa:	4698      	mov	r8, r3
 80045ac:	4606      	mov	r6, r0
 80045ae:	b118      	cbz	r0, 80045b8 <_vfiprintf_r+0x18>
 80045b0:	6983      	ldr	r3, [r0, #24]
 80045b2:	b90b      	cbnz	r3, 80045b8 <_vfiprintf_r+0x18>
 80045b4:	f7ff fe1c 	bl	80041f0 <__sinit>
 80045b8:	4b89      	ldr	r3, [pc, #548]	; (80047e0 <_vfiprintf_r+0x240>)
 80045ba:	429d      	cmp	r5, r3
 80045bc:	d11b      	bne.n	80045f6 <_vfiprintf_r+0x56>
 80045be:	6875      	ldr	r5, [r6, #4]
 80045c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045c2:	07d9      	lsls	r1, r3, #31
 80045c4:	d405      	bmi.n	80045d2 <_vfiprintf_r+0x32>
 80045c6:	89ab      	ldrh	r3, [r5, #12]
 80045c8:	059a      	lsls	r2, r3, #22
 80045ca:	d402      	bmi.n	80045d2 <_vfiprintf_r+0x32>
 80045cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045ce:	f7ff fead 	bl	800432c <__retarget_lock_acquire_recursive>
 80045d2:	89ab      	ldrh	r3, [r5, #12]
 80045d4:	071b      	lsls	r3, r3, #28
 80045d6:	d501      	bpl.n	80045dc <_vfiprintf_r+0x3c>
 80045d8:	692b      	ldr	r3, [r5, #16]
 80045da:	b9eb      	cbnz	r3, 8004618 <_vfiprintf_r+0x78>
 80045dc:	4629      	mov	r1, r5
 80045de:	4630      	mov	r0, r6
 80045e0:	f7ff fc7e 	bl	8003ee0 <__swsetup_r>
 80045e4:	b1c0      	cbz	r0, 8004618 <_vfiprintf_r+0x78>
 80045e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045e8:	07dc      	lsls	r4, r3, #31
 80045ea:	d50e      	bpl.n	800460a <_vfiprintf_r+0x6a>
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045f0:	b01d      	add	sp, #116	; 0x74
 80045f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f6:	4b7b      	ldr	r3, [pc, #492]	; (80047e4 <_vfiprintf_r+0x244>)
 80045f8:	429d      	cmp	r5, r3
 80045fa:	d101      	bne.n	8004600 <_vfiprintf_r+0x60>
 80045fc:	68b5      	ldr	r5, [r6, #8]
 80045fe:	e7df      	b.n	80045c0 <_vfiprintf_r+0x20>
 8004600:	4b79      	ldr	r3, [pc, #484]	; (80047e8 <_vfiprintf_r+0x248>)
 8004602:	429d      	cmp	r5, r3
 8004604:	bf08      	it	eq
 8004606:	68f5      	ldreq	r5, [r6, #12]
 8004608:	e7da      	b.n	80045c0 <_vfiprintf_r+0x20>
 800460a:	89ab      	ldrh	r3, [r5, #12]
 800460c:	0598      	lsls	r0, r3, #22
 800460e:	d4ed      	bmi.n	80045ec <_vfiprintf_r+0x4c>
 8004610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004612:	f7ff fe8c 	bl	800432e <__retarget_lock_release_recursive>
 8004616:	e7e9      	b.n	80045ec <_vfiprintf_r+0x4c>
 8004618:	2300      	movs	r3, #0
 800461a:	9309      	str	r3, [sp, #36]	; 0x24
 800461c:	2320      	movs	r3, #32
 800461e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004622:	f8cd 800c 	str.w	r8, [sp, #12]
 8004626:	2330      	movs	r3, #48	; 0x30
 8004628:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80047ec <_vfiprintf_r+0x24c>
 800462c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004630:	f04f 0901 	mov.w	r9, #1
 8004634:	4623      	mov	r3, r4
 8004636:	469a      	mov	sl, r3
 8004638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800463c:	b10a      	cbz	r2, 8004642 <_vfiprintf_r+0xa2>
 800463e:	2a25      	cmp	r2, #37	; 0x25
 8004640:	d1f9      	bne.n	8004636 <_vfiprintf_r+0x96>
 8004642:	ebba 0b04 	subs.w	fp, sl, r4
 8004646:	d00b      	beq.n	8004660 <_vfiprintf_r+0xc0>
 8004648:	465b      	mov	r3, fp
 800464a:	4622      	mov	r2, r4
 800464c:	4629      	mov	r1, r5
 800464e:	4630      	mov	r0, r6
 8004650:	f7ff ff93 	bl	800457a <__sfputs_r>
 8004654:	3001      	adds	r0, #1
 8004656:	f000 80aa 	beq.w	80047ae <_vfiprintf_r+0x20e>
 800465a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800465c:	445a      	add	r2, fp
 800465e:	9209      	str	r2, [sp, #36]	; 0x24
 8004660:	f89a 3000 	ldrb.w	r3, [sl]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80a2 	beq.w	80047ae <_vfiprintf_r+0x20e>
 800466a:	2300      	movs	r3, #0
 800466c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004674:	f10a 0a01 	add.w	sl, sl, #1
 8004678:	9304      	str	r3, [sp, #16]
 800467a:	9307      	str	r3, [sp, #28]
 800467c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004680:	931a      	str	r3, [sp, #104]	; 0x68
 8004682:	4654      	mov	r4, sl
 8004684:	2205      	movs	r2, #5
 8004686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800468a:	4858      	ldr	r0, [pc, #352]	; (80047ec <_vfiprintf_r+0x24c>)
 800468c:	f7fb fda0 	bl	80001d0 <memchr>
 8004690:	9a04      	ldr	r2, [sp, #16]
 8004692:	b9d8      	cbnz	r0, 80046cc <_vfiprintf_r+0x12c>
 8004694:	06d1      	lsls	r1, r2, #27
 8004696:	bf44      	itt	mi
 8004698:	2320      	movmi	r3, #32
 800469a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800469e:	0713      	lsls	r3, r2, #28
 80046a0:	bf44      	itt	mi
 80046a2:	232b      	movmi	r3, #43	; 0x2b
 80046a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046a8:	f89a 3000 	ldrb.w	r3, [sl]
 80046ac:	2b2a      	cmp	r3, #42	; 0x2a
 80046ae:	d015      	beq.n	80046dc <_vfiprintf_r+0x13c>
 80046b0:	9a07      	ldr	r2, [sp, #28]
 80046b2:	4654      	mov	r4, sl
 80046b4:	2000      	movs	r0, #0
 80046b6:	f04f 0c0a 	mov.w	ip, #10
 80046ba:	4621      	mov	r1, r4
 80046bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046c0:	3b30      	subs	r3, #48	; 0x30
 80046c2:	2b09      	cmp	r3, #9
 80046c4:	d94e      	bls.n	8004764 <_vfiprintf_r+0x1c4>
 80046c6:	b1b0      	cbz	r0, 80046f6 <_vfiprintf_r+0x156>
 80046c8:	9207      	str	r2, [sp, #28]
 80046ca:	e014      	b.n	80046f6 <_vfiprintf_r+0x156>
 80046cc:	eba0 0308 	sub.w	r3, r0, r8
 80046d0:	fa09 f303 	lsl.w	r3, r9, r3
 80046d4:	4313      	orrs	r3, r2
 80046d6:	9304      	str	r3, [sp, #16]
 80046d8:	46a2      	mov	sl, r4
 80046da:	e7d2      	b.n	8004682 <_vfiprintf_r+0xe2>
 80046dc:	9b03      	ldr	r3, [sp, #12]
 80046de:	1d19      	adds	r1, r3, #4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	9103      	str	r1, [sp, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bfbb      	ittet	lt
 80046e8:	425b      	neglt	r3, r3
 80046ea:	f042 0202 	orrlt.w	r2, r2, #2
 80046ee:	9307      	strge	r3, [sp, #28]
 80046f0:	9307      	strlt	r3, [sp, #28]
 80046f2:	bfb8      	it	lt
 80046f4:	9204      	strlt	r2, [sp, #16]
 80046f6:	7823      	ldrb	r3, [r4, #0]
 80046f8:	2b2e      	cmp	r3, #46	; 0x2e
 80046fa:	d10c      	bne.n	8004716 <_vfiprintf_r+0x176>
 80046fc:	7863      	ldrb	r3, [r4, #1]
 80046fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004700:	d135      	bne.n	800476e <_vfiprintf_r+0x1ce>
 8004702:	9b03      	ldr	r3, [sp, #12]
 8004704:	1d1a      	adds	r2, r3, #4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	9203      	str	r2, [sp, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	bfb8      	it	lt
 800470e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004712:	3402      	adds	r4, #2
 8004714:	9305      	str	r3, [sp, #20]
 8004716:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80047fc <_vfiprintf_r+0x25c>
 800471a:	7821      	ldrb	r1, [r4, #0]
 800471c:	2203      	movs	r2, #3
 800471e:	4650      	mov	r0, sl
 8004720:	f7fb fd56 	bl	80001d0 <memchr>
 8004724:	b140      	cbz	r0, 8004738 <_vfiprintf_r+0x198>
 8004726:	2340      	movs	r3, #64	; 0x40
 8004728:	eba0 000a 	sub.w	r0, r0, sl
 800472c:	fa03 f000 	lsl.w	r0, r3, r0
 8004730:	9b04      	ldr	r3, [sp, #16]
 8004732:	4303      	orrs	r3, r0
 8004734:	3401      	adds	r4, #1
 8004736:	9304      	str	r3, [sp, #16]
 8004738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800473c:	482c      	ldr	r0, [pc, #176]	; (80047f0 <_vfiprintf_r+0x250>)
 800473e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004742:	2206      	movs	r2, #6
 8004744:	f7fb fd44 	bl	80001d0 <memchr>
 8004748:	2800      	cmp	r0, #0
 800474a:	d03f      	beq.n	80047cc <_vfiprintf_r+0x22c>
 800474c:	4b29      	ldr	r3, [pc, #164]	; (80047f4 <_vfiprintf_r+0x254>)
 800474e:	bb1b      	cbnz	r3, 8004798 <_vfiprintf_r+0x1f8>
 8004750:	9b03      	ldr	r3, [sp, #12]
 8004752:	3307      	adds	r3, #7
 8004754:	f023 0307 	bic.w	r3, r3, #7
 8004758:	3308      	adds	r3, #8
 800475a:	9303      	str	r3, [sp, #12]
 800475c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800475e:	443b      	add	r3, r7
 8004760:	9309      	str	r3, [sp, #36]	; 0x24
 8004762:	e767      	b.n	8004634 <_vfiprintf_r+0x94>
 8004764:	fb0c 3202 	mla	r2, ip, r2, r3
 8004768:	460c      	mov	r4, r1
 800476a:	2001      	movs	r0, #1
 800476c:	e7a5      	b.n	80046ba <_vfiprintf_r+0x11a>
 800476e:	2300      	movs	r3, #0
 8004770:	3401      	adds	r4, #1
 8004772:	9305      	str	r3, [sp, #20]
 8004774:	4619      	mov	r1, r3
 8004776:	f04f 0c0a 	mov.w	ip, #10
 800477a:	4620      	mov	r0, r4
 800477c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004780:	3a30      	subs	r2, #48	; 0x30
 8004782:	2a09      	cmp	r2, #9
 8004784:	d903      	bls.n	800478e <_vfiprintf_r+0x1ee>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0c5      	beq.n	8004716 <_vfiprintf_r+0x176>
 800478a:	9105      	str	r1, [sp, #20]
 800478c:	e7c3      	b.n	8004716 <_vfiprintf_r+0x176>
 800478e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004792:	4604      	mov	r4, r0
 8004794:	2301      	movs	r3, #1
 8004796:	e7f0      	b.n	800477a <_vfiprintf_r+0x1da>
 8004798:	ab03      	add	r3, sp, #12
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	462a      	mov	r2, r5
 800479e:	4b16      	ldr	r3, [pc, #88]	; (80047f8 <_vfiprintf_r+0x258>)
 80047a0:	a904      	add	r1, sp, #16
 80047a2:	4630      	mov	r0, r6
 80047a4:	f3af 8000 	nop.w
 80047a8:	4607      	mov	r7, r0
 80047aa:	1c78      	adds	r0, r7, #1
 80047ac:	d1d6      	bne.n	800475c <_vfiprintf_r+0x1bc>
 80047ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047b0:	07d9      	lsls	r1, r3, #31
 80047b2:	d405      	bmi.n	80047c0 <_vfiprintf_r+0x220>
 80047b4:	89ab      	ldrh	r3, [r5, #12]
 80047b6:	059a      	lsls	r2, r3, #22
 80047b8:	d402      	bmi.n	80047c0 <_vfiprintf_r+0x220>
 80047ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047bc:	f7ff fdb7 	bl	800432e <__retarget_lock_release_recursive>
 80047c0:	89ab      	ldrh	r3, [r5, #12]
 80047c2:	065b      	lsls	r3, r3, #25
 80047c4:	f53f af12 	bmi.w	80045ec <_vfiprintf_r+0x4c>
 80047c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047ca:	e711      	b.n	80045f0 <_vfiprintf_r+0x50>
 80047cc:	ab03      	add	r3, sp, #12
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	462a      	mov	r2, r5
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <_vfiprintf_r+0x258>)
 80047d4:	a904      	add	r1, sp, #16
 80047d6:	4630      	mov	r0, r6
 80047d8:	f000 f880 	bl	80048dc <_printf_i>
 80047dc:	e7e4      	b.n	80047a8 <_vfiprintf_r+0x208>
 80047de:	bf00      	nop
 80047e0:	08004dc4 	.word	0x08004dc4
 80047e4:	08004de4 	.word	0x08004de4
 80047e8:	08004da4 	.word	0x08004da4
 80047ec:	08004e04 	.word	0x08004e04
 80047f0:	08004e0e 	.word	0x08004e0e
 80047f4:	00000000 	.word	0x00000000
 80047f8:	0800457b 	.word	0x0800457b
 80047fc:	08004e0a 	.word	0x08004e0a

08004800 <_printf_common>:
 8004800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004804:	4616      	mov	r6, r2
 8004806:	4699      	mov	r9, r3
 8004808:	688a      	ldr	r2, [r1, #8]
 800480a:	690b      	ldr	r3, [r1, #16]
 800480c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004810:	4293      	cmp	r3, r2
 8004812:	bfb8      	it	lt
 8004814:	4613      	movlt	r3, r2
 8004816:	6033      	str	r3, [r6, #0]
 8004818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800481c:	4607      	mov	r7, r0
 800481e:	460c      	mov	r4, r1
 8004820:	b10a      	cbz	r2, 8004826 <_printf_common+0x26>
 8004822:	3301      	adds	r3, #1
 8004824:	6033      	str	r3, [r6, #0]
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	0699      	lsls	r1, r3, #26
 800482a:	bf42      	ittt	mi
 800482c:	6833      	ldrmi	r3, [r6, #0]
 800482e:	3302      	addmi	r3, #2
 8004830:	6033      	strmi	r3, [r6, #0]
 8004832:	6825      	ldr	r5, [r4, #0]
 8004834:	f015 0506 	ands.w	r5, r5, #6
 8004838:	d106      	bne.n	8004848 <_printf_common+0x48>
 800483a:	f104 0a19 	add.w	sl, r4, #25
 800483e:	68e3      	ldr	r3, [r4, #12]
 8004840:	6832      	ldr	r2, [r6, #0]
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	42ab      	cmp	r3, r5
 8004846:	dc26      	bgt.n	8004896 <_printf_common+0x96>
 8004848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800484c:	1e13      	subs	r3, r2, #0
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	bf18      	it	ne
 8004852:	2301      	movne	r3, #1
 8004854:	0692      	lsls	r2, r2, #26
 8004856:	d42b      	bmi.n	80048b0 <_printf_common+0xb0>
 8004858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800485c:	4649      	mov	r1, r9
 800485e:	4638      	mov	r0, r7
 8004860:	47c0      	blx	r8
 8004862:	3001      	adds	r0, #1
 8004864:	d01e      	beq.n	80048a4 <_printf_common+0xa4>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	68e5      	ldr	r5, [r4, #12]
 800486a:	6832      	ldr	r2, [r6, #0]
 800486c:	f003 0306 	and.w	r3, r3, #6
 8004870:	2b04      	cmp	r3, #4
 8004872:	bf08      	it	eq
 8004874:	1aad      	subeq	r5, r5, r2
 8004876:	68a3      	ldr	r3, [r4, #8]
 8004878:	6922      	ldr	r2, [r4, #16]
 800487a:	bf0c      	ite	eq
 800487c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004880:	2500      	movne	r5, #0
 8004882:	4293      	cmp	r3, r2
 8004884:	bfc4      	itt	gt
 8004886:	1a9b      	subgt	r3, r3, r2
 8004888:	18ed      	addgt	r5, r5, r3
 800488a:	2600      	movs	r6, #0
 800488c:	341a      	adds	r4, #26
 800488e:	42b5      	cmp	r5, r6
 8004890:	d11a      	bne.n	80048c8 <_printf_common+0xc8>
 8004892:	2000      	movs	r0, #0
 8004894:	e008      	b.n	80048a8 <_printf_common+0xa8>
 8004896:	2301      	movs	r3, #1
 8004898:	4652      	mov	r2, sl
 800489a:	4649      	mov	r1, r9
 800489c:	4638      	mov	r0, r7
 800489e:	47c0      	blx	r8
 80048a0:	3001      	adds	r0, #1
 80048a2:	d103      	bne.n	80048ac <_printf_common+0xac>
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ac:	3501      	adds	r5, #1
 80048ae:	e7c6      	b.n	800483e <_printf_common+0x3e>
 80048b0:	18e1      	adds	r1, r4, r3
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	2030      	movs	r0, #48	; 0x30
 80048b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ba:	4422      	add	r2, r4
 80048bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048c4:	3302      	adds	r3, #2
 80048c6:	e7c7      	b.n	8004858 <_printf_common+0x58>
 80048c8:	2301      	movs	r3, #1
 80048ca:	4622      	mov	r2, r4
 80048cc:	4649      	mov	r1, r9
 80048ce:	4638      	mov	r0, r7
 80048d0:	47c0      	blx	r8
 80048d2:	3001      	adds	r0, #1
 80048d4:	d0e6      	beq.n	80048a4 <_printf_common+0xa4>
 80048d6:	3601      	adds	r6, #1
 80048d8:	e7d9      	b.n	800488e <_printf_common+0x8e>
	...

080048dc <_printf_i>:
 80048dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048e0:	460c      	mov	r4, r1
 80048e2:	4691      	mov	r9, r2
 80048e4:	7e27      	ldrb	r7, [r4, #24]
 80048e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048e8:	2f78      	cmp	r7, #120	; 0x78
 80048ea:	4680      	mov	r8, r0
 80048ec:	469a      	mov	sl, r3
 80048ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048f2:	d807      	bhi.n	8004904 <_printf_i+0x28>
 80048f4:	2f62      	cmp	r7, #98	; 0x62
 80048f6:	d80a      	bhi.n	800490e <_printf_i+0x32>
 80048f8:	2f00      	cmp	r7, #0
 80048fa:	f000 80d8 	beq.w	8004aae <_printf_i+0x1d2>
 80048fe:	2f58      	cmp	r7, #88	; 0x58
 8004900:	f000 80a3 	beq.w	8004a4a <_printf_i+0x16e>
 8004904:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800490c:	e03a      	b.n	8004984 <_printf_i+0xa8>
 800490e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004912:	2b15      	cmp	r3, #21
 8004914:	d8f6      	bhi.n	8004904 <_printf_i+0x28>
 8004916:	a001      	add	r0, pc, #4	; (adr r0, 800491c <_printf_i+0x40>)
 8004918:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800491c:	08004975 	.word	0x08004975
 8004920:	08004989 	.word	0x08004989
 8004924:	08004905 	.word	0x08004905
 8004928:	08004905 	.word	0x08004905
 800492c:	08004905 	.word	0x08004905
 8004930:	08004905 	.word	0x08004905
 8004934:	08004989 	.word	0x08004989
 8004938:	08004905 	.word	0x08004905
 800493c:	08004905 	.word	0x08004905
 8004940:	08004905 	.word	0x08004905
 8004944:	08004905 	.word	0x08004905
 8004948:	08004a95 	.word	0x08004a95
 800494c:	080049b9 	.word	0x080049b9
 8004950:	08004a77 	.word	0x08004a77
 8004954:	08004905 	.word	0x08004905
 8004958:	08004905 	.word	0x08004905
 800495c:	08004ab7 	.word	0x08004ab7
 8004960:	08004905 	.word	0x08004905
 8004964:	080049b9 	.word	0x080049b9
 8004968:	08004905 	.word	0x08004905
 800496c:	08004905 	.word	0x08004905
 8004970:	08004a7f 	.word	0x08004a7f
 8004974:	680b      	ldr	r3, [r1, #0]
 8004976:	1d1a      	adds	r2, r3, #4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	600a      	str	r2, [r1, #0]
 800497c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004984:	2301      	movs	r3, #1
 8004986:	e0a3      	b.n	8004ad0 <_printf_i+0x1f4>
 8004988:	6825      	ldr	r5, [r4, #0]
 800498a:	6808      	ldr	r0, [r1, #0]
 800498c:	062e      	lsls	r6, r5, #24
 800498e:	f100 0304 	add.w	r3, r0, #4
 8004992:	d50a      	bpl.n	80049aa <_printf_i+0xce>
 8004994:	6805      	ldr	r5, [r0, #0]
 8004996:	600b      	str	r3, [r1, #0]
 8004998:	2d00      	cmp	r5, #0
 800499a:	da03      	bge.n	80049a4 <_printf_i+0xc8>
 800499c:	232d      	movs	r3, #45	; 0x2d
 800499e:	426d      	negs	r5, r5
 80049a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a4:	485e      	ldr	r0, [pc, #376]	; (8004b20 <_printf_i+0x244>)
 80049a6:	230a      	movs	r3, #10
 80049a8:	e019      	b.n	80049de <_printf_i+0x102>
 80049aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80049ae:	6805      	ldr	r5, [r0, #0]
 80049b0:	600b      	str	r3, [r1, #0]
 80049b2:	bf18      	it	ne
 80049b4:	b22d      	sxthne	r5, r5
 80049b6:	e7ef      	b.n	8004998 <_printf_i+0xbc>
 80049b8:	680b      	ldr	r3, [r1, #0]
 80049ba:	6825      	ldr	r5, [r4, #0]
 80049bc:	1d18      	adds	r0, r3, #4
 80049be:	6008      	str	r0, [r1, #0]
 80049c0:	0628      	lsls	r0, r5, #24
 80049c2:	d501      	bpl.n	80049c8 <_printf_i+0xec>
 80049c4:	681d      	ldr	r5, [r3, #0]
 80049c6:	e002      	b.n	80049ce <_printf_i+0xf2>
 80049c8:	0669      	lsls	r1, r5, #25
 80049ca:	d5fb      	bpl.n	80049c4 <_printf_i+0xe8>
 80049cc:	881d      	ldrh	r5, [r3, #0]
 80049ce:	4854      	ldr	r0, [pc, #336]	; (8004b20 <_printf_i+0x244>)
 80049d0:	2f6f      	cmp	r7, #111	; 0x6f
 80049d2:	bf0c      	ite	eq
 80049d4:	2308      	moveq	r3, #8
 80049d6:	230a      	movne	r3, #10
 80049d8:	2100      	movs	r1, #0
 80049da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049de:	6866      	ldr	r6, [r4, #4]
 80049e0:	60a6      	str	r6, [r4, #8]
 80049e2:	2e00      	cmp	r6, #0
 80049e4:	bfa2      	ittt	ge
 80049e6:	6821      	ldrge	r1, [r4, #0]
 80049e8:	f021 0104 	bicge.w	r1, r1, #4
 80049ec:	6021      	strge	r1, [r4, #0]
 80049ee:	b90d      	cbnz	r5, 80049f4 <_printf_i+0x118>
 80049f0:	2e00      	cmp	r6, #0
 80049f2:	d04d      	beq.n	8004a90 <_printf_i+0x1b4>
 80049f4:	4616      	mov	r6, r2
 80049f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80049fa:	fb03 5711 	mls	r7, r3, r1, r5
 80049fe:	5dc7      	ldrb	r7, [r0, r7]
 8004a00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a04:	462f      	mov	r7, r5
 8004a06:	42bb      	cmp	r3, r7
 8004a08:	460d      	mov	r5, r1
 8004a0a:	d9f4      	bls.n	80049f6 <_printf_i+0x11a>
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d10b      	bne.n	8004a28 <_printf_i+0x14c>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	07df      	lsls	r7, r3, #31
 8004a14:	d508      	bpl.n	8004a28 <_printf_i+0x14c>
 8004a16:	6923      	ldr	r3, [r4, #16]
 8004a18:	6861      	ldr	r1, [r4, #4]
 8004a1a:	4299      	cmp	r1, r3
 8004a1c:	bfde      	ittt	le
 8004a1e:	2330      	movle	r3, #48	; 0x30
 8004a20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a24:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004a28:	1b92      	subs	r2, r2, r6
 8004a2a:	6122      	str	r2, [r4, #16]
 8004a2c:	f8cd a000 	str.w	sl, [sp]
 8004a30:	464b      	mov	r3, r9
 8004a32:	aa03      	add	r2, sp, #12
 8004a34:	4621      	mov	r1, r4
 8004a36:	4640      	mov	r0, r8
 8004a38:	f7ff fee2 	bl	8004800 <_printf_common>
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d14c      	bne.n	8004ada <_printf_i+0x1fe>
 8004a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a44:	b004      	add	sp, #16
 8004a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a4a:	4835      	ldr	r0, [pc, #212]	; (8004b20 <_printf_i+0x244>)
 8004a4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	680e      	ldr	r6, [r1, #0]
 8004a54:	061f      	lsls	r7, r3, #24
 8004a56:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a5a:	600e      	str	r6, [r1, #0]
 8004a5c:	d514      	bpl.n	8004a88 <_printf_i+0x1ac>
 8004a5e:	07d9      	lsls	r1, r3, #31
 8004a60:	bf44      	itt	mi
 8004a62:	f043 0320 	orrmi.w	r3, r3, #32
 8004a66:	6023      	strmi	r3, [r4, #0]
 8004a68:	b91d      	cbnz	r5, 8004a72 <_printf_i+0x196>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	f023 0320 	bic.w	r3, r3, #32
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	2310      	movs	r3, #16
 8004a74:	e7b0      	b.n	80049d8 <_printf_i+0xfc>
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	f043 0320 	orr.w	r3, r3, #32
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	2378      	movs	r3, #120	; 0x78
 8004a80:	4828      	ldr	r0, [pc, #160]	; (8004b24 <_printf_i+0x248>)
 8004a82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a86:	e7e3      	b.n	8004a50 <_printf_i+0x174>
 8004a88:	065e      	lsls	r6, r3, #25
 8004a8a:	bf48      	it	mi
 8004a8c:	b2ad      	uxthmi	r5, r5
 8004a8e:	e7e6      	b.n	8004a5e <_printf_i+0x182>
 8004a90:	4616      	mov	r6, r2
 8004a92:	e7bb      	b.n	8004a0c <_printf_i+0x130>
 8004a94:	680b      	ldr	r3, [r1, #0]
 8004a96:	6826      	ldr	r6, [r4, #0]
 8004a98:	6960      	ldr	r0, [r4, #20]
 8004a9a:	1d1d      	adds	r5, r3, #4
 8004a9c:	600d      	str	r5, [r1, #0]
 8004a9e:	0635      	lsls	r5, r6, #24
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	d501      	bpl.n	8004aa8 <_printf_i+0x1cc>
 8004aa4:	6018      	str	r0, [r3, #0]
 8004aa6:	e002      	b.n	8004aae <_printf_i+0x1d2>
 8004aa8:	0671      	lsls	r1, r6, #25
 8004aaa:	d5fb      	bpl.n	8004aa4 <_printf_i+0x1c8>
 8004aac:	8018      	strh	r0, [r3, #0]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	6123      	str	r3, [r4, #16]
 8004ab2:	4616      	mov	r6, r2
 8004ab4:	e7ba      	b.n	8004a2c <_printf_i+0x150>
 8004ab6:	680b      	ldr	r3, [r1, #0]
 8004ab8:	1d1a      	adds	r2, r3, #4
 8004aba:	600a      	str	r2, [r1, #0]
 8004abc:	681e      	ldr	r6, [r3, #0]
 8004abe:	6862      	ldr	r2, [r4, #4]
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f7fb fb84 	bl	80001d0 <memchr>
 8004ac8:	b108      	cbz	r0, 8004ace <_printf_i+0x1f2>
 8004aca:	1b80      	subs	r0, r0, r6
 8004acc:	6060      	str	r0, [r4, #4]
 8004ace:	6863      	ldr	r3, [r4, #4]
 8004ad0:	6123      	str	r3, [r4, #16]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad8:	e7a8      	b.n	8004a2c <_printf_i+0x150>
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	4632      	mov	r2, r6
 8004ade:	4649      	mov	r1, r9
 8004ae0:	4640      	mov	r0, r8
 8004ae2:	47d0      	blx	sl
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d0ab      	beq.n	8004a40 <_printf_i+0x164>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	079b      	lsls	r3, r3, #30
 8004aec:	d413      	bmi.n	8004b16 <_printf_i+0x23a>
 8004aee:	68e0      	ldr	r0, [r4, #12]
 8004af0:	9b03      	ldr	r3, [sp, #12]
 8004af2:	4298      	cmp	r0, r3
 8004af4:	bfb8      	it	lt
 8004af6:	4618      	movlt	r0, r3
 8004af8:	e7a4      	b.n	8004a44 <_printf_i+0x168>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4632      	mov	r2, r6
 8004afe:	4649      	mov	r1, r9
 8004b00:	4640      	mov	r0, r8
 8004b02:	47d0      	blx	sl
 8004b04:	3001      	adds	r0, #1
 8004b06:	d09b      	beq.n	8004a40 <_printf_i+0x164>
 8004b08:	3501      	adds	r5, #1
 8004b0a:	68e3      	ldr	r3, [r4, #12]
 8004b0c:	9903      	ldr	r1, [sp, #12]
 8004b0e:	1a5b      	subs	r3, r3, r1
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	dcf2      	bgt.n	8004afa <_printf_i+0x21e>
 8004b14:	e7eb      	b.n	8004aee <_printf_i+0x212>
 8004b16:	2500      	movs	r5, #0
 8004b18:	f104 0619 	add.w	r6, r4, #25
 8004b1c:	e7f5      	b.n	8004b0a <_printf_i+0x22e>
 8004b1e:	bf00      	nop
 8004b20:	08004e15 	.word	0x08004e15
 8004b24:	08004e26 	.word	0x08004e26

08004b28 <_sbrk_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4d06      	ldr	r5, [pc, #24]	; (8004b44 <_sbrk_r+0x1c>)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4608      	mov	r0, r1
 8004b32:	602b      	str	r3, [r5, #0]
 8004b34:	f7fc f9bc 	bl	8000eb0 <_sbrk>
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	d102      	bne.n	8004b42 <_sbrk_r+0x1a>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	b103      	cbz	r3, 8004b42 <_sbrk_r+0x1a>
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	20000188 	.word	0x20000188

08004b48 <__sread>:
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b50:	f000 f8a0 	bl	8004c94 <_read_r>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	bfab      	itete	ge
 8004b58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8004b5c:	181b      	addge	r3, r3, r0
 8004b5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b62:	bfac      	ite	ge
 8004b64:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b66:	81a3      	strhlt	r3, [r4, #12]
 8004b68:	bd10      	pop	{r4, pc}

08004b6a <__swrite>:
 8004b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6e:	461f      	mov	r7, r3
 8004b70:	898b      	ldrh	r3, [r1, #12]
 8004b72:	05db      	lsls	r3, r3, #23
 8004b74:	4605      	mov	r5, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	4616      	mov	r6, r2
 8004b7a:	d505      	bpl.n	8004b88 <__swrite+0x1e>
 8004b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b80:	2302      	movs	r3, #2
 8004b82:	2200      	movs	r2, #0
 8004b84:	f000 f868 	bl	8004c58 <_lseek_r>
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b92:	81a3      	strh	r3, [r4, #12]
 8004b94:	4632      	mov	r2, r6
 8004b96:	463b      	mov	r3, r7
 8004b98:	4628      	mov	r0, r5
 8004b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b9e:	f000 b817 	b.w	8004bd0 <_write_r>

08004ba2 <__sseek>:
 8004ba2:	b510      	push	{r4, lr}
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004baa:	f000 f855 	bl	8004c58 <_lseek_r>
 8004bae:	1c43      	adds	r3, r0, #1
 8004bb0:	89a3      	ldrh	r3, [r4, #12]
 8004bb2:	bf15      	itete	ne
 8004bb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bbe:	81a3      	strheq	r3, [r4, #12]
 8004bc0:	bf18      	it	ne
 8004bc2:	81a3      	strhne	r3, [r4, #12]
 8004bc4:	bd10      	pop	{r4, pc}

08004bc6 <__sclose>:
 8004bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bca:	f000 b813 	b.w	8004bf4 <_close_r>
	...

08004bd0 <_write_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	4d07      	ldr	r5, [pc, #28]	; (8004bf0 <_write_r+0x20>)
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	4608      	mov	r0, r1
 8004bd8:	4611      	mov	r1, r2
 8004bda:	2200      	movs	r2, #0
 8004bdc:	602a      	str	r2, [r5, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f7fc f915 	bl	8000e0e <_write>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_write_r+0x1e>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_write_r+0x1e>
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	20000188 	.word	0x20000188

08004bf4 <_close_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4d06      	ldr	r5, [pc, #24]	; (8004c10 <_close_r+0x1c>)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	602b      	str	r3, [r5, #0]
 8004c00:	f7fc f921 	bl	8000e46 <_close>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d102      	bne.n	8004c0e <_close_r+0x1a>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	b103      	cbz	r3, 8004c0e <_close_r+0x1a>
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	20000188 	.word	0x20000188

08004c14 <_fstat_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4d07      	ldr	r5, [pc, #28]	; (8004c34 <_fstat_r+0x20>)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	4608      	mov	r0, r1
 8004c1e:	4611      	mov	r1, r2
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	f7fc f91c 	bl	8000e5e <_fstat>
 8004c26:	1c43      	adds	r3, r0, #1
 8004c28:	d102      	bne.n	8004c30 <_fstat_r+0x1c>
 8004c2a:	682b      	ldr	r3, [r5, #0]
 8004c2c:	b103      	cbz	r3, 8004c30 <_fstat_r+0x1c>
 8004c2e:	6023      	str	r3, [r4, #0]
 8004c30:	bd38      	pop	{r3, r4, r5, pc}
 8004c32:	bf00      	nop
 8004c34:	20000188 	.word	0x20000188

08004c38 <_isatty_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4d06      	ldr	r5, [pc, #24]	; (8004c54 <_isatty_r+0x1c>)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	f7fc f91b 	bl	8000e7e <_isatty>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d102      	bne.n	8004c52 <_isatty_r+0x1a>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	b103      	cbz	r3, 8004c52 <_isatty_r+0x1a>
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	20000188 	.word	0x20000188

08004c58 <_lseek_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4d07      	ldr	r5, [pc, #28]	; (8004c78 <_lseek_r+0x20>)
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	4608      	mov	r0, r1
 8004c60:	4611      	mov	r1, r2
 8004c62:	2200      	movs	r2, #0
 8004c64:	602a      	str	r2, [r5, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f7fc f914 	bl	8000e94 <_lseek>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d102      	bne.n	8004c76 <_lseek_r+0x1e>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	b103      	cbz	r3, 8004c76 <_lseek_r+0x1e>
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	20000188 	.word	0x20000188

08004c7c <__malloc_lock>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	; (8004c84 <__malloc_lock+0x8>)
 8004c7e:	f7ff bb55 	b.w	800432c <__retarget_lock_acquire_recursive>
 8004c82:	bf00      	nop
 8004c84:	20000180 	.word	0x20000180

08004c88 <__malloc_unlock>:
 8004c88:	4801      	ldr	r0, [pc, #4]	; (8004c90 <__malloc_unlock+0x8>)
 8004c8a:	f7ff bb50 	b.w	800432e <__retarget_lock_release_recursive>
 8004c8e:	bf00      	nop
 8004c90:	20000180 	.word	0x20000180

08004c94 <_read_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4d07      	ldr	r5, [pc, #28]	; (8004cb4 <_read_r+0x20>)
 8004c98:	4604      	mov	r4, r0
 8004c9a:	4608      	mov	r0, r1
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	602a      	str	r2, [r5, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f7fc f896 	bl	8000dd4 <_read>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	d102      	bne.n	8004cb2 <_read_r+0x1e>
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	b103      	cbz	r3, 8004cb2 <_read_r+0x1e>
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
 8004cb4:	20000188 	.word	0x20000188

08004cb8 <_init>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	bf00      	nop
 8004cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cbe:	bc08      	pop	{r3}
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	4770      	bx	lr

08004cc4 <_fini>:
 8004cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc6:	bf00      	nop
 8004cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cca:	bc08      	pop	{r3}
 8004ccc:	469e      	mov	lr, r3
 8004cce:	4770      	bx	lr
